' Gambas class file

'Copyright (C) 2007, 2008 Antonio Orefice

Public AlreadyLoaded As Boolean = False 'true if the form loaded it's settings from disk at least one time
Private exportfilespath As String
Public cachedopts As String = ""

Private Function IsTabChildren(name As String, Optional index As Integer = 99999) As Boolean
  
  Dim found As Boolean = False
  Dim theobject As Object
  
  If index <> 99999 Then
    For Each theobject In Leftsidetabs[index].Children
      If theobject.name = name Then
        found = True
        Break
      Endif
    Next 'theobject
  Else
    For Each theobject In Leftsidetabs.Current.Children
      If theobject.name = name Then
        found = True
        Break
      Endif
    Next 'theobject
  Endif
  Return found
  
End

Public Function TabSelectedLibrary() As Boolean
  Return IsTabChildren("NOPARSETABLIBRARY")
End

Public Function TabSelectedPlaylist() As Boolean
  Return IsTabChildren("NOPARSETABPLAYLIST")
End

Public Function TabSelectedFlash() As Boolean
  Return IsTabChildren("NOPARSETABFLASH")
End

Public Function TabSelectedShoutcast() As Boolean
  Return IsTabChildren("NOPARSETABSHOUTCAST")
End

Public Function TabSelectedyoutube() As Boolean
  Return IsTabChildren("NOPARSETABYOUTUBE")
End

Public Function TabSelectedCDDA() As Boolean
  Return IsTabChildren("NOPARSETABCDDA")
End

Public Function TabSelectedDVD() As Boolean
  Return IsTabChildren("NOPARSETABDVD")
End

Public Function TabSelectedDVB() As Boolean
  Return IsTabChildren("NOPARSETABDVB")
End

Public Function TabSelectedBrowse() As Boolean
  Return IsTabChildren("NOPARSETABBROWSE")
End

Public Function TabSelectedDVDAt(index As Integer) As Boolean
  Return IsTabChildren("NOPARSETABDVD", index)
End

Public Function TabSelectedCDDAAt(index As Integer) As Boolean
  Return IsTabChildren("NOPARSETABCDDA", index)
End

Public Function TabSelectedPodCasts() As Boolean
  Return IsTabChildren("NOPARSETABPODCAST")
End

Public Function TabSelectedMediaInfo() As Boolean
  Return IsTabChildren("NOPARSETABMEDIAINFO")
End

Public Function TabSelectedProfiles() As Boolean
  Return IsTabChildren("NOPARSETABPROFILES")
End

Public closing As Boolean = False

' with compiz window manager window position is not correctly restored,
' so we measure the delta and apply it.
Public ScreenXBefore As Integer
Public ScreenYBefore As Integer
Public FullScreenSwitchDeltaX As Integer = 0
Public FullScreenSwitchDeltaY As Integer = 0

Public mypodcast As New Podcast
Public MyRadio As New ShoutCastClass
Public Youtube As New Youtubeclass

Public mplayer As New MplayerClass
Public MyFlash As FlashClass

Public MyLibrary As New PlaylistClass
Public MyPlaylist As New PlaylistClass
Public MyDVBTList As New PlaylistClass
Public Host As Object
Public dvd_device As String

Public overboost As Integer = 100 'contains softvol max value.

Public Shutdown As String = "FALSE"

Public hLock As Stream

Public IsDVD As Boolean = False
Public ISCDDA As Boolean = False

Public FullyLoaded As Boolean = False

Private MousePos As String = "0.0"
Public Alternate As Boolean = True
Private IgnoreMouse As Boolean = False
Public ResizeFactor As Float = 1
Private MousePressed As Boolean = False
Private PreMpOptions As String = " -vf-pre scale "
Private PostMpOptions As String = ""
Private PostVFilters As String = ""
Private mouseleft As Boolean = False 'used to manage dblclick event in videoarea group
Private MouseOnFmain As Boolean = True 'used to manage autohide panels on multihead screens ;-)
'statusbar time format, can be:
'0- 00:00:00/00:00:00 (total formatted time)
'1- -00:00:00/00:00:00 (remaining formatted time)
'2- 0000/0000 (total seconds)
'3- -0000/0000 (total remaining seconds)
Private TimeFormat As Integer = "0"
Private DoSlideUp As Boolean = True 'used to manage controlpanel hide/show smootly

Public PlayStarted As Boolean = False
Public EndOfMediaReached As Boolean = False
Public SplitterLayout As Integer[]
Public LeftsideWasVisible As Boolean = False
Private VEqHasBeenSet As Boolean = False 'To Apply video equalizer settings just one time :)

Public LastFocusedObj As Object

Private GuiDragging As Boolean = False 'if gui is dragging dont read hotkeys

Private Const MIME_ROWS As String = "text/x-xt7-rows-list"

'If you want to change tabstrip order, then you'll have to modify this too:
Private Const TabStripLibrary As Integer = 0
Private Const TabStripPlaylist As Integer = 1
Private Const TabStripMediaInfo As Integer = 2

'mousedrag is incorrectly raised on dblclick on videogrouparea, so we use this:
Private SwitchingFullScreen As Boolean = False

Private UserStopped As Boolean = False 'if user has hit stop, don't advance in playlist.
Private FirstPlay As Boolean = False ' used to avoid playing the media at startup if togglepls button is toggled

Public LastDvdID As String = ""            'used to manage dvd disk changes

Public DVDTabID As Integer = "-1"  'as we hide the dvd tab, we loose the caption, so we must remember the id
Public CDDATabID As Integer = "-1"
Public FlashTabID As Integer = "-1"  'as we hide the Flash tab, we loose the caption, so we must remember the id

Private DynaGuiTools As New DynaGuiClass

Public TagEditMode As Boolean = False

Public trayicon1 As Trayicon

Public Sub InitTrayIcon()
  'Dim trayicon1 As New TrayIcon

  Try trayicon1 = New Trayicon
  If Error Then Debug "Cannot Init Trayicon"
  trayicon1.Picture = picture.Load("trayicon.png")
  trayicon1.Picture.Image.Stretch(trayicon1.w, trayicon1.h)
  trayicon1.Visible = True
  Try Object.Attach(Trayicon1, Me, "Trayicon1")
  If Error Then Debug "Cannot Init Trayicon"
  
End

Public Sub Form_Open()

  Dim tmpimage As Image
  Dim msg As String

  SetFlexSpaceVisibility(False)
  'init dynagui toolbar objects
  DynaGuiTools.AllowedContainers = ["MainToolbar"] ', "SliderBox"]
  DynaGuiTools.YOffset = - Me.Font.TextHeight("Ij") - 8
  'Hide the coverbox
  If GeneralOptions.CoverCHK2.value Then ShowAudioPanel(False)
  'Popup translation needed dialog:
  If global.TranslationNeeded Then
    If Not (Exist(TranslationNeeded.Notranslatefile)) Then TranslationNeeded.show
  Endif

  If Not (Exist(Global.NOsoftvolmessagefile)) Then
    msg = ("To Ubuntu users:\n")
    msg &= ("If the video stops when you change volume,") & "\n"
    msg &= ("enable: ") & ("software volume Control") & "\n"
    msg &= ("Under ") & ("General Options ") & "-> " & ("Audio") & "\n"
    msg &= "\n"
    msg &= ("Or disable any audio driver to use the default one") & "\n"
    msg &= ("This is an issue with Ubuntu + mplayer + pulseaudio, sorry")
    msg &= "\n"
    If Message.Warning(msg, ("Don't show anymore"), ("Remind me later")) = 1 Then
      file.Save(Global.NOsoftvolmessagefile, ".")
    Endif
  Endif
End

Public Sub SetFlexSpaceVisibility(Visibility As Boolean)
  If Visibility = True Then
    FlexSpace.border = Border.plain
    FlexSpace.background = Color.White
  Else
    FlexSpace.border = Border.none 'gambas3
  Endif
End

Public Sub DynaGuiToolbar_Click()
  Dim ButtonName As String
  If MenuToolBarLocked.checked Then
    Try ButtonName = Last.name
    If (Not Error ) Then
      Select Case ButtonName
        Case "ShowVolBtn2"
          ShowVolBtn2_Click()
        Case "OpenNetworkBTN"
          OpenNetworkBTN_Click()
        Case "ConfigureChainsBTN"
          'If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          ConfigureChainsBTN_Click()
        Case "ConfigureBTN"
          'If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
           If (Not global.initearlyformsdone) Then InitEarlyForms()
          ConfigureBTN_Click()
         Case "RealtimeBTN"
          'If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
           If (Not global.initearlyformsdone) Then InitEarlyForms()
          Global.Center(fmain, realtimeform)
          RealtimeForm.show()
        Case "ShowVideoEq"
          'If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
           If (Not global.initearlyformsdone) Then InitEarlyForms()
          ShowVideoEq_Click()
        Case "ShowAudioEq"
          'If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
           If (Not global.initearlyformsdone) Then InitEarlyForms()
          ShowAudioEq_Click()
        Case "SwitchAudioBTN"
          SwitchAudioBTN_Click()
        Case "SwitchSubBtn"
          SwitchSubBtn_Click()
        Case "PoweroffBTN"
          'If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
           If (Not global.initearlyformsdone) Then InitEarlyForms()
          PowerffBTN_click()
        Case "SwitchSidePanelBTN"
          SwitchSidePanelBTN_click()
        Case "FullScreenBtn"
          FullScreenBtn_click()
        Case "TagEditorBtn"
          TagEditorBtn_click()
      End Select
    Endif
  Endif
End

'--------------------------------------------------

Public Sub TagEditorBtn_click()
  EditTagModeSwitch1_Click()
End

Public Sub InitLibrary(MyLibrary As PlaylistClass, LibraryGrid As Gridview, WithMplayer As Boolean)

  Dim Tag As String
  Dim i As Integer = 0

  MyLibrary.Init(WithMplayer)
  LibraryGrid.Columns.count = MyLibrary.ColumnIndex.Count
  For Each Tag In MyLibrary.ColumnIndex
    LibraryGrid.Columns[i].Text = MyLibrary.ColumnIndex.Key
    i = i + 1
  Next
  MyLibrary.Load(LibraryGrid, global.confpath)

End

Public Sub HideGrid(Librarygrid As Gridview)
  Select Case librarygrid.name
    Case "PlaylistGrid"
      If WaitPanel2.Text <> "" Then WaitPanel2.Text = ""
      playlistgrid.visible = False
      WaitPanel2.visible = True
      PlayListSelInfo.visible = False
      PlayListSelInfoBox.Visible = False
    Case "LibraryGrid"
      If WaitPanel.Text <> "" Then WaitPanel.Text = ""
      librarygrid.visible = False
      WaitPanel.visible = True
      LibrarySelInfo.visible = False
    Case "DVBTGrid"
      If WaitPanel3.Text <> "" Then WaitPanel3.Text = ""
      dvbtgrid.visible = False
      HBox19.visible = False
      WaitPanel3.visible = True
  End Select
End

Public Sub ShowGrid(LibraryGrid As Gridview)
  Select Case librarygrid.name
    Case "PlaylistGrid"
      WaitPanel2.visible = False
      playlistgrid.visible = True
    Case "LibraryGrid"
      WaitPanel.visible = False
      LibraryGrid.visible = True
    Case "DVBTGrid"
      WaitPanel3.visible = False
      dvbtgrid.visible = True
      HBox19.visible = True
  End Select
End

Public Sub AllInit_Pre()
  Dim MySettings As New SettingsClass
  VersionCheck()
  'MakeProfilePath() <--maininit already did this
  MakeScreenshotsPath()
  Try Mkdir global.confpath & "/.ExportFiles/"
  ExportFilesPath = global.confpath & "/.ExportFiles/"
  FileView1.visible = False
  tagpanel.Reparent(zzzfake)
  'mplayer.FillLog = TRUE
  mplayer.wid = VideoBox.Handle
  InitPropertiesGrid()
  AspectMenu.visible = False
  Try Copy "FakeInput.conf" To "/tmp/FakeInput.conf"
  SetDvdTabVisibility(False)
  SetCDDATabVisibility(False)
  If Not (Exist(global.confpath & "/" & "Factory_Defaults.profile")) Then
    'inizializza prma tutto:
    InitEarlyForms()
    ReallySaveAllSettings("Factory_Defaults", False) 'before loading user settings, make a profile with factory values.
  Endif
  Global.LoadEarlySettings(global.CurrentProfile) 'slow
  HideGrid(PlaylistGrid)
  HideGrid(LibraryGrid)
  HideGrid(dvbtGrid)
  SetDvdTabVisibility(False)
  SetCDDATabVisibility(False)
  SetStyle_early()
End

Public Sub InitEarlyForms()
  Debug "start at: " & Time
  Try Last.mouse = mouse.wait
  fmain.mouse = mouse.wait
  global.initearlyformsdone = True
  SubAndOsd.Init()
  VFiltersCfg.Init()
  AFiltersCfg.Init()
  GeneralOptions.Init()
  Try Last.mouse = mouse.default
  fmain.mouse = mouse.default
  Debug "Ends at:" & Time
End

Public Sub AllInit_Post()
  Dim DefaultProfilepath As String = global.confpath & "/default.profile"
  Dim savefileview1path As String

  Hsplit1ResizeDelayed = New Timer As "Hsplit1ResizeDelayed" 'used to delay the hsplit resize and better performance
  Hsplit1ResizeDelayed.delay = 300
  Hsplit1ResizeDelayed.Enabled = False
  savefileview1path = FileView1.dir
  FileView1.dir = "non/esistent/dir/i/am/very/sure/of/this/1234432100/don/t/you"
  FileView1.visible = True
  FileView1.dir = savefileview1path
  FileView1.Reload
  If (Application.Args.count = 1) And (GeneralOptions.AnimLogoCHK.value = True) Then PlayAnimLogo()
  Leftsidepanel.mouse = mouse.wait
  InitLibrary(MyLibrary, LibraryGrid, True)
  InitLibrary(MyPlaylist, PlayListGrid, True)
  InitLibrary(MyDVBTList, DVBTGrid, False)
  Try mypodcast.LoadPods(global.confpath & "/mypods.txt", PodcastTree)
  'some gtk component problem here
  Try ComboHistory.LoadHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Fmain.UrlBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchFieldDVB, global.confpath & "/" & global.CurrentProfile)
  Myflash = New FlashClass As "MyFlash"
  InitFlashGrid()
  SetStyle_early()
  UpdateSearchResults(MyLibrary, LibraryGrid, False, Searchfield.text)
  UpdateSearchResults(MyPlaylist, PlaylistGrid, False, SearchfieldPLS.text)
  LibraryGrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  PlayListGrid.Rows.h = PlayListGrid.Font.TextHeight("^_") + global.rowpadding
  Leftsidepanel.mouse = mouse.Default
  Try GeneralOptions.LoadWatchDir(global.confpath & "/" & global.CurrentProfile)
  Try GeneralOptions.LoadExcludeDir(global.confpath & "/" & global.CurrentProfile)
  'kill prevoiusly launched xbindkeys
  Shell ("killall " & global.CustomBindKeys) For Read
  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value
  'Prepare our xbindkeys link, we'll need it to ensure only one at time.
  Shell ("ln -s $(which xbindkeys) " & global.confpath & "/Xt7BindKeys") For Read
  'start to listen for remote commands, one connection is ok.
  Mysocket.type = Net.Unix
  Mysocket.path = global.confpath & "/.localsocket"
  Mysocket.Listen(1)
  InitGenresTag()
  Wait 0.5
  SetStyle_later()
  HotKeys.init()
  Try HotKeys.LoadHotKeys(global.confpath & "/" & global.CurrentProfile)
  UpdateProfilesTabList()
  UpdateMenuTabVisibility()
  If GeneralOptions.TrayCHK1.value Then Try InitTrayIcon()
  If TabSelectedShoutcast() Then
    ShoutCast_Select()
  Else If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Else If TabSelectedPlaylist() Then
    LibraryGrid_Select()
  Else If TabSelectedyoutube() Then
    Youtube_Select()
  Endif
  global.AddUserExtensions(GeneralOptions.KnownExtensions.text)
  FullyLoaded = True
  ShowGrid(librarygrid)
  ShowGrid(playlistgrid)
  ShowGrid(DVBTGrid)
  If fmain.havetoshowbrowsetab Then
    fmain.havetoshowbrowsetab = False
    If Exist(Application.Args[1]) Then fmain.ShowBrowseTabTo(Application.Args[1])
  Endif
  If GeneralOptions.ToolTipsCHKDBUS.value Then Try ExportDbusProperties()
   updaterecentfiles()
End

Private RecentFileEntry As Menu


Private HaveToPlay As String = ""
Public Sub updaterecentfiles()
  Dim child As Menu
  Dim history, entry As String
  Dim historyarray As String[]
  Dim sep As String = Chr(8)
  Dim HaveToSeek As String = ""
  Try history = file.Load(global.Historyfile)
  If Error Then Return
  'Clear and pupulate the list:
  ClearRecentFilesSub()
  historyarray = Split(history, "\n", "", True)
  historyarray.Reverse()
  For Each entry In historyarray
    RecentFileEntry = New Menu(MenuOpenRecent) As "RecentFileEntry"
    RecentFileEntry.name = Timer & Rnd(0, 10000)
    If entry Like "*" & sep & "*" Then 
      If HaveToPlay = "" Then
        Try HaveToPlay = Split(entry, sep, "", True, "")[0]
        If Not Error Then 
          Try HaveToSeek = Split(entry, sep, "", True, "")[1]
          entry = HaveToPlay
        Endif
      Endif
    Endif
    If entry Like ("*" & sep & "*") Then
      Try RecentFileEntry.caption = Split(entry, sep, "", True, "")[0]
      If Error Then Return
        Else
      RecentFileEntry.caption = entry
    Endif
    RecentFileEntry.Picture = picture["icon:/medium/recent"]
  Next 'entry
   RecentFileEntry = New Menu(MenuOpenRecent) As "ClearRecentFiles"
   RecentFileEntry.name = "menuclearrecent"
   RecentFileEntry.caption = "Clear History"
   RecentFileEntry.picture = picture["icon:/medium/delete"]

   'restore the previous media
   If GeneralOptions.RestorePlayCHK.value Then
    If HaveToPlay <> "" Then 
      If HaveToSeek <> "" Then
        If Not (PlayFromCommandline) Then 
         Play(False, HaveToPlay, True, " -ss " & HaveToSeek & " " & cachedopts)
        Endif
      Endif
    Endif
   Endif
End

Public Sub RecentFileEntry_Click()
  Try Play(False, Last.caption)
End

Public Sub ClearRecentFiles_Click()
  Try Kill global.Historyfile
  If Not Error Then 
    ClearRecentFilesSub()
      Else
    Message.Error(("Couldn't clear the history!"), "Ok")
  Endif
End

Public Sub ClearRecentFilesSub()
  Dim child As Menu
  Repeat 
    For Each child In MenuOpenRecent.Children
      child.delete
    Next 'child
  Until (MenuOpenRecent.Children.count = 0)
End

Public Sub InitFlashGrid()
  MyFlash.Grid = Fmain.FlashGrid
  MyFlash.init()
End

Public Sub PlayAnimLogo()
  Dim tmplogo As String = Temp("_AnImLoGo_.avi")
  Try Copy "_AnImLoGo_.avi" To tmplogo
  mplayer.do_play(tmplogo, mplayer.CurrentOptions)
  CorrectAreaAspect
  mplayer.Media_FullPath = ""
End

Public Sub MakeProfilePath()
  Dim DefaultProfilepath As String = global.confpath & "/default.profile"
  'Try to make some profile folders
  Try Mkdir File.dir(File.Dir(File.dir(File.Dir(File.Dir(DefaultProfilepath)))))
  Try Mkdir File.Dir(File.dir(File.Dir(File.Dir(DefaultProfilepath))))
  Try Mkdir File.dir(File.Dir(File.Dir(DefaultProfilepath)))
  Try Mkdir File.Dir(File.Dir(DefaultProfilepath))
  Try Mkdir File.Dir(DefaultProfilepath)
  Try Mkdir DefaultProfilepath
End

Public Sub MakeScreenshotsPath()
  Try Shell "mkdir -p " & Global.ScreenshotFolder & " >/dev/null 2>&1" Wait
End

Private Sub InitGenresTag()

  tagbox5.add("A capella")
  tagbox5.add("Acid")
  tagbox5.add("Acid Jazz")
  tagbox5.add("Acid Punk")
  tagbox5.add("Acoustic")
  tagbox5.add("AlternRock")
  tagbox5.add("Alternative")
  tagbox5.add("Ambient")
  tagbox5.add("Anime")
  tagbox5.add("Avantgarde")
  tagbox5.add("Ballad")
  tagbox5.add("Bass")
  tagbox5.add("Beat")
  tagbox5.add("Bebob")
  tagbox5.add("Big Band")
  tagbox5.add("Black Metal")
  tagbox5.add("Bluegrass")
  tagbox5.add("Blues")
  tagbox5.add("Booty Bass")
  tagbox5.add("Britpop")
  tagbox5.add("Cabaret")
  tagbox5.add("Celtic")
  tagbox5.add("Chamber Music")
  tagbox5.add("Chanson")
  tagbox5.add("Chorus")
  tagbox5.add("Christian Gangsta Rap")
  tagbox5.add("Christian Rap")
  tagbox5.add("Christian Rock")
  tagbox5.add("Classic Rock")
  tagbox5.add("Classical")
  tagbox5.add("Club")
  tagbox5.add("Club-House")
  tagbox5.add("Comedy")
  tagbox5.add("Contemporary Christian")
  tagbox5.add("Country")
  tagbox5.add("Crossover")
  tagbox5.add("Cult")
  tagbox5.add("Dance")
  tagbox5.add("Dance Hall")
  tagbox5.add("Darkwave")
  tagbox5.add("Death Metal")
  tagbox5.add("Disco")
  tagbox5.add("Dream")
  tagbox5.add("Drum & Bass")
  tagbox5.add("Drum Solo")
  tagbox5.add("Duet")
  tagbox5.add("Easy Listening")
  tagbox5.add("Electronic")
  tagbox5.add("Ethnic")
  tagbox5.add("Euro-House")
  tagbox5.add("Euro-Techno")
  tagbox5.add("Eurodance")
  tagbox5.add("Fast Fusion")
  tagbox5.add("Folk")
  tagbox5.add("Folk-Rock")
  tagbox5.add("Folklore")
  tagbox5.add("Freestyle")
  tagbox5.add("Funk")
  tagbox5.add("Fusion")
  tagbox5.add("Game")
  tagbox5.add("Gangsta")
  tagbox5.add("Goa")
  tagbox5.add("Gospel")
  tagbox5.add("Gothic")
  tagbox5.add("Gothic Rock")
  tagbox5.add("Grunge")
  tagbox5.add("Hard Rock")
  tagbox5.add("Hardcore")
  tagbox5.add("Heavy Metal")
  tagbox5.add("Hip-Hop")
  tagbox5.add("House")
  tagbox5.add("Humour")
  tagbox5.add("Indie")
  tagbox5.add("Industrial")
  tagbox5.add("Instrumental")
  tagbox5.add("Instrumental Pop")
  tagbox5.add("Instrumental Rock")
  tagbox5.add("JPop")
  tagbox5.add("Jazz")
  tagbox5.add("Jazz+Funk")
  tagbox5.add("Jungle")
  tagbox5.add("Latin")
  tagbox5.add("Lo-Fi")
  tagbox5.add("Meditative")
  tagbox5.add("Merengue")
  tagbox5.add("Metal")
  tagbox5.add("Musical")
  tagbox5.add("National Folk")
  tagbox5.add("Native American")
  tagbox5.add("Negerpunk")
  tagbox5.add("New Age")
  tagbox5.add("New Wave")
  tagbox5.add("Noise")
  tagbox5.add("Oldies")
  tagbox5.add("Opera")
  tagbox5.add("Other")
  tagbox5.add("Polka")
  tagbox5.add("Polsk Punk")
  tagbox5.add("Pop")
  tagbox5.add("Pop-Folk")
  tagbox5.add("Pop/Funk")
  tagbox5.add("Porn Groove")
  tagbox5.add("Power Ballad")
  tagbox5.add("Pranks")
  tagbox5.add("Primus")
  tagbox5.add("Progressive Rock")
  tagbox5.add("Psychadelic")
  tagbox5.add("Psychedelic Rock")
  tagbox5.add("Punk")
  tagbox5.add("Punk Rock")
  tagbox5.add("R&B")
  tagbox5.add("Rap")
  tagbox5.add("Rave")
  tagbox5.add("Reggae")
  tagbox5.add("Retro")
  tagbox5.add("Revival")
  tagbox5.add("Rhythmic Soul")
  tagbox5.add("Rock")
  tagbox5.add("Rock & Roll")
  tagbox5.add("Salsa")
  tagbox5.add("Samba")
  tagbox5.add("Satire")
  tagbox5.add("Showtunes")
  tagbox5.add("Ska")
  tagbox5.add("Slow Jam")
  tagbox5.add("Slow Rock")
  tagbox5.add("Sonata")
  tagbox5.add("Soul")
  tagbox5.add("Sound Clip")
  tagbox5.add("Soundtrack")
  tagbox5.add("Southern Rock")
  tagbox5.add("Space")
  tagbox5.add("Speech")
  tagbox5.add("Swing")
  tagbox5.add("Symphonic Rock")
  tagbox5.add("Symphony")
  tagbox5.add("Synthpop")
  tagbox5.add("Tango")
  tagbox5.add("Techno")
  tagbox5.add("Techno-Industrial")
  tagbox5.add("Terror")
  tagbox5.add("Top 40")
  tagbox5.add("Trailer")
  tagbox5.add("Trance")
  tagbox5.add("Trash Metal")
  tagbox5.add("Tribal")
  tagbox5.add("Trip-Hop")
  tagbox5.add("Vocal")
End

Public Sub SetStyle_early()
  
  Dim TheObject As Object
  Dim ButtonWovr, ButtonHovr, PaddingOvr, NumButtonsCPL, NumButtonsZoom As Integer
  Dim h1, h2, h3 As String
  
  TabOrientation()
  
  If desktop.Height > 600 Then
    Maintoolbar.h = 32
  Else
    Maintoolbar.h = 24
  Endif
  
  'Set font size AND stile OF the whole form; beware the AudioForm!
  
  'fix bottom panel for high sized fonts
  '---------------------------------------------------------------------------
   ButtonWovr = 36 '36
   ButtonHovr = 36 '36
   PaddingOvr = 5 '5
   NumButtonsCPL = 8 '7
   
   theobject = buttonopen
   theobject.x = 0
   Repeat
     Try theobject.w = ButtonWovr
     Try theobject.h = ButtonHovr
     Try theobject.next.x = theobject.x + theobject.w + PaddingOvr
     Try theobject = theobject.next
   Until Error
   
   
   ControlPanel.w = (ButtonWovr + PaddingOvr) * NumButtonsCPL
   ControlPanel.h = ButtonHovr
   SliderBox.h = CInt(ButtonHovr / 1.33)
   ControlPanel.y = SliderBox.y + SliderBox.h
   controlframe.h = SliderBox.h + ControlPanel.h + SliderBox.y '(PaddingOvr*2)
   Statusbar1.h = Statusbar1.Font.TextHeight("[IJ]") + 2

   
  '---------------------------------------------------------------------------
  
  If audioform.AudioPanel.parent = Rightsidepanel Then
    ShowAudioPanel(False)
    SetSubControlsStyles(Fmain)
    For Each TheObject In Audioform.controls
      If theobject Is Label Then
        Try TheObject.font = GeneralOptions.FontChooseBTN2.font
        Try TheObject.Foreground = GeneralOptions.ColorChooseBTN2.Background
      Endif
    Next 'TheForm
    ShowAudioPanel(True)
  Else
    SetSubControlsStyles(Fmain)
    For Each TheObject In Audioform.controls
      If theobject Is Label Then
        Try TheObject.font = GeneralOptions.FontChooseBTN2.font
        Try TheObject.foreground = GeneralOptions.ColorChooseBTN2.Background
      Endif
    Next 'TheForm
  Endif
  
  audioform.Label1.Foreground = &HFFFF00&
  audioform.Label1.Font.Italic = True
  Audioform.Label1.Font.size = Audioform.Label2.Font.size + 4
  fmain.Statusbar1.Foreground = &HF0F0F0&
  fmain.Statusbar1.Background = &000000&
  
  'Then set specific ones:
  OverlayTrayTip.font = GeneralOptions.FontChooseBTN4.font
  OverlayTrayTip.foreground = GeneralOptions.ColorChooseBTN4.Background
  OverlayTrayTip.background = GeneralOptions.backcolorChooseBTN3.Background
  Librarygrid.font = GeneralOptions.FontChooseBTN1.font
  Librarygrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  Librarygrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  Global.Alternatecolor = GeneralOptions.backcolorChooseBTN2.Background
  Playlistgrid.font = GeneralOptions.FontChooseBTN1.font
  dvbtgrid.font = GeneralOptions.FontChooseBTN1.font
  PlaylistGrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  PlayListGrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  dvbtgrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  dvbtgrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  dvbtgrid.Rows.h = dvbtgrid.Font.TextHeight("^_") + global.rowpadding
  CDDAGrid.font = GeneralOptions.FontChooseBTN1.font
  CDDAGrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  CDDAGrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  treeview1.font = GeneralOptions.FontChooseBTN1.font
  treeview1.Foreground = GeneralOptions.ColorChooseBTN1.Background
  treeview1.Background = GeneralOptions.backcolorChooseBTN1.Background
  PropertiesGrid.font = GeneralOptions.FontChooseBTN1.font
  PropertiesGrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  PropertiesGrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  FlashGrid.font = GeneralOptions.FontChooseBTN1.font
  FlashGrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  FlashGrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  GenresTree.font = GeneralOptions.FontChooseBTN1.font
  GenresTree.Foreground = GeneralOptions.ColorChooseBTN1.Background
  GenresTree.Background = GeneralOptions.backcolorChooseBTN1.Background
  ShutResultGrid.font = GeneralOptions.FontChooseBTN1.font
  ShutResultGrid.Foreground = GeneralOptions.ColorChooseBTN1.Background
  ShutResultGrid.Background = GeneralOptions.backcolorChooseBTN1.Background
  PodcastTree.font = GeneralOptions.FontChooseBTN1.font
  PodcastTree.Foreground = GeneralOptions.ColorChooseBTN1.Background
  PodcastTree.Background = GeneralOptions.backcolorChooseBTN1.Background
  SearchField.Font.size = zzzFake.Font.size
  SearchFieldPLS.Font.size = zzzFake.Font.size
  HBox12.background = Color.lighter(Color.Lighter((Hbox12.Parent.background)))
  HBox12.Foreground = Color.black
  Label2.Font.bold = True
  PlayListSelInfo.Foreground = Color.black
  LibrarySelInfo.Foreground = Color.black
  
End

Public Sub SetStyle_later()
  
  SetSubControlsStyles(AddUriForm)
  SetSubControlsStyles(AfiltersCfg)
  SetSubControlsStyles(AllOptions)
  SetSubControlsStyles(AskName)
  SetSubControlsStyles(Chains)
  SetSubControlsStyles(CountDown)
  SetSubControlsStyles(CoverManager)
  SetSubControlsStyles(HotkeyGrab)
  SetSubControlsStyles(HotKeys)
  SetSubControlsStyles(OverLayTip)
  OverlayTip.Textlabel1.Background = GeneralOptions.backcolorChooseBTN3.background
  OverlayTip.Textlabel1.Foreground = GeneralOptions.ColorChooseBTN4.background
  SetSubControlsStyles(SearchFields)
  SetSubControlsStyles(TextDialog)
  SetSubControlsStyles(VfiltersCfg)
  SetSubControlsStyles(XConfigureAudioDriver)
  SetSubControlsStyles(XConfigureVideoDriver)
  
End

Public Sub SetSubControlsStyles(TheForm As Form)
  'descend into controls and set various attributes:
  
  Dim TheObject As Object
  Dim objvalid As Boolean
  If closing Then Return
  
  For Each TheObject In TheForm.controls
    Try objvalid = (theobject.name = "")
    If Not Error Then 
      If Not Lower(TheObject.Name) = "label2" Then
        Try TheObject.font = GeneralOptions.FontChooseBTN3.font
      Endif
      If Not (theobject Is Menu) Then
        If Not ((TheObject.parent Is Frame) Or (theobject.parent.parent Is Frame)) Then
          Try TheObject.foreground = GeneralOptions.ColorChooseBTN3.Background
        Endif
      Endif
      
      If TheObject.name = "CurrentProfileLabel" Then TheObject.font.bold = True
    Endif
  Next 'TheForm
  
End

Public Sub DelayTimer_Timer()
  
  DelayTimer.stop
  AllInit_Post()
  
End

Private fastquit As Boolean = False
Public havetoshowbrowsetab As Boolean = False
Private PlayFromCommandline As Boolean = False
Public Sub MainInit()
  
  Dim quick As Boolean
  Dim AlreadyRunning As Boolean = False
  Dim out As String
  'Dim cachedopts As String
  Dim cachedfile As File
  Dim MySettings As New SettingsClass
  'Disable Shutdown feature at start.
  ShutOff_Click()
  
  MakeProfilePath()
  'TRY TO get a LOCK file:
  Try hLock = Lock global.confpath & "/.lock"
  If Error Then
    AlreadyRunning = True
  Else
    'as there are no other istances, it's good to remove inputpipes
    Shell "rm " & global.confpath & "/.InputPipes/Xt7Input-* >/dev/null 2>&1" Wait ' To out
    Shell "rm " & global.confpath & "/.ExportFiles/* >/dev/null 2>&1" Wait ' To out
  Endif
     If global.currentprofile = "" Then
      global.CurrentProfile = MySettings.GetLastProfile(global.confpath)
     Endif
     If Exist(global.confpath & "/" & global.currentprofile & ".profile.cache") Then
        cachedfile = Open (global.confpath & "/" & global.currentprofile & ".profile.cache") For Input
        Line Input #cachedfile, cachedopts
        Close #cachedfile
        cachedopts = Trim(cachedopts)
        Debug cachedopts
        quick = True '(say to play() to skip getoptionsfromgui)
          Else
        Debug "Error: last profile cache file does not exists anymore, using default mplayer values"
        Debug "To recreate the cache file, simply reload the profile"
     Endif

  If Application.Args.count >= 2 Then
    If alreadyrunning Then
      'try to play the file to the running xt7-player:
      zzzfake.sock_play(Application.Args[1])
      Fastquit = True
      fmain.form_Close()
    Else
      AllInit_pre()
      mplayer.Media_FullPath = DConv(Application.Args[1])
      FirstPlay = True 'used to  avoid playing media at start when togglepls button is toggled
      Me.mouse = mouse.Wait
      FMain.LoadFormGeometry()
      fmain.Show
      Wait 
      PlayFromCommandline = True 
      Play(False, DConv(Application.Args[1]), quick, cachedopts)
      Me.Mouse = mouse.Default
      havetoshowbrowsetab = True
    Endif
  Endif
  If Application.Args.count = 1 Then 
    AllInit_pre()
    FMain.LoadFormGeometry()
    fmain.Show
  Endif
  
  DelayTimer.delay = 1000
  DelayTimer.Start
  
  If (Application.Args.count = 1) Or ((Application.Args.count > 1) And (Not alreadyrunning)) Then
    'FMain.LoadFormGeometry()
    fmain.Show
    Debug "Timer = " & Timer
  Endif
  LeftSideTabs_Click()
  
End


Public Sub SyncCachedOpts()
    If (Not global.initearlyformsdone) Then InitEarlyForms()
    cachedopts = GetOptionsFromGui()
    Debug "CACHED OPTIONS ARE: " & cachedopts
    cachedopts = cachedopts & " " & mplayer.AoAdditionalopts & " " & mplayer.AoDriver & " "
    cachedopts = cachedopts & " " & mplayer.VoDriver & " " & mplayer.VoAdditionalopts & " " & mplayer.AoAdditionalopts
    cachedopts = cachedopts & " " & mplayer.AVcodecs
End


Public Sub ShowBrowseTabTo(fullpath As String)
  Dim path As String
  Dim tabid As Integer
  If global.IsNetworkURI(fullpath) Then Return
  Try path = file.Dir(fullpath)
  If Error Then 
    Debug "error, please report"
    Return
  Endif
  Try tabID = Global.TabIndexByName("browse", Leftsidetabs)
  If Error Then 
    Debug "error, please report"
    Return
  Endif
  Try UrlBox.text = path
  Try FileView1.dir = path
  FileView1.ShowDetailed = True
 
  Leftsidetabs.Index = Tabid
  Wait 0.001
  FileView1.Current = file.name(fullpath)
   FileView1.refresh
  'FileView1.Current = "fiorano.flv"
  Wait 0.001
End


Public Sub InitPropertiesGrid()
  
  Dim i As Integer
  PropertiesGrid.Columns.count = 2
  PropertiesGrid.Rows.count = 20
  PropertiesGrid[0, 0].text = "FileName"
  PropertiesGrid[1, 0].text = "Path"
  PropertiesGrid[2, 0].text = "FileSize"
  PropertiesGrid[3, 0].text = "Length"
  PropertiesGrid[4, 0].text = "Type"
  PropertiesGrid[5, 0].text = "Album"
  PropertiesGrid[6, 0].text = "Artist"
  PropertiesGrid[7, 0].text = "Title"
  PropertiesGrid[8, 0].text = "Year"
  PropertiesGrid[9, 0].text = "Genre"
  PropertiesGrid[10, 0].text = "Track No."
  PropertiesGrid[11, 0].text = "Comment"
  PropertiesGrid[12, 0].text = "Audio Channels"
  PropertiesGrid[13, 0].text = "Audio Rate"
  PropertiesGrid[14, 0].text = "Audio Codec"
  PropertiesGrid[15, 0].text = "Audio Bitrate"
  PropertiesGrid[16, 0].text = "Video Resolution"
  PropertiesGrid[17, 0].text = "Video Fps"
  PropertiesGrid[18, 0].text = "Video Codec"
  PropertiesGrid[19, 0].text = "Video Bitrate"

  For i = 0 To PropertiesGrid.Rows.count - 1
    PropertiesGrid[i, 0].Font.bold = True
  Next 'i

  PropertiesGrid.Columns[0].Width = "-1"      'Autosize Columns

End

Private Function OneOf(one As String, two As String) As String
  
  If one <> "" Then
    Return one
  Else
    Return two
  Endif
  
End

Public Sub FillPropertiesGrid()
  
  Dim i As Integer
  Dim tl As New Taglib
  'First Clear Them
  For i = 0 To PropertiesGrid.Rows.count - 1
    PropertiesGrid[i, 1].Text = ""
  Next 'i
  
  PropertiesGrid[0, 1].text = mplayer.Media_FullPath
  PropertiesGrid[1, 1].text = File.Name(mplayer.Media_FullPath)
  PropertiesGrid[2, 1].text = mplayer.Media_Size
  PropertiesGrid[3, 1].text = mplayer.FormatTime(mplayer.Media_Length)
  PropertiesGrid[4, 1].text = mplayer.Media_Type
  
  PropertiesGrid[12, 1].text = mplayer.Media_Channels
  PropertiesGrid[13, 1].text = mplayer.Media_AudioRate
  PropertiesGrid[14, 1].text = mplayer.Media_AudioCodec
  PropertiesGrid[15, 1].text = mplayer.Media_AudioBitrate
  
  If Not mplayer.Media_AudioOnly() Then
    PropertiesGrid[16, 1].text = mplayer.Media_Width & "x" & mplayer.Media_Height
    PropertiesGrid[17, 1].text = mplayer.Media_VideoFps
    PropertiesGrid[18, 1].text = mplayer.Media_VideoCodec
    PropertiesGrid[19, 1].text = mplayer.Media_VideoBitrate
  Else
    If Upper(mplayer.Media_FullPath) Like "*.FLAC" Then 'mplayer bug with flac files,use audiotag instead
      If tl.Init(mplayer.Media_FullPath) Then
        PropertiesGrid[5, 1].text = tl.Album
        PropertiesGrid[6, 1].text = tl.Artist
        PropertiesGrid[7, 1].text = tl.Title
        PropertiesGrid[8, 1].text = tl.MyYear
        PropertiesGrid[9, 1].text = tl.Genre
        PropertiesGrid[10, 1].text = tl.Track
        PropertiesGrid[11, 1].text = tl.Comment
        tl.tlFree()
      Endif
    Else
      PropertiesGrid[5, 1].text = mplayer.Media_Album
      PropertiesGrid[6, 1].text = OneOf(mplayer.Media_Artist, mplayer.Media_Author)
      PropertiesGrid[7, 1].text = OneOf(mplayer.Media_Title, mplayer.Media_Name)
      PropertiesGrid[8, 1].text = OneOf(mplayer.Media_Year, mplayer.Media_CreationDate)
      PropertiesGrid[9, 1].text = mplayer.media_genre
      PropertiesGrid[10, 1].text = mplayer.Media_TrackNo
      PropertiesGrid[11, 1].text = OneOf(mplayer.Media_Comment, mplayer.Media_Comments)
    Endif
  Endif
  
  PropertiesGrid.Columns[1].Width = "-1"      'Autosize Columns
  
  'init pretty panel too
  If GeneralOptions.CoverCHK2.value Then
    audioform.label12.text = PropertiesGrid[6, 1].text
    audioform.label13.text = PropertiesGrid[5, 1].text
    audioform.label14.text = PropertiesGrid[8, 1].text
    audioform.label15.text = PropertiesGrid[7, 1].text
    audioform.label16.text = PropertiesGrid[11, 1].text
    audioform.label18.text = PropertiesGrid[1, 1].text
    audioform.label19.text = PropertiesGrid[3, 1].text
    audioform.label20.text = PropertiesGrid[2, 1].text
    audioform.RadioLabel.text = ""

    If (Trim(PropertiesGrid[14, 1].text) <> "") Then audioform.label21.text = PropertiesGrid[14, 1].Text
    If (Trim(PropertiesGrid[15, 1].text) <> "") Then audioform.label21.text = audioform.label21.text & "@" & PropertiesGrid[15, 1].text & "bps"
    If (Trim(PropertiesGrid[12, 1].text) <> "") Then audioform.label21.text = audioform.label21.text & ", " & PropertiesGrid[12, 1].text & (" channels")
    If (Trim(PropertiesGrid[13, 1].text) <> "") Then audioform.label21.text = audioform.label21.text & "@" & PropertiesGrid[13, 1].text & "Hz"
  Endif

  If (global.IsAudioFile(mplayer.Media_FullPath)) Or (global.IsNetworkURI(mplayer.Media_FullPath)) Then
    AutoresizeAudioForm()
  Endif
  
End

Public Sub SyncCachedOptsPlus()
  'reload the current profile and save cached options
  global.ReallyLoadAllSettings()
  SyncCachedOpts()
  global.SaveCachedOpts(global.currentprofile, cachedopts)
End

Public Sub Form_Close()
  
  Dim i As Integer
  Dim MySettings As New SettingsClass


  Try Unlock hLock
  Repeat
    FMain.Mysocket.Close
  Until FMain.Mysocket.status = Net.inactive
  Debug "closed socket"

  Try HotKeys.xbindkeys.kill

  ChooseAspect.visible = False
  'it is needed for lockfile and local socket to be correctly freed:
  Try trayicon1.Delete
  Closing = True

  If Not fastquit Then
    fmain.SaveFormGeometry()
    Me.hide
    If mplayer.ProcessRunningOvr() Then
      If Not (global.IsNetworkURI(mplayer.Media_FullPath_Playing)) Then
        AddHistory(mplayer.Media_FullPath_Playing, mplayer.CurrentTime())
      Endif
    Endif
    ButtonStop_Click() 'don't remove me.
  Endif

  Try AFiltersCfg.hide
  Try AddUriForm.hide
  Try AllOptions.hide
  Try AskName.hide
  Try AudioEqualizer.hide
  Try AudioForm.hide
  Try AudioVideoCodecs.hide
  Try Chains.hide
  Try ChooseAspect.hide
  Try CountDown.hide
  Try CoverManager.hide
  Try DVBTuner.hide
  Try FMain.hide
  Try GeneralOptions.hide
  Try HotKeyGrab.hide
  Try HotKeys.hide
  Try LogWindow.hide
  Try MyAskName.hide
  Try MyQuestion.hide
  Try OverlayTip.hide
  Try OverlayTrayTip.hide
  Try ProfileManager.hide
  Try Searchfields.hide
  Try ServiceForm.hide
  Try SubAndOsd.hide
  Try TextDialog.hide
  Try TranslationNeeded.hide
  Try VFiltersCfg.hide
  Try VideoEqualizer.hide
  Try XConfigureAudioDriver.hide
  Try XConfigureVideoDriver.hide
  Try Xt7Egg.hide
  Try zzzFake.hide
  Try realtimeform.hide
  Debug "hidden all forms"

  If ChooseAspect.visible Then ChooseAspect.CancelBtn_Click

  'delete temporary covers on exit:
  Try Shell "rm -R " & global.confpath & "/covertmp/* >/dev/null 2>&1" Wait
  'delete temporary screenshots on exit (if any)
  Try Shell "rm -R " & global.confpath & "/.xt7-screenshots/* >/dev/null 2>&1" Wait

  If (Me.FullScreen = True) Then FullScreenSwitch()
  OneSecTimer.Stop
  If mplayer.ProcessRunningOvr() Then
    mplayer.do_stop()
    ExecutePostCmd()
  Endif
  Debug "post command executed"

  MyLibrary.MplayerTag.do_stop()
  MyPlaylist.MplayerTag.do_stop()
  Debug "mplayer stopped"

  Try HotKeys.xbindkeys.kill
  Print "xbindkeys killed"

  If Not fastquit Then
    If GeneralOptions.SaveOnExitCHK.value = True Then
      Try Global.SaveAllSettings(global.CurrentProfile)
      If Error Then 
        Debug "couldn't save all settings at exit as requested..."
          Else
        Print "All settings saved"
      Endif
    Else
      MySettings.Save(Fmain, global.confpath & "/" & global.CurrentProfile)
      MySettings.Save(SearchFields, global.confpath & "/" & global.CurrentProfile)
      GeneralOptions.SaveWatchDir(global.confpath & "/" & global.CurrentProfile)
      GeneralOptions.SaveExcludeDir(global.confpath & "/" & global.CurrentProfile)
      ComboHistory.AddHistory(Searchfield, Searchfield.text)
      ComboHistory.AddHistory(SearchfieldPLS, SearchfieldPLS.text)
      ComboHistory.AddHistory(youSearchfield, youSearchfield.text)
      ComboHistory.AddHistory(SearchFieldDVB, SearchFieldDVB.text)
      ComboHistory.addhistory(Fmain.Urlbox, Fmain.Urlbox.text)
      ComboHistory.SaveHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
      ComboHistory.SaveHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
      ComboHistory.SaveHistory(Searchfielddvb, global.confpath & "/" & global.CurrentProfile)
      ComboHistory.SaveHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
      ComboHistory.SaveHistory(Fmain.Urlbox, global.confpath & "/" & global.CurrentProfile)
      'library and playlist are profile indipendant
      MyLibrary.Save(LibraryGrid, global.confpath)
      MyPlaylist.Save(PlaylistGrid, global.confpath)
      MyDVBTList.Save(Fmain.dvbtgrid, global.confpath)
      Try mypodcast.SavePods(global.confpath & "/mypods.txt", PodcastTree)

      SyncCachedOptsPlus() 'sync current profile to the cached one by reloading the current profile and resave it

      Print "Mandatory settings saved"
    Endif
  Endif

  If Not fastquit Then
    MySettings.WriteLastProfile(Global.confpath, global.CurrentProfile)
    Debug "wrote last profile"
  Endif



  'kill all recordings processes
  Try MyFlash.StopAllRecordings()

  'this allow to close the Fake form.
  'Try Application.MainWindow.Close 'crashes!
  fmain.close
  zzzFake.Close

  Try AFiltersCfg.close
  Try AddUriForm.close
  Try AllOptions.close
  Try AskName.close
  Try AudioEqualizer.close
  Try AudioForm.close
  Try AudioVideoCodecs.close
  Try Chains.close
  Try ChooseAspect.close
  Try CountDown.close
  Try CoverManager.close
  Try DVBTuner.close
  Try FMain.close
  Try GeneralOptions.close
  Try HotKeyGrab.close
  Try HotKeys.close
  Try LogWindow.close
  Try MyAskName.close
  Try MyQuestion.close
  Try OverlayTip.close
  Try OverlayTrayTip.close
  Try ProfileManager.close
  Try Searchfields.close
  Try ServiceForm.close
  Try SubAndOsd.close
  Try TextDialog.close
  Try TranslationNeeded.close
  Try VFiltersCfg.close
  Try VideoEqualizer.close
  Try XConfigureAudioDriver.close
  Try XConfigureVideoDriver.close
  Try Xt7Egg.close
  Try realtimeform.close
  Try DBus.Session.Unregister(DbusProperties)
  
  Print "Bye"
  
End

Public Sub CorrectAreaAspect()
  'this sets the draweing area of the form to the aspect of the video
  
  Dim VideoW As Integer = 4
  Dim VideoH As Integer = 3
  Dim CenterX, CenterY As Integer
  Dim Aspect As Float = 1.333
  Dim TmpX, TmpY, TmpW, TmpH As Integer
  
  Try VideoW = mplayer.VideoOut_Width
  Try VideoH = mplayer.VideoOut_Height
  If (VideoW > 0) And (VideoH > 0) Then
    If ForcedAspectRT = "default" Then
      Aspect = VideoW / VideoH
    Else
      Aspect = CFloat(ForcedAspectRT)
    Endif
    
    'Drawing area must fit in the outerbox, so try to set the width and calculate the Height:
    TmpW = OuterBox.Width '* ResizeFactor
    TmpH = OuterBox.Width / Aspect '* ResizeFactor
    
    'Disable caching for high pan-scan as it slows down
    If ((TmpW > OuterBox.Width) Or (TmpH > OuterBox.Height)) Then
      TmpH = (OuterBox.Height) '* ResizeFactor
      TmpW = (OuterBox.Height * Aspect) '* ResizeFactor
    Endif

    'apply the zoom factor:
    TmpW = TmpW * resizefactor
    TmpH = TmpH * resizefactor

    'finally, resize and center VideoBox in Outerbox 
    TmpX = (OuterBox.Width / 2) - (TmpW / 2)
    TmpY = (OuterBox.Height / 2) - (TmpH / 2)
    If (tmpw > 64) Then VideoBox.Move(TmpX, TmpY, TmpW, TmpH) 'don't touch (tmpw>64) or else heavy swap will occour!
  Endif

End

Public Sub Old_SaveFormGeometry()
  'due to different window managers behaviour,
  'save and reload the form geometry to caculate the offest
  'then save again the geometry with offset correction.
  
  Dim prevscreenx As Integer = fmain.screenx
  Dim prevscreeny As Integer = fmain.screeny
  Dim offsetx, offsety As Integer
  
  SubSaveFormGeometry(0, 0)
  fmain.Hide
  fmain.refresh
  Wait 0.05
  LoadFormGeometry()
  fmain.minimized = True
  fmain.show
  fmain.refresh
  Wait 0.05
  offsetx = prevscreenx - fmain.screenx
  offsety = prevscreeny - fmain.screeny
  SubSaveFormGeometry(offsetx * 2, offsety * 2)
  
End

Public Sub SaveFormGeometry()
  
  Dim PrevScreenX As Integer = fmain.screenx
  Dim PrevScreeny As Integer = fmain.screeny
  Dim deltax As Integer
  Dim deltay As Integer
  
  If (GeneralOptions.SaveGeometryCHK.value = True) Then
    If (GeneralOptions.SaveGeometryCompizCHK.value = True) Then
      fmain.Move(fmain.screenx, fmain.screeny)
      fmain.refresh
      Wait 0.03
      deltax = (fmain.screenx - prevscreenx) * 2
      deltay = (fmain.screeny - prevscreeny) * 2
      SubSaveFormGeometry(- deltax, - deltay)
    Else
      SubSaveFormGeometry(fmain.x - fmain.screenx, fmain.y - fmain.screeny)
    Endif
  Endif
  
End

Public Sub SubSaveFormGeometry(offsetx As Integer, offsety As Integer)
  
  Dim myfile As File
  Dim myfilename As String = global.confpath & "/" & "fmain.geometry"

  myfile = Open myfilename For Write Create
  Print #myfile, CStr(fmain.screenx + offsetx) & ";" & CStr(fmain.screeny + offsety) & ";" & fmain.w & ";" & fmain.h & ";" & fmain.Maximized
  Close #myfile
  
End

Public Sub LoadFormGeometry()
  
  Dim myfile As File
  Dim myfilename As String = global.confpath & "/" & "fmain.geometry"
  Dim geometry As String
  Dim rx, ry, rw, rh As Integer
  
  If Exist(myfilename) Then
    myfile = Open myfilename For Read
    Try Line Input #myfile, geometry
    If Not Error Then
      Try rx = Split(geometry, ";", "", True)[0]
      Try ry = Split(geometry, ";", "", True)[1]
      Try rw = Split(geometry, ";", "", True)[2]
      Try rh = Split(geometry, ";", "", True)[3]
      Try fmain.maximized = Split(geometry, ";", "", True)[4]
      fmain.Move(rx, ry, rw, rh)
    Endif
    Close #myfile
  Endif
  fmain.refresh

End

Private Sub CostrainFormSizes()
  'Constrain form sizes
  
  SliderBox.left = ControlFrame.left + 16
  SliderBox.width = ControlFrame.Width - 32
  MainToolbar.width = FMain.clientw - 16
  BottomVbox.h = controlframe.h + Statusbar1.h + cachebar.h 
  ControlPanel.left = (ControlFrame.width / 2) - (ControlPanel.width / 2)
End

Public Sub Form_Resize()
  
  If mplayer.ProcessRunningOvr() Then UpdateStatusBar()
  If Not FMain.fullscreen Then
    Global.CheckResolution(Me)
  Endif

  CostrainFormSizes()
  CorrectAreaAspect()
  
End

Public Sub ButtonOpen_Click()
  
  If Not fullyloaded Then Return
  With Global
    Dialog.Path = .StartFolder
    Dialog.filter = [.videofilter, .videofiltername, .audiofilter, .audiofiltername]
  End With
  If Dialog.OpenFile() Then Return
  mplayer.Media_FullPath = DConv(Dialog.Path)
  TogglePls.value = False
  Play(False)
  
End

Private prevmpoutput As String = "__________"
Private repeatedmpoutlines As Integer = 0

Public Sub mplayeroutputavailable(outline As String)
  
  If (Trim(outline) <> "") Then
    If mplayer.gotheaders Then
      If Not (outline Like "*A:*") Then
        If Not (outline Like "*V:*") Then
          LogWindow.LogArea.pos = Len(LogWindow.LogArea.text) 'go to the end

          If Trim(outline) = prevmpoutput Then          'we get a dupe message,
            Try repeatedmpoutlines = repeatedmpoutlines + 1
          Else
            repeatedmpoutlines = 0
          Endif
          If repeatedmpoutlines > 30 Then
            If (repeatedmpoutlines Mod 5) = 0 Then
              LogWindow.LogArea.Insert("R ") 'write "."
              LogWindow.Label2.visible = True
            Endif
          Else
            'put something on the log, but skip program_id lines (from dvb-t)
            If Not (outline Like "*PROGRAM_ID=*") Then LogWindow.LogArea.Insert(outline & "\n")
            prevmpoutput = Trim(outline)
          Endif
        Endif
      Endif
    Endif
  Endif
  
End



'In network streams, if the cache size is higher than the stream size,it happens:
'Server returns 416: Requested range not satisfiable
'and then a lot of nop_streaming_read error.
'manage it:
Private TooMuchCache As Boolean = False

Public Sub mplayererroravailable(outline As String)
  If (Trim(outline) <> "") Then
          If outline Like "*erver returns*416*range*" Then
            Toomuchcache = True
            Return
          Endif
          If mplayer.Media_FullPath Like "http*youtube*" Then
            If outline Like "*nop_streaming_read error*Bad file descriptor*" Then
              If Not TooMuchCache Then
                Debug "problem seeking on " & mplayer.Media_FullPath
                Debug "mplayer.currenttime is " & mplayer.CurrentTime()
                Debug "restarting mplayer"
                mplayer.do_restart(mplayer.Media_FullPath, mplayer.CurrentOptions)
              Endif
            Endif
          Endif
          LogWindow.errorArea.pos = Len(LogWindow.errorArea.text) 'go to the end

          If Trim(outline) = prevmpoutput Then          'we get a dupe message,
            Try repeatedmpoutlines = repeatedmpoutlines + 1
          Else
            repeatedmpoutlines = 0
          Endif
          If repeatedmpoutlines > 30 Then
            If (repeatedmpoutlines Mod 5) = 0 Then
              LogWindow.errorArea.Insert("R ") 'write "."
              LogWindow.Label2.visible = True
            Endif
          Else
            'put something on the log, but skip program_id lines (from dvb-t)
            If Not (outline Like "*PROGRAM_ID=*") Then LogWindow.errorArea.Insert(outline & "\n")
            prevmpoutput = Trim(outline)
          Endif
        Endif
End



Public Sub ButtonStop_Click()
  
  Try LibraryGrid.Columns[0].Refresh
  UserStopped = True
  mplayer.do_stop
  VideoBox.Refresh
  ShowAudioPanel(False)
  OneSecTimer_Timer()
  OneSecTimer.stop
  'TogglePls.Value = FALSE
  'If (Not global.initearlyformsdone) Then global.DelayLoadStates_Timer
  aspectmenu.visible = False
  videobox.clear
  
End

Public Sub Buttonfwd_Click()
  
  mplayer.do_ffwd
  
End

Public Sub ButtonRew_Click()
  
  mplayer.do_slow
  
End

Public Function GetOptionsFromGui() As String
  
  Dim GotOptions As String = ""
  
  mplayer.VoDriver = XConfigureVideoDriver.ParsedVideoDriver()
  mplayer.AoDriver = XConfigureAudioDriver.ParsedAudioDriver()
  mplayer.AVcodecs = AudioVideoCodecs.Parse()
  'Get subtitle and aiudio language:
  mplayer.AudioLanguages = "\"" & GeneralOptions.AudioLangList.text & "\""
  mplayer.SubLanguages = "\"" & GeneralOptions.SubLangList.text & "\""
  If mplayer.AudioLanguages <> ("\"" & "\"") Then GotOptions = GotOptions & " -alang " & mplayer.audiolanguages & " "
  If mplayer.SubLanguages <> ("\"" & "\"") Then GotOptions = GotOptions & " -slang " & mplayer.sublanguages & " "
  GotOptions = GotOptions & Chains.ParsedChain("VIDEO")
  GotOptions = GotOptions & Chains.ParsedChain("AUDIO")
  Try GotOptions = GotOptions & SubAndOsd.ParseSubGui(False)
  If Error Then
    SubAndOsd.Init()
    GotOptions = GotOptions & SubAndOsd.ParseSubGui(False)
    Debug "Exception, doing SubAndOsd.Init() now..."
  Endif
  GotOptions = GotOptions & GeneralOptions.Parse((mplayer.media_fullpath Like "dvd://*") Or (mplayer.media_fullpath Like "dvdnav://*"))
  If mplayer.Media_FullPath Like "dvd://*" Or mplayer.Media_FullPath Like "dvdnav://*" Then
    GotOptions = GotOptions & "-dvd-device " & "\"" & dvd_device & "\" "
  Endif
  GotOptions = GotOptions & "-cdrom-device " & "\"" & GeneralOptions.CDDADeviceText.text & "\" "
  GotOptions = PreMpOptions & GotOptions & PostMpOptions
  If GeneralOptions.EqCHK.value Then
    PostVfilters = " -vf-add eq2,hue,screenshot,scale"
  Else
    PostVfilters = " -vf-add screenshot,scale"
  Endif
  GotOptions = GotOptions & postvfilters
  
  Return GotOptions
  'Debug "Cachedoptions= " & Cachedoptions
End

Public Sub ButtonPlay_Click()
  
  Dim FromMyLibrary As Boolean = (mplayer.Media_FullPath = "") 'pick a MyLibraryitem if no media was loaded

  If mplayer.ProcessRunningOvr() Then
    If mplayer.Paused Then
      OneSecTimer.start
      ButtonPlay.picture = Picture["media-playback-pause.png"]
    Else
      'OneSecTimer.stop
      ButtonPlay.picture = Picture["media-playback-start.png"]
    Endif
    mplayer.do_pause
  Else
    Play(FromMyLibrary)
  Endif
  VideoBox.setfocus
  
End

Public Sub ClearStreamsMenu()

  Dim child As Menu

  Repeat
    'clear all previous sub-menus
    For Each child In Streamsaudiomenu.Children
      child.delete
    Next 'child
    For Each child In Streamssubtitlesmenu.Children
      child.delete
    Next 'child
  Until (Streamsaudiomenu.Children.count = 0) And (Streamssubtitlesmenu.Children.count = 0)
  
End

Public Sub ClearChaptersAndTitlesMenu()
  
  Dim child As Menu
  
  Repeat
    'clear all previous sub-menus
    For Each child In MenuTitles.Children
      child.delete
    Next 'child
  Until (Menutitles.Children.count = 0) 'AND (Streamssubtitlesmenu.Children.count = 0)
  
End

Public Function FillStreamsMenu()
  
  Dim i As Integer
  Dim AudioMenu, SubMenu As Menu
  'read audiotracks and subtitletracks from mplayer class
  'and compile streams menu accordingly
  Streamsmenu.Enabled = ((mplayer.audiotracks.count > 0) Or (mplayer.subtitletracks.count > 0))
  If Streamsmenu.enabled Then
    Streamsaudiomenu.Enabled = (mplayer.audiotracks.count > 0)
    Streamssubtitlesmenu.Enabled = (mplayer.subtitletracks.count > 0)
  Endif
  ClearStreamsMenu()
  
  'fill audio streams menu
  If Streamsaudiomenu.enabled Then
    For i = 0 To mplayer.audiotracks.count - 1
      AudioMenu = New Menu(Streamsaudiomenu) As "Menuswitchaudio"
      AudioMenu.name = "AudioMenuID" & i
      AudioMenu.caption = mplayer.audiotracks[i]
    Next 'i
  Endif
  'fill sub streams menu
  If Streamssubtitlesmenu.enabled Then
    'add a menu item to disable subtitles:
    SubMenu = New Menu(Streamssubtitlesmenu) As "Menuswitchsub"
    SubMenu.name = "DisableSubs"
    SubMenu.caption = ("Don't display subtitles")
    For i = 0 To mplayer.subtitletracks.count - 1
      SubMenu = New Menu(Streamssubtitlesmenu) As "Menuswitchsub"
      SubMenu.name = "SubMenuID" & i
      SubMenu.caption = mplayer.subtitletracks[i]
    Next 'i
  Endif
  
End

Public Function FillTitlesAndChaptersMenu() As Boolean
  
  Dim NewDvdID As String = "@@@@"
  Dim SubMenu, SubSubMenu As Menu
  Dim title, chapter, NumTitles, CurrentTitle, NumChapters, angle, numangles As Integer
  Dim Length As Float
  Dim Slength, ChaptersArray, TKey, CKey, Akey As String
  'clear previous menus
  
  ClearChaptersAndTitlesMenu()
  
  'Find important data
  Try NumTitles = mplayer.FindTagValue("ID_DVD_TITLES")
  If Error Then Return False
  Try CurrentTitle = mplayer.FindTagValue("ID_DVD_CURRENT_TITLE")
  If Error Then Return False
  Menutitles.Enabled = (Numtitles > 1)
  'Fill menu
  If Menutitles.enabled Then
    For title = 1 To numtitles
      SubMenu = New Menu(Menutitles) As "MenuswitchTitle"
      SubMenu.name = "SubMenuTitle_" & Title
      Try Length = mplayer.FindTagValue("ID_DVD_TITLE_" & title & "_LENGTH")
      If Error Then Return False
      SLength = mplayer.FormatTime(CInt(length))
      SubMenu.caption = title & " : " & SLength
    Next 'title
  Endif
  'Select the playing title and make another submenu with chapters
  Try title = mplayer.FindTagValue("ID_DVD_CURRENT_TITLE")
  If Error Then Return False
  For Each submenu In Menutitles.Children
    If submenu.name = "SubMenuTitle_" & Title Then
      submenu.checked = True
      Try Numchapters = mplayer.FindTagValue("ID_CHAPTERS")
      If Error Then Return False
      Try ChaptersArray = Trim(mplayer.FindTagValue("CHAPTERS:"))
      If Error Then Return False
      'Make a little caption "Chapter" in the subsubMenu
      SubSubMenu = New Menu(SubMenu) As "JustAMenuCaption"
      SubSubMenu.name = "SubMenuChapterCaption"
      SubSubMenu.caption = ("Chapters:")
      'Draws a separator
      SubSubMenu = New Menu(SubMenu) As "JustAMenuSeparator"
      SubSubMenu.name = "SubMenuChapterSeparator"
      SubSubMenu.caption = ("")
      If numchapters > 1 Then
        For chapter = 1 To Numchapters
          SubSubMenu = New Menu(SubMenu) As "MenuSwitchChapter"
          SubSubMenu.name = "SubMenuChapter_" & chapter
          SubSubMenu.caption = Chapter & " - " & ("at") & " " & Split(ChaptersArray, ",", "", True)[chapter - 1]
        Next 'chapter
      Endif
    Else
      submenu.checked = False
    Endif
  Next
  
  'Fill the dvd tree tab, but only if dvd has changed
  NewDvdID = mplayer.FindTagValue("ID_DVD_DISC_ID")
  If NewDvdID <> LastDvdId Then 'dont fill dvd structure if dvd is unchanged
    
    treeview1.Clear
    For title = 1 To numtitles
      TKey = "Title" & title
      treeview1.Add(TKey, ("Title") & " " & title, picture["icon:/16/directory"])
      numchapters = 0
      Try numchapters = mplayer.FindTagValue("ID_DVD_TITLE_" & title & "_CHAPTERS")
      If numchapters > 1 Then
        treeview1.Add(Tkey & "_Chapters", ("Chapters"), picture["icon:/16/watch"], Tkey)
        For chapter = 1 To numchapters
          CKey = "Chapter" & chapter
          treeview1.Add(TKey & "_" & CKey, ("Chapter") & " " & Chapter, picture["icon:/16/play"], TKey & "_Chapters")
        Next 'chapter
      Endif
      numangles = 0
      Try numangles = mplayer.FindTagValue("ID_DVD_TITLE_" & title & "_ANGLES")
      If numangles > 1 Then
        treeview1.Add(TKey & "_Angles", ("Angles"), picture["icon:/16/directory"], TKey)
        For angle = 1 To numangles
          AKey = "Angle" & Angle
          treeview1.Add(TKey & "_" & Akey, ("Angle") & " " & Angle, picture["icon:/16/play"], TKey & "_Angles")
        Next 'angle
      Endif
    Next 'title
  Endif
  LastDvdId = NewDvdID
  Return True
  
End

Public Sub TreeView1_Activate()
  
  Dim CurTitle, NextTitle, CurChapter, NextChapter, CurAngle, NextAngle As Integer
  Dim MyKey, tmp As String
  
  tmp = ""
  
  CurTitle = 0
  NextTitle = 0
  'CurChapter = 0 non calcolabile
  NextChapter = 0
  'CurAngle = 0 non calcolabile
  NextAngle = 0
  
  MyKey = treeview1.Item.key
  
  Try CurTitle = mplayer.FindTagValue("ID_DVD_CURRENT_TITLE")
  'find next title:
  NextTitle = Replace(Split(mykey, "_", "", True)[0], "Title", "")
  If Not (mykey Like "*Chapters*") Then
    If mykey Like "*Chapter*" Then NextChapter = Replace(Split(mykey, "_", "", True)[1], "Chapter", "")
  Endif
  If Not (mykey Like "*Angles*") Then
    If mykey Like "*Angle*" Then NextAngle = Replace(Split(mykey, "_", "", True)[1], "Angle", "")
  Endif
  
  Debug "CurTitle= " & Curtitle
  Debug "NextTitle= " & NextTitle
  Debug "NextChapter= " & NextChapter
  Debug "NextAngle= " & NextAngle
  
  'SWITCH_ANGLE (di slave mode) non funziona come dovrebbe, (bug mplayer)quindi al cambio di angolo, 
  'occorre riavviare il player.
  
  If NextAngle <> 0 Then tmp = " -dvdangle " & NextAngle
  If NextChapter <> 0 Then tmp = tmp & " -chapter " & nextchapter
  
  If mplayer.ProcessRunningOvr() Then
    If (CurTitle <> NextTitle) Then
      Play(False, "dvd://" & NextTitle, True, tmp)
      fmain.VideoBox.setfocus
    Else 'il titolo non varia
      If NextAngle <> 0 Then
        mplayer.do_restart(mplayer.Media_FullPath, mplayer.CurrentOptions & tmp)
        fmain.VideoBox.setfocus
      Else If NextChapter <> 0 Then
        mplayer.Send("seek_chapter " & NextChapter & " 1")
      Endif
    Endif
  Else 'not processrunningovr
    Play(False, "dvd://" & NextTitle, True, tmp)
    fmain.VideoBox.setfocus
  Endif
  
End

Public Sub TreeView1_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    TreeView1_Activate()
  Endif
  
End

Public Sub MenuswitchTitle_click()
  
  Dim TitleToPlay As Integer
  
  Try TitleToPlay = Split(Last.caption, " ")[0]
  If Not Error Then
    If mplayer.do_stop() Then
      Play(False, "dvd://" & TitleToPlay)
    Endif
  Endif
  
End

Public Sub MenuswitchChapter_click()
  
  Dim ChapterToPlay As Integer
  Dim Title, chapter As Menu
  
  Try ChaptertoPlay = Split(Last.caption, " ")[0]
  'clear any checked chapter:
  For Each title In Menutitles.children
    If (title.Children.count > 0) Then
      For Each chapter In title.Children
        chapter.Checked = False
      Next 'chapter
    Endif
  Next 'title
  
  'Check the selected chapter
  Last.checked = True
  If Not Error Then
    mplayer.Send("seek_chapter " & ChapterToPlay & " 1")
  Endif
  
End

Public Sub Menuswitchaudio_click()
  
  Dim brother As Menu
  Dim ID As Integer
  
  For Each brother In Streamsaudiomenu.Children
    brother.checked = False
  Next
  Last.checked = True
  Try ID = Split(Last.caption, " ")[0]
  mplayer.Send("switch_audio " & ID)
  
End

Public Sub PowerffBTN_click()
  
  Shutdownmenu.Popup
  
End

Public Sub Menuswitchsub_click()
  
  Dim brother As Menu
  Dim ID As Integer
  
  For Each brother In Streamssubtitlesmenu.Children
    brother.checked = False
  Next
  Last.checked = True
  If Last.caption = ("Don't display subtitles") Then
    mplayer.Send("sub_select -1")
  Else
    Try ID = Split(Last.caption, " ")[0]
    mplayer.Send("sub_select " & ID)
  Endif
  
End

Public Function LargestDvdTitle() As Integer
  'Analyze mediaheaders and find the largest DVD title
  
  Dim i, ID, maxid As Integer
  Dim compare, mymax As Float
  
  MyMax = 0
  MaxId = 0
  ID = 1
  For i = 1 To mplayer.MediaHeaders.count - 1
    If mplayer.MediaHeaders[i] Like "*ID_DVD_TITLE_*_LENGTH=*" Then
      compare = Split(mplayer.MediaHeaders[i], "=", "", True)[1]
      If Compare > MyMax Then
        mymax = compare
        MaxID = ID
        ID = ID + 1
      Endif
    Endif
  Next 'i
  Return Maxid
  
End

Public Sub ExportDbusProperties()
  Try DBus.Session.Register(DbusProperties, "/xt7")
  If Error Then 
    Debug "Error setting up dbus or xt7 already registered"
    Return
  Endif
  DbusProperties.clear()
  DbusProperties.FullPath = mplayer.Media_FullPath
  DbusProperties.FullPathPlaying = mplayer.Media_FullPath_Playing
  DbusProperties.Length = mplayer.Media_Length
  DbusProperties.Size = mplayer.Media_Size
  DbusProperties.Type = mplayer.Media_Type
  DbusProperties.AudioCodec = mplayer.Media_AudioCodec
  DbusProperties.AudioBitrate = mplayer.Media_AudioBitrate
  DbusProperties.AudioRate = mplayer.Media_AudioRate
  DbusProperties.Channels = mplayer.Media_Channels
  DbusProperties.VideoCodec = mplayer.Media_VideoCodec
  DbusProperties.VideoBitrate = mplayer.Media_VideoBitrate
  DbusProperties.VideoFps = mplayer.Media_VideoFps
  DbusProperties.Width = mplayer.Media_Width
  DbusProperties.Height = mplayer.Media_Height
  DbusProperties.VideoOutWidth = mplayer.VideoOut_Width
  DbusProperties.VideoOutHeight = mplayer.VideoOut_Height
  DbusProperties.Author = mplayer.Media_Author
  DbusProperties.Artist = mplayer.Media_Artist
  DbusProperties.Genre = mplayer.Media_Genre
  DbusProperties.Album = mplayer.Media_Album
  DbusProperties.TrackNo = mplayer.Media_TrackNo
  DbusProperties.Title = mplayer.Media_Title
  DbusProperties.Name = mplayer.Media_Name
  DbusProperties.Comment = mplayer.Media_Comment
  DbusProperties.Comment = mplayer.Media_Comments
  DbusProperties.MyYear = mplayer.Media_Year
  DbusProperties.CreationDate = mplayer.Media_CreationDate 
End


Public needytcookie As Boolean = False



Public Function Play(FromMyLibrary As Boolean, Optional fullpath As String = "", Optional quick As Boolean = False, Optional OtherOptions As String = cachedopts, Optional theradiolabel As String = "") As Boolean
  
  Dim prevtabindex As Integer = Leftsidetabs.index
  Dim SelectedRow As Integer
  Dim MkvSubsWorkaround As Boolean
  Dim cookieopts As String = ""
  Dim cachingbox As MovieBox 'show an animation while caching...
  Wait
  
  global.ResetApplyBtnColor()
  
  cachingbox = New MovieBox(outerbox)
  'cachingbox.ignore = True
  cachingbox.h = 66
  cachingbox.w = 66
  cachingbox.x = (outerbox.w Div 2) - 33
  cachingbox.y = (outerbox.h Div 2) - 33
  cachingbox.border = False
  cachingbox.path = "caching.gif"
  cachingbox.playing = True
  cachingbox.Raise
  cachingbox.Show
  'Wait 0.0001
  
  TooMuchCache = False
  alreadypaused = True
  LogWindow.clearlogs()
  
  'avoid a graphical glitch when hitting stop after a song and then play again
  'it will be turned on at the end of this play function
  videobox.cached = False 
  
  'http://bugzilla.mplayerhq.hu/show_bug.cgi?id=1870
  If SubAndOsd.MkvWorkaroundCHK.value Then
    If Not global.IsNetworkURI(fullpath) Then
      MkvSubsWorkaround = True
    Endif
  Endif
  
  SubNotSet = True
  'mplayer.Subfile = "_NuLl_nUlL"
  mplayer.subfile = ""
  Shell DConv(GeneralOptions.NoParsePreCommand.text) Wait
  Seekbar.tag = "timer"
  VideoBox.Visible = False

  If Trim(cachedopts) = "" Then
       If (Not global.FirstTimeSettignsLoaded) Then global.DelayLoadStates_Timer
       SyncCachedOpts()
       otheroptions = cachedopts
  Endif
  
  'If (Not firstplay) And (Not global.initearlyformsdone) Then global.DelayLoadStates_Timer
  
  If Fullpath = "" Then
    If FromMyLibrary Then
      If TabSelectedLibrary() Then
        Try mplayer.Media_FullPath = LibraryGrid[Librarygrid.row, MyLibrary.Columnindex["Full Path"]].text
        If Youtube.IsYoutubeLink(mplayer.Media_FullPath) Then
          Try mplayer.Media_FullPath = Youtube.realvideourl(mplayer.Media_FullPath, GeneralOptions.Youtubeformat.text)
          If Error Then
            Message.error((("Unable to get the real stream url")))
            cachingbox.delete
            Return
          Endif
        Endif
      Else
        Try mplayer.Media_FullPath = PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text
        If Youtube.IsYoutubeLink(mplayer.Media_FullPath) Then
          Try mplayer.Media_FullPath = Youtube.realvideourl(mplayer.Media_FullPath, GeneralOptions.Youtubeformat.text)
          If Error Then
            Message.error(("Unable to get the real stream url"))
            cachingbox.delete
            Return
          Endif
        Endif
      Endif
    Endif
  Else '(fullpath parameter passed)
    mplayer.Media_FullPath = fullpath
    If Youtube.IsYoutubeLink(mplayer.Media_FullPath) Then
      Try mplayer.Media_FullPath = Youtube.realvideourl(mplayer.Media_FullPath, GeneralOptions.Youtubeformat.text)
      If Error Then
        Message.error(("Unable to get the real stream url"))
        cachingbox.delete
        Return
      Endif
    Endif
  Endif
  
  'If global.initlatelyformsdone Then otheroptions = otheroptions & " " & SetRightCache()
  otheroptions = otheroptions & " " & SetRightCache()
  If GeneralOptions.ShowVmeterCHK.value Then
    If Not (global.IsVideoFile(mplayer.Media_FullPath)) Then
      mplayer.exportfile = exportfilespath & Int(Rnd(1, 9999))
      'otheroptions = otheroptions & " " & " -af-add export=/tmp/export:" & GeneralOptions.RmsSizeSpinBox.value
      otheroptions = otheroptions & " " & " -af-add export=" & mplayer.exportfile & ":" & GeneralOptions.RmsSizeSpinBox.value
      audioform.BarBox.visible = True
        Else
      audioform.BarBox.visible = False
    Endif
      Else
    audioform.BarBox.visible = False
  Endif
  
  OtherOptions = otheroptions & " " & GeneralOptions.NoParseAdditionalOptions.text
  
  firstplay = False
  ' If (Not quick) Then
  '   mplayer.CurrentOptions = GetOptionsFromGui() & " " & OtherOptions
  ' Else
     mplayer.CurrentOptions = OtherOptions
  ' Endif
  
  Try Last.mouse = Mouse.wait
  ButtonPlay.enabled = False
  
  Print mplayer.currentoptions
  If (Fullpath Like "dvd://*") Or (Fullpath Like "dvdnav://*") Or (Fullpath Like "cdda://*") Or (Fullpath Like "cddb://*") Then
    GeneralOptions.FillCdAndDvdDevices()
  Endif
  
  ForcedAspectRT = "default"
  LogWindow.streamtextbox.text = mplayer.Media_FullPath
  If Youtube.IsYoutubeLink(mplayer.Media_FullPath) Then
    Try mplayer.Media_FullPath = Youtube.realvideourl(mplayer.Media_FullPath, GeneralOptions.Youtubeformat.text)
    If Error Then
      Message.error(("Unable to get the real stream url"))
      Try Last.mouse = mouse.Default
      cachingbox.delete
      Return
    Endif
  Endif
  OneSecTimer.start
  If needytcookie Then cookieopts = "-cookies -cookies-file " & Youtube.Cookiesfile & " "

  If mplayer.do_play(mplayer.Media_FullPath, mplayer.currentoptions, False, MkvSubsWorkaround, cookieopts) Then
    If Not (mplayer.AudioOnly) Then
      ShowAudioPanel(False)
    Endif
    OneSecTimer_Timer()
    aspectmenu.visible = Not (mplayer.AudioOnly Or fmain.FullScreen)
    OneSecTimer.start
    mplayer.Renice(GeneralOptions.NiceLevelSpinBox.value)
    FillStreamsMenu()
    
    If (Fullpath Like "dvd://*") Then
      IsDVD = True
      FillTitlesAndChaptersMenu()
      SetDvdTabVisibility(True)
    Else
      LastDvdID = ""
      SetDvdTabVisibility(False)
      IsDvd = False
      MenuTitles.Enabled = False
    Endif
    
    If (fullpath Like "dvd://") Then 'eg: the user didn't specified a start title
      OneSecTimer.start
      Play(False, "dvd://" & LargestDvdTitle(), False) 'play the bigger one
      OneSecTimer_Timer()
      OneSecTimer.start
      IsDVD = True
      FillTitlesAndChaptersMenu()
    Endif
    
    CoverManager.HitCancel = True
    If GeneralOptions.CoverCHK2.value Then CoverRefresh()
    
    Try Last.mouse = Mouse.default
    ButtonPlay.enabled = True
    MenumediaExplorer.Enabled = True
    addhistory(mplayer.Media_FullPath)
  Endif
  
  'find overboost levels (volume)
  UpdateOverboostLevel()

  PlayStarted = True
  EndOfMediaReached = False
  VEqHasBeenSet = False
  CorrectAreaAspect()
  FillPropertiesGrid()
  audioform.Label11.visible = (Trim(theradiolabel) <> "")
  If Trim(theradiolabel) <> "" Then
    audioform.RadioLabel.text = theradiolabel
    audioform.RadioLabel.visible = True
    audioform.cutstrings()
  Else
    audioform.RadioLabel.visible = False
  Endif
  
  VideoBox.Visible = True
  If TabSelectedLibrary() Then 
    Try ComboHistory.AddHistory(Searchfield, (Searchfield.text))
  Else If TabSelectedPlaylist() Then
    Try ComboHistory.AddHistory(SearchfieldPLS, (SearchfieldPLS.text))
  Else If TabSelectedDVB() Then
    Try ComboHistory.AddHistory(SearchFieldDVB, (SearchfieldDVB.text))
  Endif

  Fmain.HSplit1_Resize()
  LogWindow.ShowLogs()

  videobox.cached = True
  If GeneralOptions.ToolTipsCHKDBUS.value Then Try ExportDbusProperties()
  cachingbox.delete
  global.ResetApplyBtnColor()
  Return True

End

Public Sub addhistory(fullpath As String, Optional Savetime As String = "0")
  Dim history, entry As String
  Dim historyarray As New String[]
  Dim sep As String = Chr(8)
  If Not (Exist(fullpath)) Then Return
  If Not global.IsNetworkURI(fullpath) Then
    If Not (Exist(global.historyfile)) Then file.Save(global.historyfile, "")
    Try history = file.Load(global.Historyfile) 
    If Error Then 
      Debug "Error: could not access " & global.historyfile & ""
      Return
    Endif
    For Each entry In Split(history, "\n", "", True)
      If entry Like "*" & sep & "*" Then 
        If savetime = "0" Then Try entry = Split(entry, sep, "", True)[0]
      Endif
      If entry <> fullpath Then historyarray.Add(entry) 'no dupes and last on top
    Next
    If Savetime <> "0" Then 
      historyarray.Add(fullpath & sep & Savetime)
        Else
      historyarray.Add(fullpath)
    Endif
    If historyarray.count > Global.MaxHistory Then
      historyarray.Reverse
      historyarray.Resize(Global.MaxHistory)
      historyarray.Reverse
    Endif
    history = ""
    For Each entry In historyarray
      history = history & entry & "\n"
    Next
    file.Save(global.Historyfile, history)
  Endif
  If Not closing Then updaterecentfiles()
End



Public Function SetRightCache() As String

  Dim cachesize As String = "NULL"
  Dim mincache, seekcache As String
  Dim cachesizefile As String = global.confpath & "/" & global.CurrentProfile & ".profile/" & "cachesize."

  With GeneralOptions
    If global.IsNetworkURI(mplayer.Media_FullPath) Then
      If .NetCacheCheckbox.value Then cachesize = .NetCacheSpinBox.value
      If .NetminCacheCheckbox.value Then mincache = " -cache-min " & .cacheminspinbox.value
      If .NetseekCacheCheckbox.value Then seekcache = " -cache-seek-min " & .cacheseekspinbox.value
  
  
    Else If (mplayer.Media_FullPath Like "dvb://*") Then
      If .dvbtCacheCheckbox.value Then cachesize = .dvbtCacheSpinBox.value
      If .dvbtminCacheCheckbox.value Then mincache = " -cache-min " & .dvbtcacheminspinbox.value
  
  
    Else If (mplayer.Media_FullPath Like "dvd://*") Then
      If .DvdCacheCheckbox.Value Then cachesize = .DVDCacheSpinBox.value
      If .DvdminCacheCheckbox.Value Then mincache = " -cache-min " & .DVDCacheMinSpinBox.value
  
  
    Else If (mplayer.Media_FullPath Like "dvdnav://*") Then
      If .DvdCacheCheckbox.Value Then cachesize = "0" 'dvdnav wont work with a cache
  
  
    Else If ((mplayer.Media_FullPath Like "cdda://*") Or (mplayer.Media_FullPath Like "cddb://*")) Then
      If .CDDACacheCheckbox.Value Then cachesize = .CDDACacheSpinBox.value & " -cache-min 0"
  
  
    Else
      If .CacheCheckbox.value Then cachesize = .CacheSpinBox.value
      If .CacheMinCheckbox.value Then mincache = " -cache-min " & .CacheMinSpinBoxFile.value
      
    Endif
  End With
  If cachesize = "0" Then
    Return " -nocache "
  Else If cachesize <> "NULL" Then
    Return " -cache " & cachesize & mincache & seekcache
  Endif
End




Public Sub CoverRefresh()
  
  Dim coverfile As String
  Dim tl As New Taglib
  
  If mplayer.ProcessRunningOvr() And mplayer.Media_AudioOnly() Then
    'coverfile = global.confpath& "/covers/" & global.fixfilename(Upper(Trim(mplayer.Media_Artist))) & "^^^" & global.fixfilename(Upper(Trim(mplayer.Media_Album))) & ".jpg"
    If Upper(mplayer.Media_FullPath) Like "*.FLAC" Then
      If (Trim(mplayer.Media_Artist) = "") And (Trim(mplayer.Media_Album) = "") Then
        tl.init(mplayer.Media_FullPath)
        mplayer.Media_Artist = tl.Artist
        mplayer.Media_Album = tl.Album
        tl.free
      Endif
    Endif

    CoverManager.MediaFileFullPath = mplayer.Media_FullPath
    coverfile = CoverManager.Coverfile(mplayer.Media_Artist, mplayer.Media_Album)

    If Not (Exist(coverfile)) Then
      If Exist(Trim(coverfile)) Then coverfile = Trim(coverfile)
    Endif

    audioform.coverbox.refresh

    Try audioform.CoverBox.picture = covermanager.coverpicture(coverfile, mplayer.Media_FullPath, 160)

    ShowAudioPanel(True)
  Endif
  audioform.coverbox.refresh
  
End

Public Sub OLD_ShowAudioPanel(Show As Boolean)
  
  If Show And Not TagEditMode Then
    audioform.CoverBox.Resize(0, 0)
    OuterBox.Reparent(zzzfake)
    audioform.AudioPanel.Reparent(Rightsidepanel)
    audioform.VBox2.w = 0 'gambas bug with autoresize...
    audioform.VBox4.w = 0 'gambas bug with autoresize...
    audioform.coverbox.Refresh
    AudioForm.TimerZoomIn.start
  Else
    audioform.AudioPanel.Reparent(audioform)
    audioform.close 'close audioforum due to a gambas bug with autoresize...
    audioform.refresh
    OuterBox.Reparent(Rightsidepanel)
  Endif
  
End

Public audioformshown As Boolean = False


Public mymeters As New Meters
Public Sub ShowAudioPanel(Show As Boolean)
  If Show And Not TagEditMode Then
    fmain.OuterBox.ignore = True
    audioform.CoverBox.Resize(0, 0)
    If ((Lower(audioform.AudioPanel.Parent.name) <> "rightsidepanel") Or (Not audioformshown)) Then
      BottomVbox.Reparent(zzzfake)
      audioform.AudioPanel.Reparent(Rightsidepanel)
      BottomVbox.Reparent(rightsidepanel)
    Endif
    audioform.BarBox.visible = GeneralOptions.ShowVmeterCHK.value
    If GeneralOptions.ShowVmeterCHK.value = True Then
      
      Try mymeters.stopp
      mymeters.init(audioform.barbox, GeneralOptions.latencyspinbox.value, audioform.BarBox.h, mplayer.exportfile, 4, GeneralOptions.fpsspinbox.value)
      mymeters.startt
    Endif
    audioform.coverbox.Refresh
    AudioForm.TimerZoomIn.start
    audioform.refresh
    rightsidepanel.Background = audioform.AudioPanel.Background
    OuterBox.visible = False 'OuterBox.Reparent(zzzfake)
  Else
    Try mymeters.stopp
    If Not tageditmode Then rightsidepanel.Background = audioform.AudioPanel.Background
    fmain.OuterBox.ignore = False
    OuterBox.visible = True 'OuterBox.Reparent(Rightsidepanel)
    audioform.AudioPanel.Reparent(audioform)
    audioform.refresh
  Endif
  audioformshown = show
  
End

Public Sub OLD_SetDvdTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  
  If DVDTabID = -1 Then
    For i = 0 To Leftsidetabs.count - 1
      If TabSelectedDVD() Then
        DvdTabId = i
        Break
      Endif
    Next 'i
  Endif
  Leftsidetabs[DvdTabId].visible = visibility
  If visibility Then Leftsidetabs.index = DvdTabId
  
End

Public Sub SetCddaTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedCDDAAt(i) Then
      Leftsidetabs[i].Visible = visibility
      CddaTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = CddaTabId
  
End

Public Sub SetDvdTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedDVDAt(i) Then
      Leftsidetabs[i].Visible = visibility
      DvdTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = DvdTabId
  
End

Public Sub SetFLASHTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  
  If FlashTabID = -1 Then
    For i = 0 To Leftsidetabs.count - 1
      If TabSelectedFlash() Then
        FlashTabId = i
        Break
      Endif
    Next 'i
  Endif
  If visibility Then Leftsidetabs.index = FlashTabId
  Leftsidetabs[FlashTabId].visible = visibility
  
End

Public Sub UpdateOverboostLevel()

  If (mplayer.commandline Like "*-softvol *") And (mplayer.commandline Like "*-softvol-max *") Then
    Try overboost = CInt(Trim(Mid(mplayer.commandline, InStr(mplayer.commandline, "-softvol-max") + 13, 4)))
    If Error Then overboost = 100
  Else
    overboost = 100
  Endif

End

Public Sub VideoAreaGroup_Drop()
  
  Dim droppedfiles As String[]
  
  droppedfiles = Split(Drag.data, "\n")
  droppedfiles[0] = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfiles[0])))
  If Not ((droppedfiles[0] Like "*.iso") Or (droppedfiles[0] Like "*VIDEO_TS")) Then
    If mplayer.IsSubFile(droppedfiles[0]) Then
      mplayer.SubtitleDisplay(droppedfiles[0])
    Else
      mplayer.Media_FullPath = droppedfiles[0]
      Debug "Drag.format= " & Drag.format
      Play(False)
    Endif
  Else
    dvd_device = droppedfiles[0]
    Play(False, "dvd://")
  Endif
End

Public Sub UpdateSeekSlider()
  'Get the current playing time and update seek bar accordingly
  
  Dim totaltime, actualtime, percent, stream_length, stream_pos As Integer
  
  If File.Name(mplayer.Media_FullPath_Playing) <> "_AnImLoGo_.avi.tmp" Then
    SeekBar.tag = "timer" 'this will avoid seekbar to send seek to mplayer
    Try totaltime = mplayer.Media_Length
    Try actualtime = mplayer.CurrentTime()
    Try SeekBar.value = (actualtime * 1000) Div totaltime
    SeekBar.tag = "user"
  Endif
  
End

Public youtubetitle As String = ""

Public Sub UpdateStatusBar()
  'Print the current filename and playing time on the status bar

  Dim SpaceWidth As Integer = Statusbar1.Font.TextWidth(" ")
  Dim RemainingTime, maxcachehuman As String
  Dim PreText As String = ""
  Dim PostText As String
  Dim SmallWindow As Boolean = False
  Dim StatusTextWidth As Integer
  Dim FreeSpace As Integer
  Dim NeededSpaces As Integer
  Dim LotOfSpaces As String = ""
  Dim Cachevalue As Integer = 0
  
  If File.Name(mplayer.Media_FullPath_Playing) <> "_AnImLoGo_.avi.tmp" Then
    pretext = file.BaseName(mplayer.Media_FullPath_Playing)
    If IsDvd Then Pretext = "DVD: " & mplayer.FindTagValue("ID_DVD_VOLUME_ID")
    If mplayer.IsNetworkURI Then
      If mplayer.ICYStreamTitle <> "" Then
        Pretext = mplayer.ICYStreamTitle ' Pretext & ": " & mplayer.ICYStreamTitle
      Else If youtubetitle <> "" Then
        pretext = youtubetitle
      Endif
    Endif
    
    
    '------------------------------
    'Depending on the Choosed timeformat, draw the current time:
    If TimeFormat = 0 Then
      PostText = mplayer.FormatTime(mplayer.CurrentTime()) & " / " & mplayer.FormatTime(mplayer.Media_Length)
    Else If Timeformat = 1 Then
      RemainingTime = mplayer.Media_Length - mplayer.CurrentTime()
      PostText = "-" & mplayer.FormatTime(remainingtime) & " / " & mplayer.FormatTime(mplayer.Media_Length)
    Else If Timeformat = 2 Then
      PostText = mplayer.CurrentTime() & " / " & mplayer.Media_Length
    Else If Timeformat = 3 Then
      RemainingTime = mplayer.Media_Length - mplayer.CurrentTime()
      PostText = "-" & RemainingTime & " / " & mplayer.Media_Length
    Endif
  Endif
  smallwindow = (Statusbar1.Font.TextWidth(PreText & PostText) > Statusbar1.Width)
  If SmallWindow Then
    pretext = Left$(pretext, CInt(((Statusbar1.Width) Div Statusbar1.font.TextWidth("_")) - Len(PostText)) / 1.) & "..."
  Endif
  'If Trim(pretext) <> "" Then
  
  Try cachevalue = CInt(Split(mplayer.currentcache, "%")[0])
  If Not Error Then
    If CInt(mplayer.maxcache) >= 1024 Then 
      Try maxcachehuman = Format$(((CFloat(mplayer.maxcache) / 1024)), "##.#") & "MB"
        Else
      MaxCacheHuman = mplayer.maxcache & "KB"
    Endif
    fmain.caption = pretext & " [ cache: " & cachevalue & "%" & (" of: ") & MaxCacheHuman & " ]"
    cachebar.value = cachevalue / 100
  Endif
  
  
  'Debug mplayer.currentcache
  StatusTextWidth = Statusbar1.Font.TextWidth(PreText & PostText)
  FreeSpace = Statusbar1.width - StatusTextWidth
  NeededSpaces = Freespace / SpaceWidth
  Try LotOfSpaces = Space(NeededSpaces - 3)
  Statusbar1.text = PreText & LotOfSpaces & PostText
  AudioForm.UpdateLength(PostText)
End


Public Sub UpdateVolumeSlider()
  
  Dim tmp As String
  Dim newvolume As Integer
  'DEBUG "asking for volume level..."
  mplayer.Send("get_property volume")
  SaveVolumeSlider.tag = "timer"          'this will avoid seekbar to send volume to mplayer
  tmp = mplayer.currentvolume
  Try newvolume = Left(tmp, InStr(tmp, ".") - 1)
  If newvolume = 0 Then
    Try newvolume = Left(tmp, InStr(tmp, ",") - 1)
  Endif
  Try SaveVolumeSlider.Value = newvolume Div 4
  SaveVolumeSlider.tag = "user"

End

Public Sub UpdateStreamsMenu()
  'read current subtitle and audio tracks and check the relevant item in the streams menu 
  Dim tmpsub, tmpaudio As String

  mplayer.Send("get_property sub")
  mplayer.Send("get_property switch_audio")
  tmpsub = mplayer.CurrentSubStream
  tmpaudio = mplayer.CurrentAudioStream
  Debug "tmpsub= " & tmpsub
  Debug "tmpaudio= " & tmpaudio
  Repeat
  Until Streamsaudiomenu
  
End

Public Sub ExecutePostCmd()
  
  Shell DConv(GeneralOptions.NoParsePostCommand.text) Wait
  
End

Public subnotset As Boolean = True


Private alreadypaused As Boolean = False


Private PrevCache As String = ""
Public Function CacheChanged() As Boolean
  Dim curcache As String = ""
  curcache = mplayer.CurrentCache
  If PrevCache <> CurCache Then
    Prevcache = CurCache
    Return True
  Endif
  Return False
End



Public Sub OneSecTimer_Timer()
  
  Dim running As Boolean = False
  Dim PlaylistFinished As Boolean
  Dim oldaspect, newaspect As Float
  Dim VideoW As Integer
  Dim VideoH As Integer

  If mplayer.ProcessRunningOvr() Then
    'If (Not fmain.FullScreen) Then cachebar.visible = True
    
    If mplayer.Paused Then
      If CacheChanged() Then UpdateStatusBar()      '1%
      If Not alreadypaused Then
        ButtonPlay.picture = Picture["media-playback-start.png"]
        alreadypaused = True
      Endif
    Else
      If alreadypaused Then
        ButtonPlay.picture = Picture["media-playback-pause.png"]
        alreadypaused = False
      Endif
    Endif
    If (Not mplayer.Paused) Then
      If (Not MousePressed) Then

        UpdateVolumeSlider()  '12% --> ok 3-4%
        If Not (mplayer.Media_FullPath_Playing Like ("dvb://*")) Then 
            If Not (mplayer.Media_FullPath_Playing Like ("http://*shoutcast*")) Then
            'mplayer.Send("get_property length") '12% --> ok 3-4%
            'mplayer.Send("get_time_length") '12% --> ok 3-4%
            mplayer.getlength()
          Endif
        Endif
        UpdateStatusBar()      '1%
        UpdateSeekSlider()     '0%

        'Load youtube subtitles...
        
        If SubNotSet Then
          If CInt(mplayer.CurrentTime()) > 0 Then
            subnotset = False
            If ((mplayer.Media_FullPath_playing Like "http://*youtube*") Or (mplayer.Media_FullPath_playing Like "https://*youtube*")) Then
              Try GetYoutubeSubs(Youtube.currentvideoid)
              If Error Then Debug "Error on GetYouTubeSubs()"
              If mplayer.subtitletracks.count > 0 Then mplayer.ShowText(("* Youtube subtitles available *"))
            Endif
          Endif
        Endif

        If (Not VEqHasBeenSet) Then
          If VideoEqualizer.ApplyEqCheckbox.value Then
            VideoEqualizer.ApplyEqSettings()
          Endif
        Endif
        VEqHasBeenSet = True

        If mplayer.IsNetworkURI Then
          If mplayer.ICYStreamTitle <> "" Then
            If mplayer.ICYStreamTitle <> PropertiesGrid[1, 1].text Then
              PropertiesGrid[1, 1].text = mplayer.ICYStreamTitle
              Audioform.label18.text = audioform.cutstring(PropertiesGrid[1, 1].text, 50)
              AutoresizeAudioForm()
            Endif
          Endif
        Endif

        If (mplayer.AudioOnly) Then
          If (Not audioformshown) Then
            If (Not tageditmode) Then
              ShowAudioPanel(True)
            Endif
          Endif
        Endif
      Endif
    Endif
  Else  'Mplayer Not running
    'cachebar.visible = False
    Fmain.caption = "xt7-player"
    OneSecTimer.stop
    cachebar.value = 0
    ButtonPlay.picture = Picture["media-playback-start.png"]
    If PlayStarted Then 'we've reached the end of the media or stopped it.
      SubNotSet = True
      If (Not Userstopped) And (Shutdown = "MEDIA") Then CountDown.engage
      EndOfMediaReached = True
      VEqHasBeenSet = False
      IsDvd = False
      youtubetitle = ""
      MenumediaExplorer.Enabled = False
      'reset overboost value
      overboost = 100
      'hide the cover
      If GeneralOptions.CoverCHK2.value Then ShowAudioPanel(False)
      If fmain.FullScreen Then FullScreenSwitch()
      'Execute PostCommand
      ExecutePostCmd()
      'delete export file
      Try Kill mplayer.exportfile
      
      If TogglePls.value And (Not UserStopped) And (Not FirstPlay) Then
        Debug "end of media reached, playing next video..."
        ButtonNext_Click()
        PlaylistFinished = Not global.IsNextSelected
        If (Shutdown = "PLS") And PlaylistFinished And (Not ShufflePls.value) Then CountDown.engage
        
        Debug "Mplayer was off, so hit PLAY from here"
        If Not (mplayer.ProcessRunningOvr()) Then
          Play(True, mplayer.Media_FullPath)
            Else
          Debug "Not hitting PLay from here because ButtonNext did it first"
        Endif
      Else
        Playstarted = False
        UserStopped = False
        FirstPlay = False
        'If fmain.FullScreen Then FullScreenSwitch()
      Endif
    Endif
    Try Statusbar1.text = "Stopped"
    SeekBar.value = 0
  Endif
End

Private Sub UpdateVolumeTooltip()
  
  Dim tip As String
  Dim tipw As Integer
  
  tip = "   Volume: " & CStr(SaveVolumeSlider.value * (overboost Div SaveVolumeSlider.MaxValue)) & "%    "
  Tipw = OverlayTip.TextLabel1.Font.TextWidth(tip)
  OverlayTip.Redraw(tip, mouse.screenx - (tipw Div 2), controlframe.screeny - OverlayTip.h)
  
End

Public Sub Old_ShowVolBtn_enter()
  
  VolumeFocused = True
  UpdateVolumeTooltip()
  OverlayTip.show
  
End

Public Sub Old_ShowVolBtn_leave()
  
  VolumeFocused = False
  OverlayTip.hide
  
End

Public Sub ShowVolBtn_enter()
  
  VolumeFocused = True
  UpdateVolumeTooltip()
  UpdateVolumeTooltip()
  OverlayTip.raise
  UpdateVolumeTooltip()
  
End

Public Sub ShowVolBtn_leave()
  
  If Not (Global.MouseInside(SaveVolumeSlider) Or Global.MouseInside(ShowVolBtn)) Then 'check needed due to a gambas bug with gtk
    VolumeFocused = False
    OverlayTip.hide
  Endif
  
End

Public Sub SaveVolumeSlider_enter()
  
  If Global.MouseInside(SaveVolumeSlider) Then
    VolumeFocused = True
    UpdateVolumeTooltip()
    OverlayTip.Raise
    UpdateVolumeTooltip()
  Endif
  
End

Public Sub SaveVolumeSlider_leave()
  
  If Not (Global.MouseInside(SaveVolumeSlider) Or Global.MouseInside(ShowVolBtn)) Then 'check needed due to a gambas bug with gtk
    VolumeFocused = False
    OverlayTip.hide
  Endif
  
End

Public Sub SaveVolumeSlider_MouseUp()
  
  If Not (Global.MouseInside(SaveVolumeSlider) Or Global.MouseInside(ShowVolBtn)) Then 'check needed due to a gambas bug with gtk
    VolumeFocused = False
    OverlayTip.hide
  Endif
  
End

Public Sub Old_SaveVolumeSlider_enter()
  
  VolumeFocused = True
  UpdateVolumeTooltip()
  OverlayTip.show
  
End

Public Sub VersionCheck()
  Dim UserVersion, UserMajor, UserMinor, RequiredMajor, RequiredMinor, Userminiminor, requiredminiminor As String
  Dim Required As String = Global.requiredversion

  Shell "gbx3 -V" Wait To UserVersion

  RequiredMajor = Split(Required, ".")[0]
  RequiredMinor = Split(Required, ".")[1]
  RequiredMiniminor = Split(Required, ".")[2]
  UserMajor = Split(UserVersion, ".")[0]
  UserMinor = Split(UserVersion, ".")[1]
  Userminiminor = Trim(Split(UserVersion, ".")[2])
  
  If UserMajor > RequiredMajor Then Return
  If Userminor > RequiredMinor Then Return
  If Userminiminor >= requiredminiminor Then Return
  
    'else...
    MyQuestion.Ask("WARNING\nYour Gambas version is " & Trim(UserVersion) & "\nbut xt7-player requires " & global.RequiredVersion, "Understood", "")

End


Public Sub SaveVolumeSlider_Change()
  
  OneSecTimer.delay = OneSecTimer.delay * 100
  If Not (SaveVolumeSlider.tag = "timer") Then
    mplayer.do_SetVolume(SaveVolumeSlider.value * (100 Div SaveVolumeSlider.MaxValue))
    If VolumeFocused Then UpdateVolumeTooltip()
  Endif
  OneSecTimer.delay = OneSecTimer.delay Div 100
  'Call GetProperty"volume" now, so onesectimer will found the answer
  mplayer.Send("get_property volume")
  
End

Public Sub SeekBar_Change()
  '"if" is needed, because seekbar position is changed by mplayer itself through sec_timer

  If Not (Seekbar.tag = "timer") Then
    OneSecTimer.Enabled = False
    mplayer.do_seek(SeekBar.value Div 10)
    OneSecTimer.Enabled = True
  Endif
  
End

Public Sub MenuOpen_Click()
  
  ButtonOpen_Click()
  
End

Public Sub MenuQuit_Click()
  
  FMain.Close
  
End

Public Sub MenuAbout_Click()
  MyQuestion.ask(Global.aboutmessage, ("GotIt!"), "")

End

Public Sub ShowVolBtn_Click()
  
  SaveVolumeSlider.Visible = Not SaveVolumeSlider.Visible
  
End

Public Sub ShowVolBtn_MouseWheel()
  
  If Mouse.delta > 0 Then
    SaveVolumeSlider.value = SaveVolumeSlider.value + 1
  Else
    SaveVolumeSlider.value = SaveVolumeSlider.value - 1
  Endif
  
End

Public Sub SeekBar_MouseDown()
  
  MousePressed = True
  
End

Public Sub SeekBar_MouseUp()
  
  MousePressed = False
  
End

Public Sub VideoAreaGroup_MouseDrag()
  
  Dim NewX, NewY As Integer
  Dim MinX, MinY As Integer
  
  If (Not Fmain.FullScreen) Then
    If SwitchingFullScreen Then Return
    If mouse.left Then
      GuiDragging = True
      fmain.Move(fmain.screenx + (mouse.x - mouse.StartX), fmain.screeny + (mouse.y - mouse.Starty))
    Endif
    
  Else
    If GeneralOptions.PanTagCHK.value = True Then
      'Allow Dragging image if it is panned:
      If mouse.left And (ResizeFactor > 1) Then
        GuiDragging = True
        NewX = VideoBox.screenx + (mouse.x - mouse.StartX)
        NewY = VideoBox.screeny + (mouse.y - mouse.Starty)
        If (NewX < (Desktop.w Div 2)) And (NewY < (Desktop.h Div 2)) Then
          If (NewX + VideoBox.w) > (Desktop.w Div 2) And (Newy + VideoBox.h) > (Desktop.h Div 2) Then
            VideoBox.Move(NewX, NewY)
          Endif
        Endif
      Endif
    Endif
  Endif
  
End

Public Function DisableKDECompositing() As Boolean
  
  Dim wasactive As Boolean = False
  
  If DBus["org.kde.kwin"]["/KWin"].compositingActive() Then 
    
    wasactive = True
    Shell "dbus-send --type=method_call --dest=org.kde.kwin /KWin org.kde.KWin.toggleCompositing"
  Endif
  Return wasactive
  
End

Public Function EnableKDECompositing() As Boolean
  
  Dim wasinactive As Boolean = False
  
  If Not (DBus["org.kde.kwin"]["/KWin"].compositingActive()) Then 
    wasinactive = True
    Shell "dbus-send --type=method_call --dest=org.kde.kwin /KWin org.kde.KWin.toggleCompositing"
  Endif
  Return wasinactive
  
End

Private KdeEffectsWereActive As Boolean = False

Public Sub FullScreenSwitch()
  
  Dim MenuBarItem As Object
  Dim MaxWait As Integer = 1000
  Dim blackbox As New Panel(fmain)
  
  SwitchingFullScreen = True
  blackbox.border = border.none
  blackbox.visible = False
  blackbox.background = Color.black
  blackbox.Background = Color.black
  blackbox.raise
  blackbox.ignore = True
  blackbox.w = Desktop.w * 2
  blackbox.h = Desktop.h * 2
  blackbox.x = fmain.screenx - Desktop.w 'fmain.screenx - (blackbox.w DIV 4)
  blackbox.y = fmain.screeny - Desktop.h ' (blackbox.w DIV 4)
  blackbox.visible = True
  
  OuterBox.Mouse = 0
  VideoBox.Mouse = 0
  If FMain.fullscreen Then 'prepare to return in window mode
    If GeneralOptions.NoEffectsCheckbox.value Then
      If KdeEffectsWereActive Then EnableKDECompositing()
    Endif
    If (Not mplayer.AudioOnly) Then fmain.OuterBox.ignore = False
    Audioform.AudioPanel.ignore = False
    
    'reorganize the controls to fit window mode
    'cachebar.reparent(zzzFake)
    zzzfake.VSplit1.Reparent(zzzfake)
    Hsplit1.visible = False
    HSplit1.Reparent(Fmain)
    blackbox.raise
    hsplit1.visible = True
    Leftsidepanel.Reparent(Hsplit1)
    Rightsidepanel.Reparent(hsplit1)
    fmain.refresh
    Wait 0.01
    tagpanel.Reparent(zzzfake)
    EditTagModeSwitch1.Checked = False
    If (SplitterLayout <> Null) Then Hsplit1.Layout = SplitterLayout
    LeftsidePanel.Visible = LeftsideWasVisible
    BottomVbox.Reparent(zzzfake)
    BottomVbox.visible = False
    BottomVbox.ignore = False
    BottomVbox.Reparent(fmain)
    blackbox.raise()
    BottomVbox.visible = True
    Statusbar1.Width = 100
    FMain.fullscreen = False
    RightSidePanel.SetFocus()
    OuterBox.Mouse = mouse.default
    VideoBox.Mouse = mouse.default
    AllmenuVisible(True)
    
    
  Else '(fit fullscreen mode) **************************
    If GeneralOptions.NoEffectsCheckbox.value Then
      Try KdeEffectsWereActive = DisableKDECompositing()
      If Error Then
        Debug "Unable to disable kde effects, are you sure use kwin window manager?"
        KdeEffectsWereActive = False
      Endif
    Endif
    AllmenuVisible(False)
    'cachebar.hide
    'cachebar.Reparent(fmain)
    If Not (Hsplit1.Layout[0] = 0) Then SplitterLayout = Hsplit1.Layout

    'save form size for late restore    
    Global.FormX = FMain.ScreenX
    Global.FormY = FMain.ScreenY
    Global.FormW = FMain.Width
    Global.FormH = FMain.Height
    LeftsideWasVisible = LeftsidePanel.Visible

    'reorganize controls to fit fullscreen mode
    HSplit1.Reparent(zzzfake)
    Leftsidepanel.Reparent(zzzfake.vsplit1)
    Rightsidepanel.Reparent(zzzfake.vsplit1)
    zzzfake.VSplit1.visible = False
    zzzfake.VSplit1.Reparent(fmain)
    blackbox.raise()
    zzzfake.VSplit1.visible = True
    tagpanel.Reparent(zzzfake)
    EditTagModeSwitch1.Checked = False
    BottomVbox.Reparent(zzzfake)

    ' BottomVbox.visible = False
    BottomVbox.Reparent(fmain)
    blackbox.raise()
    BottomVbox.visible = True
    LeftsidePanel.h = (Desktop.Height Div 2)
    LeftsidePanel.visible = False
    OuterBox.Background = Color.black
    VideoBox.visible = True
    FMain.fullscreen = True
    
    'sit and wait until fmain has changed his size (is gone fullscreen)
    Repeat
      Wait 0.001
      maxwait = maxwait - 1
    Until (global.formw <> fmain.w) Or (global.formh <> fmain.h) Or Maxwait = 0
    Debug rightsidepanel.Parent.name
  Endif

  TimerFullScreen.enabled = FMain.FullScreen

  If Fmain.Fullscreen Then
    BottomVbox.visible = False
    BottomVbox.h = 0
  Else
    SlideTimer.stop
    BottomVbox.visible = True
    BottomVbox.h = controlframe.h + Statusbar1.h
  Endif

  CostrainFormSizes()
  fmain.VideoBox.setfocus
  'wait a little bit before setting switchingfullscreen to false
  Wait 0.2
  SwitchingFullScreen = False
  blackbox.visible = False
End

Public Sub AllmenuVisible(AreVisible As Boolean)
  Menuplaylist.visible = AreVisible
  MenuMain.visible = AreVisible
  MenuState.visible = AreVisible
  MenuAbout.Visible = AreVisible
  MainToolBar.visible = AreVisible
  MenuConfigure.visible = AreVisible
  MenuLibrary.Visible = AreVisible
  AspectMenu.Visible = (AreVisible And (Not mplayer.audioonly))
End

Private Sub MouseHide()
  
  If (Mouse.screenx & "." & Mouse.ScreenY = MousePos) Then
    OuterBox.Mouse = 10
    VideoBox.Mouse = 10
  Else
    OuterBox.Mouse = 0
    VideoBox.Mouse = 0
  Endif
  
  MousePos = Mouse.screenx & "." & Mouse.ScreenY
  
End

Public Function MouseInsideFmainByCoords() As Boolean
  'reports if the cursor is inside fmain by checking the coordinates

  If mouse.ScreenX >= fmain.screenx Then
    If mouse.ScreenX <= fmain.screenx + fmain.W Then
      If mouse.ScreenY >= fmain.ScreenY Then
        If mouse.ScreenY <= fmain.ScreenY + fmain.h Then
          Return True
        Endif
      Endif
    Endif
  Endif
  Return False

End

Public Sub TimerFullScreen_Timer()
  
  Dim BottomThreshold As Integer = 96
  Dim TopThreshold As Integer = 48
  Dim AttachZone1 As Boolean = (Mouse.screeny > Fmain.screeny + Fmain.h - BottomThreshold) 'bottom
  Dim AttachZone2 As Boolean = (Mouse.screeny < TopThreshold) 'top
  Dim ReleaseZone1 As Boolean = (Mouse.screeny < ControlFrame.screeny - BottomThreshold) 'bottom vbox
  Dim ReleaseZone2 As Boolean = (Mouse.screeny > MainToolbar.Height + TopThreshold)  'top
  
  MouseOnFmain = MouseOnFmain Or MouseInsideFmainByCoords()

  If MouseOnFmain Then MouseHide()
  '     
  If AttachZone1 And MouseOnFmain Then
    
    BottomVbox.ignore = True
    Audioform.AudioPanel.ignore = True
    BottomVbox.visible = True
  Endif
  
  If AttachZone2 And MouseOnFmain Then
    MainToolBar.visible = True
    AllmenuVisible(True)
  Endif
  
  If ReleaseZone1 Then
    BottomVbox.ignore = False
    BottomVbox.visible = False
    Audioform.AudioPanel.ignore = False
  Endif
  
  If ReleaseZone2 And (Not AttachZone1) And (MainToolBar.Visible) Then
    MainToolBar.Visible = False
    AllmenuVisible(False)
    If (Not BottomVbox.visible) Then CorrectAreaAspect
  Endif
  
End

Public Sub TimerFullScreen_Timer_OLD() 'causes glitches with qt4
  
  Dim BottomThreshold As Integer = 128
  Dim TopThreshold As Integer = 32
  Dim AttachZone1 As Boolean = (Mouse.screeny > Fmain.screeny + Fmain.h - BottomThreshold) 'bottom
  Dim AttachZone2 As Boolean = (Mouse.screeny < TopThreshold) 'top
  
  Dim ReleaseZone1 As Boolean = (Mouse.screeny < ControlFrame.screeny - BottomThreshold) 'bottom vbox
  Dim ReleaseZone2 As Boolean = (Mouse.screeny > MainToolbar.Height + TopThreshold)  'top
  
  MouseOnFmain = MouseOnFmain Or MouseInsideFmainByCoords()
  
  If MouseOnFmain Then MouseHide()
  '     
  If AttachZone1 And MouseOnFmain Then
    OuterBox.ignore = True
    Audioform.AudioPanel.ignore = True
    DoSlideUp = True
    SlideTimer.start
  Endif
  
  If AttachZone2 And MouseOnFmain Then
    MainToolBar.visible = True
    AllmenuVisible(True)
    CorrectAreaAspect
  Endif
  
  If ReleaseZone1 Then
    DoSlideUp = False
    SlideTimer.start
  Endif
  
  If ReleaseZone2 And (Not AttachZone1) And (MainToolBar.Visible) Then
    MainToolBar.Visible = False
    AllmenuVisible(False)
    If (Not BottomVbox.visible) Then CorrectAreaAspect
  Endif
  If Not fmain.FullScreen Then
    mouse
  Endif
  
End

Public Sub SwitchSidePanelBTN_Click()
  
  If Leftsidepanel.visible Then
    If Not fmain.FullScreen Then Hsplit1.tag = Hsplit1.layout
    Leftsidepanel.visible = False
  Else
    Leftsidepanel.visible = True
    'Wait 1
    If Not fmain.FullScreen Then 
      If hsplit1.tag = Null Then
        Leftsidepanel.w = 256
        'Wait 1
      Else
        Hsplit1.layout = Hsplit1.tag
      Endif 
    Endif
  Endif
  CorrectAreaAspect
  If (Not OuterBox.visible) Then OuterBox.visible = True
  
End

Public Sub LibraryGrid_Drop()
  
  Dim droppedfiles As String[]
  Dim DroppedFile, ext As String
  Dim i As Integer
  Dim IsFile, IsURI, IsDirectory, IsPlayList As Boolean
  
  droppedfiles = Split(Drag.data, "\n")
  Debug "Start at: " & Time

  'prepare the progressbar
  MyLibraryProgressBar.visible = True
  MyLibraryProgressBar.h = 32
  Wait 0.1
  MyLibrary.FilesToProcess = Global.GetTotalFiles(Drag.data, True)
  MyLibraryProgressBar.value = 0 '(it will be update by MyLibrary.add())
  
  MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      ISFile = False
      IsDirectory = False
      IsUri = False
      Try ISFile = (Stat(droppedfile, True).type = gb.file)
      Try IsDirectory = (Stat(droppedfile, True).type = gb.Directory)
      ext = Upper(File.Ext(DroppedFile))
      Try IsPlaylist = ((ext = "M3U") Or (ext = "PLS") Or (ext = "XPL"))
      IsUri = (droppedfile Like "*://*")

      If IsPlayList Then
        MyLibrary.LoadFile(droppedfile, LibraryGrid, True)
      Else If IsFile Then
        MyLibrary.AddFile(LibraryGrid, DroppedFile, False)
      Else If IsDirectory Then
        Try MyLibrary.AddDir(LibraryGrid, DroppedFile, GeneralOptions.NoParseExcludedListbox)
      Else If IsUri Then
        MyLibrary.AddFile(Librarygrid, Droppedfile, GeneralOptions.SlowTagsCHK.value, True)
      Endif
    Endif
  Next
  MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
  Debug "End at: " & Time
  
  'reset the progressbar
  MyLibraryProgressBar.h = 0
  MyLibraryProgressBar.visible = False
  MyLibrary.FilesToProcess = 0
  MyLibrary.FilesProcessed = 0
  MyLibraryProgressBar.value = 0
  
  UpdateSearchResults(mylibrary, librarygrid, True, Searchfield.text)
  ScrollLeft()
  
End

Public timerscroll As Timer

Public Sub ScrollLeft()
  
  timerscroll = New Timer As "timerscroll"
  timerscroll.delay = 1
  timerscroll.enabled = True
  
End

Public Sub timerscroll_timer()
  
  Try librarygrid.MoveTo(0, 0)
  Try playlistgrid.MoveTo(0, 0)
  timerscroll.enabled = False
  
End

Public Sub MenuVideoAudioChains_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  Chains.show
  
End

Public Sub MenuVideoDriver_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  XConfigureVideoDriver.Show
  
End

Public Sub MenuAudioDriver_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  XConfigureAudioDriver.show
  
End

Public Sub MenuSaveDefault_Click()

  If Lower(global.CurrentProfile) = "factory_defaults" Then
    If MyQuestion.Ask("You can't modify the current profile\nbecause it is the Factory defaults one", "Save and switch to ''default'' profile", "Don't save") = 1 Then
      global.CurrentProfile = "default"
        Else
      Return
    Endif
  Endif
  ReallySaveAllSettings(global.CurrentProfile)
  GetOptionsFromGui()
  UpdateProfilesTabList()
  If Error Then Message.Error(("Error while saving default settings"))
End

Public Sub ReallySaveAllSettings(DestinationProfile As String, Optional WithLibraryAndPls As Boolean = True, Optional WithCachedopts As Boolean = False)
  
  'Dim cachedopts As String
  
  If Not (global.initlatelyformsdone Or (DestinationProfile = "Factory_Defaults")) Then ReLoadCurrentProfile()
  If WithCachedopts Then
    cachedopts = GetOptionsFromGui()
    cachedopts = cachedopts & " " & mplayer.AoAdditionalopts & " " & mplayer.AoDriver & " "
    cachedopts = cachedopts & " " & mplayer.VoDriver & " " & mplayer.VoAdditionalopts & " " & mplayer.AoAdditionalopts
    cachedopts = cachedopts & " " & mplayer.AVcodecs
  Endif
  
  Global.SaveAllSettings(DestinationProfile, WithLibraryAndPls, cachedopts)
  GeneralOptions.SaveWatchDir(global.confpath & "/" & DestinationProfile)
  GeneralOptions.SaveExcludeDir(global.confpath & "/" & DestinationProfile)
  HotKeys.SaveHotKeys(global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Searchfield, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(SearchfieldPLS, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(SearchfieldDVB, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(youSearchfield, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Fmain.Urlbox, global.confpath & "/" & DestinationProfile)
  
End

Public Sub MenuLoadDefault_Click()
  
  ReLoadCurrentProfile()
  
End

Public Sub MenuRestoreDefaults_Click()
  
  Dim DefaultFile As String

  If Not (MyQuestion.ask(("Are you sure you want to reset the default profile\nto factory values?"), ("Don't Reset"), ("Reset")) = 1) Then
    For Each DefaultFile In Dir(Global.confpath, "Default.*")
      Try Kill global.confpath & "/" & DefaultFile
      If Error Then Message.Error(("There was a problem while deleting") & global.confpath & "/" & DefaultFile, "OK")
    Next
    Message(("Default profile has been set to factory values.\nRestart is needed."))
  Endif
  
End

Public Sub MenuConfigureVideoFilters_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  VFiltersCfg.show
  
End

Public Sub MenuConfigureAudioFilters_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  AFiltersCfg.show
  
End

Public Sub Apply()
  Debug "Cached Options unvalidated"
  global.ResetApplyBtnColor()
  fmain.cachedopts = ""
  VEqHasBeenSet = False
  If mplayer.ProcessRunningOvr() Then
    ForcedAspectRT = "default"
    mplayer.do_restart(mplayer.Media_FullPath_Playing, GetOptionsFromGui() & SetRightCache())
    aspectmenu.visible = Not (mplayer.AudioOnly Or fmain.fullscreen)
    mplayer.Renice(GeneralOptions.NiceLevelSpinBox.value)
    CorrectAreaAspect
    LogWindow.clearlogs()
    LogWindow.ShowLogs()
  Endif
  UpdateOverboostLevel()
End

Public Sub SubTitlesMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  SubAndOsd.show
  
End

Public Sub HotkeysMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  HotKeys.show
  
End

'HotKeys Handling *******************************************

Public Sub HotKeyToMplayer(HotKey As String)
  'will send the action to the running mplayer
  'Some actions such as fullscreen and panscan are treated internally
  
  Dim Action As String = HotKeys.ActionRelatedTo(Hotkey)
  Dim tmpfloat As Float

  'PRINT Action
  Select Case Action
    Case "Vo_fullscreen"
      FullScreenBtn_Click()
    Case "Panscan +0.05"
      PanScanCorrect(+0.05)
    Case "Panscan -0.05"
      PanScanCorrect(-0.05)
    Case "deinterlace"
      mplayer.DoDeinterlace()
    Case "Pause"
      If mplayer.Paused Then
        OneSecTimer.start
        ButtonPlay.picture = Picture["media-playback-pause.png"]
      Else
        'OneSecTimer.stop
        ButtonPlay.picture = Picture["media-playback-start.png"]
      Endif
      mplayer.Send(Action)
    Case "Exit"
      mplayer.Send(Action)
      If fmain.FullScreen Then FullScreenSwitch()
    Case "quit"
      'mplayer.Send(Action)
      ButtonStop_Click()
      If fmain.FullScreen Then FullScreenSwitch()
    Case "Volume +0.5"
      SaveVolumeSlider.value = SaveVolumeSlider.value + 1
    Case "Volume -0.5"
      SaveVolumeSlider.value = SaveVolumeSlider.value - 1
    Case Else
      mplayer.Send(Action)
  End Select
  
End


Public Sub PanScanCorrect(delta As Float)
  Dim MaxRFactor As Float = 20
  Dim MinRFactor As Float = 0.1
  If delta > 0 Then
    ResizeFactor = Resizefactor + SnapToBorders(delta)
    If ResizeFactor > MaxRFactor Then resizefactor = MaxRFactor
    CorrectAreaAspect
    realtimeform.PanscanSlider.value = resizefactor * 10000
    If (videobox.w = Rightsidepanel.w) Or (videobox.h = Rightsidepanel.h) Then
      Try mplayer.ShowText(("Video snaps to borders"), 500)
    Endif
      Else
    ResizeFactor = ResizeFactor + delta
    If ResizeFactor < MinRFactor Then resizefactor = MinRFactor
    CorrectAreaAspect
    realtimeform.PanscanSlider.value = resizefactor * 10000
    If (videobox.w = Rightsidepanel.w) Or (videobox.h = Rightsidepanel.h) Then
      Try mplayer.ShowText(("Video snaps to borders"), 500)
    Endif
  Endif
End


Public Function SnapToBorders(adding As Float) As Float
  'Se l'operazione di zoomingIN sta facendo sì che il video sarà più grande della finestra,
  'e se prima non lo era,
  'ricalcola il quanto aggiungere al resizefactor in modo 
  'che il video sia esattamente largo o lungo quanto la finestra.
  'se la larghezza era minore
  
  If (VideoBox.w < RightsidePanel.w) Then
    'e diventerà maggiore del riquadro visibile
    If (VideoBox.w + (VideoBox.w * adding) > RightsidePanel.w) Then
      'ricalcola quanto aggiungere in modo che videobox.w sia uguale a rightsidepanel.w
      Return (RightsidePanel.w - VideoBox.w) / VideoBox.w
    Endif
  Endif
  '...ugualmente per l 'altezza:
  If (VideoBox.h < RightsidePanel.h) Then
    'e diventerà maggiore del riquadro visibile
    If (VideoBox.h + (VideoBox.h * adding) > RightsidePanel.h) Then
      'ricalcola quanto aggiungere in modo che videobox.w sia uguale a rightsidepanel.w
      
      Return (RightsidePanel.h - VideoBox.h) / VideoBox.h
    Endif
  Endif
  
  Return adding
  
End

Public Sub VideoAreaGroup_MouseDown()
  
  mouseleft = mouse.left
  If FMain.mplayer.ProcessRunningOvr() Then fmain.VideoBox.setfocus 'needed to get keypress events
  IgnoreMouse = False
  
End

Public Sub VideoAreaGroup_KeyPress()
  
  Dim HotKey As String
  
  If ((Key.code = Key.space) And (Key.control) And (Key.shift) And (Key.alt)) Then Xt7Egg.show
  HotKey = HotKeyGrab.GetKey()
  HotKeyToMplayer(HotKey)
  
End

Public Sub VideoAreaGroup_MouseUp()
  
  Dim HotKey As String
  
  If GuiDragging Then
    guidragging = False
    Return
  Endif
  If Not IgnoreMouse Then
    HotKey = HotKeyGrab.GetMouse(False)
    HotKeyToMplayer(HotKey)
  Endif
  
  IgnoreMouse = True
  guidragging = False
  
End

Public Sub VideoAreaGroup_MouseWheel()
  
  Dim HotKey As String
  
  HotKey = HotKeyGrab.GetMouse(True)
  IgnoreMouse = True
  HotKeyToMplayer(HotKey)
  
End

'/HotKeys Handling *******************************************

Public Sub VideoAreaGroup_DblClick()
  
  If mouseleft And Not TagEditMode Then FullScreenSwitch()
  
End

Public Sub GeneralOptionsMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  
End

Public Sub ButtonNext_Click()
  
  Dim FromGrid As Boolean = True
  Dim Returnvalue As Boolean
  Dim mplayerwasrunning As Boolean = False
  
  Try mplayerwasrunning = mplayer.ProcessRunningOvr()
  OneSecTimer.stop
  
  fmain.mouse = mouse.wait
  fmain.SeekBar.Value = fmain.SeekBar.MinValue
  If TabSelectedPlaylist() Then
    MyPlaylist.SelectNext(PlaylistGrid, ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedLibrary() Then
    MyLibrary.SelectNext(LibraryGrid, ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedBrowse() Then
    BrowseSelectNext()
    Wait 0.025
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedCDDA() Then
    CDDANext()
    Wait 0.025
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedYoutube() Then
    Youtube.Select_NextTreeItem(youtubetree)
    Wait 0.025
    If mplayerwasrunning Or (TogglePls.value) Then
      youtubetitle = youtubetree.Current.text
      Debug "mplayer was off so hit play from here"
      Play(False, mplayer.Media_FullPath)
    Endif
  Else If TabSelectedShoutcast() Then
    If NOSAVEVBox3.visible Then  'shoutcastTree
      MyRadio.Select_NextTreeItem(genresTree)
      Wait 0.025
      If mplayerwasrunning Then Play(False, mplayer.Media_FullPath,,, GenresTree.Current.text)
    Else 'gridview
      MyRadio.Select_NextGridItem(ShutResultGrid)
      Wait 0.025
      If mplayerwasrunning Then Play(False, mplayer.Media_FullPath,,, ShutResultGrid[ShutResultGrid.row, 0].text)
    Endif
  Endif
  fmain.mouse = mouse.normal
  
End


Public Sub BrowseSelectNext()
  Dim obj As Object
  Dim tmpstr As String
  For Each obj In FileView1.Children
    Try tmpstr = obj.current.text
    If Not Error Then
      Try obj.movecurrent
      If Error Then Return
      
      Try obj.MoveBelow()
      If Error Then Return
      
      Try obj.item.selected = True
      If Error Then Return
      
      mplayer.media_fullpath = FileView1.dir & "/" & obj.item.text
    Endif
  Next

End


Public Sub BrowseSelectPrev()
  Dim obj As Object
  Dim tmpstr As String
  For Each obj In FileView1.Children
    Try tmpstr = obj.current.text
    If Not Error Then
      Try obj.movecurrent
      If Error Then Return
      
      Try obj.MoveAbove()
      If Error Then Return
      
      Try obj.item.selected = True
      If Error Then Return
      
      mplayer.media_fullpath = FileView1.dir & "/" & obj.item.text
    Endif
  Next

End



Public Sub ButtonPrev_Click()
  
  Dim FromGrid As Boolean = True
  Dim Returnvalue As Boolean
  Dim mplayerwasrunning As Boolean = False
  
  Try mplayerwasrunning = mplayer.ProcessRunningOvr()
  
  If TabSelectedPlaylist() Then
    MyPlaylist.SelectPrev(PlaylistGrid) ', ShufflePls.value)
    Wait 0.025
    If mplayer.ProcessRunningOvr() Then Play(FromGrid, mplayer.Media_FullPath)
  Else If TabSelectedLibrary() Then
    MyLibrary.SelectPrev(LibraryGrid) ', ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(FromGrid, mplayer.Media_FullPath)
  Else If TabSelectedCDDA() Then
    CDDAPrev()
    Wait 0.025
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedBrowse() Then
    BrowseSelectPrev()
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedYoutube() Then
    Youtube.Select_PrevTreeItem(youtubetree)
    Wait 0.025
    If mplayerwasrunning Then Play(False, mplayer.Media_FullPath)
  Else If TabSelectedShoutcast() Then
    If NOSAVEVBox3.visible Then  'shoutcastTree
      MyRadio.Select_PrevTreeItem(genresTree)
      Wait 0.025
      If mplayerwasrunning Then Play(False, mplayer.Media_FullPath,,, GenresTree.Current.text)
    Else 'gridview
      MyRadio.Select_PrevGridItem(ShutResultGrid)
      Wait 0.025
      If mplayerwasrunning Then Play(False, mplayer.Media_FullPath,,, ShutResultGrid[ShutResultGrid.row, 0].text)
    Endif
  Endif
  
End

'-----------------------------------
Private Sub GridKeyRelease(LibraryGrid As GridView, MyLibrary As PlaylistClass)
  
  Dim PrevScrollX, PrevScrollY As Integer
  
  If Key.code = Key.delete Then
    PrevScrollX = LibraryGrid.scrollx
    PrevScrollY = LibraryGrid.scrollY
    LibraryGrid.visible = False
    
    MyLibrary.DeleteSelected(LibraryGrid)
    If GeneralOptions.HighlightCHK.value Then
      Try DeHighLightVisible(librarygrid)
    Endif
    
    LibraryGrid.scrollx = PrevScrollX
    LibraryGrid.scrollY = PrevScrollY
    LibraryGrid.visible = True
    LibraryGrid.SetFocus
  Endif
  
End

Public Sub LibraryGrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(True)
    Return
  Endif
  GridKeyRelease(LibraryGrid, MyLibrary)
  LibraryGrid_Select()
  
End

Public Sub PlayListGrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(True)
    Return
  Endif
  GridKeyRelease(PlayListGrid, MyPlaylist)
  Playlistgrid_Select()
  
End

Public Sub dvbtgrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(True)
    Return
  Endif
  If Key.code = Key.delete Then
    If (MyQuestion.Ask("Delete Selected channel(s)?", "Delete", "Don't delete") = 1) Then
      MyDVBTList.DeleteSelected(DVBTGrid)
    Endif
  Endif
  DVBTGrid_select()
  
End
'-----------------------------------

Public Sub ConfigureBTN_click()
  
  AllOptions.show
  
End

Public Sub ConfigureChainsBTN_click()
  
  Chains.show
  
End

'-----------------------------------
Public Sub PlayListGrid_DblClick()
  
  Dim SelectedPath As String
  Dim myradiolabel As String
  
  Last.mouse = mouse.wait
  Try SelectedPath = PlaylistGrid[Playlistgrid.row, MyPlaylist.Columnindex["Full Path"]].text
  If (Not Error ) Then
    MyLibrary.AlreadyPlayedString.Push(SelectedPath)
  Endif
  If MouseInsideGrid(PlayListGrid) Then
    If (selectedpath Like "*dvd://*") Then dvd_device = GeneralOptions.DvdDeviceText.text
    If (selectedpath Like "http://*.pls") Or (selectedpath Like "http://*.pls\\?*") Then myradiolabel = PlaylistGrid[Playlistgrid.row, MyPlaylist.Columnindex["Filename"]].text
    Try Play(False, SelectedPath,,, myradiolabel)
  Endif
  Last.mouse = mouse.Default
  
End

Public Sub LibraryGrid_DblClick()
  
  Dim SelectedPath As String
  Dim myradiolabel As String
  
  Last.mouse = mouse.wait
  Try SelectedPath = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  If (Not Error ) Then
    MyLibrary.AlreadyPlayedString.Push(SelectedPath)
  Endif
  If MouseInsideGrid(Librarygrid) Then
    If (selectedpath Like "*dvd://*") Then dvd_device = GeneralOptions.DvdDeviceText.text
    If (selectedpath Like "http://*.pls") Or (selectedpath Like "http://*.pls\\?*") Then myradiolabel = LibraryGrid[librarygrid.row, MyLibrary.Columnindex["Filename"]].text
    Try Play(False, SelectedPath,,, myradiolabel)
  Endif
  Last.mouse = mouse.Default
  
End

Public Sub playselecteddvb()
  
  Dim SelectedPath As String
  Dim myradiolabel As String
  
  Last.mouse = mouse.wait
  Try SelectedPath = dvbtGrid[dvbtGrid.row, MyDVBTList.Columnindex["Full Path"]].text
  Try Play(False, SelectedPath)
  Last.mouse = mouse.Default
  
End

Public Sub dvbtGrid_DblClick()
  
  playselecteddvb()
  
End

Private Function MouseInsideGrid(Librarygrid As Gridview) As Boolean
  
  With LibraryGrid
    If (Mouse.screeny > .screeny + .Columns.Height + 1) And (Mouse.screeny < .screeny + .clientH + .Columns.Height + 1) Then
      If (Mouse.screenX < .screenx + .ClientW) Then
        Return True
      Endif
    Endif
  End With
  Return False
  
End
'-----------------------------------

Public Sub RefreshVisibleRows(mygrid As Gridview, mylibrary As Playlistclass)
  
  Dim TheColumn As Integer
  Dim R, FirstR, LastR As Integer
  Dim C, FirstC, LastC As Integer
  Dim TextW As Integer
  Dim Text As String
  
  If fmain.closing Then Return
  If MyGrid.Rows.count <= 0 Then Return
  FirstR = MyGrid.RowAt(MyGrid.y)
  LastR = MyGrid.RowAt(MyGrid.h)
  If LastR = -1 Then LastR = Mygrid.rows.count - 1
  If firstR = -1 Then firstR = 0
  
  FirstC = 0
  LastC = MyGrid.Columns.Count - 1
  
  Debug "Doing from " & FirstR & " - to " & LastR
  For R = FirstR To LastR
    Gridviews_Data(mygrid, mylibrary, R, 0)
  Next 'R
  
End

Public Sub RefreshVisibleCovers(mygrid As Gridview)
  
  Dim TheColumn As Integer
  Dim R, FirstR, LastR As Integer
  Dim C, FirstC, LastC As Integer
  Dim TextW As Integer
  Dim Text As String
  
  If fmain.closing Then Return
  If MyGrid.Rows.count <= 0 Then Return
  FirstR = MyGrid.RowAt(MyGrid.y)
  LastR = MyGrid.RowAt(MyGrid.h)
  If LastR = -1 Then LastR = Mygrid.rows.count - 1
  If firstR = -1 Then firstR = 0
  
  FirstC = 0
  LastC = MyGrid.Columns.Count - 1
  
  Debug "Doing from " & FirstR & " - to " & LastR
  For R = FirstR To LastR
    DeHighlightRow(R, mygrid)
  Next 'R
  If Lower(mygrid.name) = "playlistgrid" Then
    Try PlaylistGrid.refresh
  Else
    Try libraryGrid.refresh
  Endif
  
End

Public Sub MyLibrarySmartFill(LibraryGrid As GridView, MyLibrary As PlaylistClass)
  
  Dim FirstVisibleRow, LastVisibleRow As Integer
  Dim AlternateColors As Boolean = True
  
  With LibraryGrid
    FirstVisibleRow = .RowAt(.y + .Columns.height + 1)
    LastVisibleRow = .rowat(.y + .clienth)
    If (FirstVisibleRow < 0) Then FirstVisibleRow = 0
    If (LastVisibleRow < 0) Then LastVisibleRow = LibraryGrid.Rows.count - 1
    MyLibrary.FillRows(LibraryGrid, FirstVisibleRow, LastVisibleRow, AlternateColors)
  End With
  
End

Public Sub UpdateSearchResults(MyLibrary As PlaylistClass, LibraryGrid As Gridview, Optional autosize As Boolean = True, searchterm As String)
  'some gtk component problem here
  
  HideGrid(LibraryGrid)
  Debug
  LibraryGrid.clear
  MyLibrary.Search(LibraryGrid, Searchterm)
  If autosize Then
    MyLibrary.AutoSizeColumns(LibraryGrid)
    ' [GB2:FNTH] LibraryGrid.Rows.h = LibraryGrid.Font.Textheight("^_") + global.rowpadding
    LibraryGrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  Endif
  If fmain.fullyloaded Then ShowGrid(LibraryGrid)
  
End


Public Sub SearchField_KeyRelease()
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return

  If ((Len(Searchfield.text) > 2) Or (Len(Searchfield.text) = 0)) Then
      UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  Endif
  MenuLibraryZapSelected.enabled = (LibraryGrid.row > 0)
End


Public Sub SearchFieldPLS_KeyRelease()
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  If ((Len(Searchfieldpls.text) > 2) Or (Len(Searchfieldpls.text) = 0)) Then
      UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  MenuPlaylistZapSelected.enabled = (PlaylistGrid.row > 0)
End

Public Sub SearchField_Activate()
  Play(True)
  ComboHistory.AddHistory(Searchfield, Searchfield.text)
End
Public Sub SearchFieldPLS_Activate()
  Play(True)
  ComboHistory.AddHistory(SearchfieldPLS, SearchfieldPLS.text)
End

Public Sub SearchField_Click()
  UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  MenuLibraryZapSelected.enabled = (LibraryGrid.row > 0)
End

Public Sub SearchFieldPLS_Click()
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  MenuPlaylistZapSelected.enabled = (PlaylistGrid.row > 0)
End

'-----------------------------------
Public Sub LibraryGrid_ColumnClick(Column As Integer)
  
  ColumnClick(LibraryGrid, Mylibrary, column, Searchfield.text)
  
End

Public Sub PlaylistGrid_ColumnClick(Column As Integer)
  
  ColumnClick(PlayListGrid, MyPlaylist, column, SearchfieldPLS.text)
  
End

Public Sub dvbtGrid_ColumnClick(Column As Integer)
  
  ColumnClick(Dvbtgrid, MyDVBTList, column, SearchFieldDVB.text)
  
End

Public Sub ColumnClick(Grid As GridView, pls As PlaylistClass, column As Integer, search As String)
  
  Dim ClickedColumn As String = Grid.Columns[column].text
  Dim PrevScrollX As Integer = Grid.scrollX
  
  Grid.mouse = mouse.Wait
  pls.DoSort(ClickedColumn)
  UpdateSearchResults(pls, grid, fmain.FullyLoaded, search)
  grid.scrollX = PrevScrollX
  grid.mouse = mouse.Default
  
End
'-----------------------------------

Private Hsplit1ResizeDelayed As New Timer

Public Sub Hsplit1ResizeDelayed_timer()
  
  If Not fmain.fullscreen Then Hsplit1_MyRefresh
  
End

Public Sub Hsplit1_MyRefresh()
  
  Dim RightPanel As Integer = 0
  
  If (Not mplayer.audioonly) Then CorrectAreaAspect()
  If (rightsidepanel.width < (ControlPanel.w + 64)) Then
    If (BottomVbox.Parent.name <> "FMain") Then BottomVbox.Reparent(fmain)
  Else
    If (BottomVbox.Parent.name <> "RightSidePanel") And (Not (fmain.FullScreen)) Then BottomVbox.Reparent(RightSidePanel)
  Endif
  CostrainFormSizes()
  Try RightPanel = HSplit1.layout[1]
  If RightPanel = 0 Then
    OuterBox.Background = Me.Background
    VideoBox.visible = False
    audioform.AudioPanel.visible = False
    rightsidepanel.Background = Color.Background
  Else
    If Not TagEditMode Then
      OuterBox.Background = Color.black
      rightsidepanel.Background = Color.background
    Endif
    VideoBox.visible = True
    rightsidepanel.visible = True
    audioform.AudioPanel.visible = True
  Endif
  YouVideoInfo.w = scrollviewyt.w - 64

End

Public Sub HSplit1_Resize()
  
  If Not fmain.fullscreen Then Hsplit1_MyRefresh
  
End

Public Sub LibraryGrid_Menu()
  
  MenuLibraryZapSelected.Enabled = (LibraryGrid.row >= 0) 'popup removefromdisc menu item only of something is selected
  MenuOpenContainingFolderPopUp.visible = True
  MenuOpenContainingFolderPopUp.enabled = MyLibrary.OnlyOneSelected(librarygrid)
  Menupopuplibrary.Popup
  
End

Public Sub MenuOpenContainingFolderPopUp_Click()
  
  Dim item As String
  
  Try item = librarygrid[librarygrid.row, Mylibrary.ColumnIndex["Full Path"]].text
  If Error Then Return
  desktop.open(File.Dir(item))
  MenuOpenContainingFolderPopUp.visible = False
  
End

Public Sub MenuplaylistOpenFolder_Click()
  
  Dim item As String
  
  Try item = playlistgrid[playlistgrid.row, Myplaylist.ColumnIndex["Full Path"]].text
  If Error Then Return
  desktop.open(File.Dir(item))
  MenuplaylistOpenFolder.visible = False
  
End

Public Sub Playlistgrid_Menu()
  
  MenuplaylistOpenFolder.visible = True
  MenuplaylistOpenFolder.enabled = MyPlaylist.OnlyOneSelected(playlistgrid)
  MenuPlaylistZapSelected.Enabled = (PlaylistGrid.row >= 0) 'popup removefromdisc menu item only of something is selected
  MenuPlaylist.popup
  
End

Public Sub MenuLibraryUpdate_popup_Click()
  
  MenuLibraryUpdate_Click()
  
End

Public Sub MenuLibraryUpdate_Click()
  
  Dim removedfiles As String[]
  Dim Watcheddirs As String = ""
  Dim ExcludedDirs As String = ""
  Dim i, k, j, AnswerRemove As Integer
  
  If Not global.LSyncing Then
    'show the progressbar and disable library:
    Leftsidetabs[0].visible = True
    Leftsidetabs.Index = 0
    fmain.WaitPanel.visible = True
    MyLibraryProgressBar.value = 0
    MyLibraryProgressBar.visible = True
    MyLibraryProgressBar.h = 32
    playlistgrid.Enabled = False
    LibraryGrid.Enabled = False
    Librarygrid.visible = False
    Searchfield.Enabled = False
    Application.busy = True
    global.LSyncing = True
    fmain.WaitPanel.text = Global.LSyncingMessage
    fmain.mouse = mouse.Wait
    GeneralOptions.NOPARSEVBox2.mouse = Mouse.Wait
    GeneralOptions.NOPARSEVBox2.enabled = False
    Wait 0.1
    FMain.MenuLibraryUpdate_Click()
    Debug "Started at: " & Time
    
    'ask user if he wants to delete non existend files
    'AnswerRemove = Message.Question(("Do you also want to remove non existent files from library?"), ("Remove"), ("Don't remove"))
    AnswerRemove = MyQuestion.Ask(("Do you also want to remove non existent files from library?"), ("Remove"), ("Don't remove"))
    If AnswerRemove = 1 Then
      'remove non existing files
      removedfiles = MyLibrary.RemoveNonExisting()
    Endif
    
    For i = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
      WatchedDirs = Watcheddirs & GeneralOptions.NoParseWatchedListbox[i].text & "\n"
    Next 'i
    
    For i = 0 To GeneralOptions.NoParseExcludedListbox.count - 1
      'check if excludeddir is matched by included one, we need this to calculate total files number for progressbar...
      For j = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
        If (GeneralOptions.NoParseExcludedListbox[i].text) Like (GeneralOptions.NoParseWatchedListbox[j].text & "/*") Then
          ExcludedDirs = ExcludedDirs & GeneralOptions.NoParseExcludedListbox[i].text & "\n"
          Break
        Endif
      Next 'j
      
    Next 'i
    MyLibrary.FilesToProcess = Global.GetTotalFiles(WatchedDirs, False) - Global.GetTotalFiles(ExcludedDirs, False)
    MyLibraryProgressBar.value = 0 '(it will be updated by MyLibrary.add())
    
    'add every file found in watchedDirs
    For i = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
      MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
      Try MyLibrary.AddDir(LibraryGrid, GeneralOptions.NoParseWatchedListbox[i].text, GeneralOptions.NoParseExcludedListbox)
    Next 'i
    
    MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
    
    'reset the progressbar
    MyLibraryProgressBar.h = 0
    MyLibraryProgressBar.visible = False
    MyLibrary.FilesToProcess = 0
    MyLibrary.FilesProcessed = 0
    MyLibraryProgressBar.value = 0
    playlistgrid.Enabled = True
    LibraryGrid.Enabled = True
    LibraryGrid.visible = True
    fmain.WaitPanel.visible = False
    Searchfield.Enabled = True
    fmain.Mouse = mouse.Default
    
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
    global.LSyncing = False
    GeneralOptions.NOPARSEVBox2.mouse = Mouse.Default
    GeneralOptions.NOPARSEVBox2.enabled = True
    Debug "Ended at: " & Time
  Endif
  
End

Public Sub MenuLibraryWatch_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Library"), GeneralOptions.TabStrip1)
  
End



Public Sub SearchLabel_DblClick()
  
  Searchfields.show
  
End

Public Sub MenuItemsUpdate_Click()
  Debug "start at " & Time
  If LibraryGrid.Rows.count > 0 Then
    MyLibrary.UpdateSelected(LibraryGrid)
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  Endif
  Debug "end at " & Time
End

Public Sub MenuItemsUpdatePls_Click()
  If PlaylistGrid.Rows.count > 0 Then
    MyPlaylist.UpdateSelected(PlaylistGrid)
    SearchFieldPLS_Click()
  Endif
End

Public Sub CopyRow(SourceList As PlaylistClass, SourceRow As Integer, DestList As PlaylistClass)
  'Append SearchTable row from sourcelist into Ptable DestList
  DestList.Ptable.add(SourceList.SearchTable[SourceRow])
  
End

Private Sub FromLibraryToPlaylist()
  Dim r As Integer
  For r = 0 To LibraryGrid.Rows.count - 1
    If LibraryGrid.Rows[r].Selected Then CopyRow(MyLibrary, r, MyPlaylist)
  Next 'r
  UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
End

Public Sub MenuLibraryAddToPlaylist_Click()
  
  FromLibraryToPlaylist()
  
End

'-----------------------------------

Public Sub CalcTotalLengthInfoOn(MyLibrary As Playlistclass, Playlistgrid As Gridview, InfoWidget As Label)
  
  Dim row, count, Length As Integer
  Dim Answer As String[]
  Dim pretext, LotOfSpaces, PostText As String
  Dim TextW As Integer
  Dim FreeSpace, NeededSpaces As Integer
  Dim SpaceWidth As Integer = InfoWidget.Font.TextWidth(" ")
  
  answer = Split(MyLibrary.GetSelectedAndLength(Playlistgrid), ";")
  PreText = ("Selected: ") & answer[0] & "/" & answer[1]
  PostText = "[" & answer[2] & "] / [" & answer[3] & "]"
  InfoWidget.text = PreText & "  -  " & PostText
  
End

Private prevHigLibRow As Integer = -1

Public Sub LibraryGrid_Select()
  
  Dim HowMany As Integer
  
  If librarygrid.row >= 0 Then
    If GeneralOptions.HighlightCHK.value Then
      If (prevHigLibRow <> -1) Then Try DeHighlightRow(prevHigLibRow, librarygrid)
      HighlightRow(librarygrid.row, librarygrid, global.Highlightmore, True)
      prevHigLibRow = librarygrid.row
    Endif
  Endif
  HowMany = MyLibrary.HowManySelected(librarygrid)
  If howmany > 1 Then
    LibrarySelInfo.visible = True
    CalcTotalLengthInfoOn(Mylibrary, Librarygrid, LibrarySelInfo)
    mplayer.Media_FullPath = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  Else
    LibrarySelInfo.visible = False
  Endif
  Try mplayer.Media_FullPath = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  Try filetaglabel.text = MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Full Path")
  
  If Error Then Return
  tagbox1.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Album"))
  tagbox2.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Artist"))
  tagbox3.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Title"))
  tagbox4.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Year"))
  tagbox5.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Genre"))
  tagbox6.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Track"))
  tagbox7.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Comment"))
  
End

Private movingitems As Boolean = False

Public Sub PlayListGrid_Select()
  
  Dim HowMany As Integer
  
  If Movingitems Then Return 'spare cpu cycles when changing playlist items order
  'Debug
  If Playlistgrid.row >= 0 Then
    If GeneralOptions.HighlightCHK.value Then
      If (prevHigLibRow <> -1) Then Try DeHighlightRow(prevHigLibRow, Playlistgrid)
      HighlightRow(Playlistgrid.row, Playlistgrid, global.Highlightmore, True)
      prevHigLibRow = Playlistgrid.row
    Endif
  Endif
  HowMany = MyPlaylist.HowManySelected(playlistgrid)
  If howmany > 0 Then
    PlayListSelInfoBox.visible = True
    PlayListSelInfo.visible = True
    CalcTotalLengthInfoOn(Myplaylist, playlistgrid, playlistSelInfo)
  Else
    PlayListSelInfoBox.visible = False
    PlayListSelInfo.visible = False
  Endif
  Try mplayer.Media_FullPath = PlaylistGrid[PlaylistGrid.row, MyPlaylist.Columnindex["Full Path"]].text
  Try filetaglabel.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Full Path")
  
  If Error Then Return
  tagbox1.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Album")
  tagbox2.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Artist")
  tagbox3.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Title")
  tagbox4.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Year")
  tagbox5.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Genre")
  tagbox6.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Track")
  tagbox7.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Comment")
  
End

Public Sub dvbtgrid_Select()

  Try mplayer.Media_FullPath = dvbtgrid[dvbtgrid.row, MyDVBTList.Columnindex["Full Path"]].text
  Try filetaglabel.text = MyDVBTList.GetValue(MyDVBTList.SearchTable[dvbtgrid.row], "Full Path")
  If Error Then Return

End


Public Sub MenuSearch_Click()
  
  Searchfields.show
  
End

Public Sub UpdateTabs()
  'force a select to handle the correct item to tag
  
  If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Else If TabSelectedPlaylist() Then
    PlaylistGrid_Select()
  Else If TabSelectedShoutcast() Then
    If fullyloaded Then ShoutCast_Select()
  Else If TabSelectedyoutube() Then
    If fullyloaded Then Youtube_Select()
  Endif

  HBox2.visible = (TabSelectedLibrary() Or TabSelectedPlaylist() Or tabselectedcdda() Or TabSelectedBrowse())
  SearchLabel.enabled = Not (tabselectedcdda() Or tabselectedbrowse())
  Searchfield.enabled = SearchLabel.enabled
  SearchfieldPLS.enabled = SearchLabel.enabled
  shufflepls.enabled = SearchLabel.enabled
  
  If (TabSelectedLibrary() Or TabSelectedPlaylist()) And Fmain.fullyloaded And Fmain.visible Then
    'global variables used to track the las item highlighted are shared
    'by playlistgrid and librarygrid, so when we switch between them, we need to
    'dehighlight the last one
    If TabSelectedPlaylist() Then
      If PrevHigRow <> Librarygrid.row Then Try DeHighlightRow(PrevHigRow, librarygrid)
    Else
      If PrevHigRow <> Playlistgrid.row Then Try DeHighlightRow(PrevHigRow, Playlistgrid)
    Endif
  Endif
  
End

Public Sub Leftsidetabs_MouseWheel()
  
  UpdateTabs()
  
End

Public Sub LeftSideTabs_Click()
  Dim tablib, tabpls As Boolean
  tablib = TabSelectedLibrary()
  tabpls = TabSelectedPlaylist() Or TabSelectedBrowse()
  
  UpdateTabs()
  If TabSelectedyoutube() Then 
    TogglePls.Reparent(hbox13)
      Else 
    TogglePls.Reparent(hbox2)
  Endif
  
  If fmain.fullyloaded Then 
    TagEditorBtn.enabled = TabLib Or TabPls
  Endif
  
  Searchfield.Visible = tablib
  SearchfieldPLS.Visible = tabpls
  
End

Public Sub LeftSideTabs_KeyRelease()
  
  UpdateTabs()
  
End

Public Sub MenuAddUri_Click()
  
  AddUriForm.show
  
End

Public Sub OpenNetworkBTN_Click()
  
  AddUriForm.show
  
End

Public Sub MenuOpenUri_Click()
  
  AddUriForm.show
  
End

'---Playlist Cut/copy/paste/delete-------------------------------

Private ClipboardRows As New String[]

Public Sub MoveUpPlsBTN_MouseWheel()
  
  If mouse.Delta > 0 Then
    MoveUpPlsBTN_Click()
  Else
    MoveDownPlsBTN_Click()
  Endif
  
End

Public Sub MoveDownPlsBTN_MouseWheel()
  
  If mouse.Delta > 0 Then
    MoveUpPlsBTN_Click()
  Else
    MoveDownPlsBTN_Click()
  Endif
  
End

Public Sub MoveUpPlsBTN_Click()
  
  Dim FirstSelected, howmanyselected As Integer
  Dim i, j As Integer = 0
  
  MovingItems = True
  'find the index of the first selected row:
  While Not (playlistgrid.Rows[i].Selected Or i = playlistgrid.Rows.count)
    i = i + 1
  Wend
  If i > 0 Then
    If GeneralOptions.HighlightCHK.value Then DeHighlightRow(prevHigLibRow, Playlistgrid)
    MovingItems = True
    CutSelectedRows()
    howmanyselected = ClipboardRows.Count
    playlistgrid.scrolly = playlistgrid.scrolly - playlistgrid.Rows.H
    PasteSelectedRows(i - 1)
    
    'SELECT the items again:
    For j = (i - 1) To (i + HowManySelected - 2)
      playlistgrid.Rows[j].selected = True
    Next 'j
  Endif
  Wait 0.2
  MovingItems = False
  
End

Public Sub MoveDownPlsBTN_Click()
  
  Dim FirstSelected, howmanyselected As Integer
  Dim i, j As Integer
  Dim washighlighting As Boolean = False
  
  MovingItems = True
  'find the index of the Last selected row:
  i = playlistgrid.Rows.count - 1
  While Not (playlistgrid.Rows[i].Selected Or i = 0)
    i = i - 1
  Wend
  If i < (playlistgrid.Rows.count - 1) Then
    If GeneralOptions.HighlightCHK.value Then DeHighlightRow(prevHigLibRow, Playlistgrid)
    CutSelectedRows()
    howmanyselected = ClipboardRows.Count
    PasteSelectedRows(i - howmanyselected + 2)
    playlistgrid.scrolly = playlistgrid.scrolly + playlistgrid.Rows.H
    'SELECT the items again:
    For j = (i - howmanyselected + 2) To (i + 1)
      playlistgrid.Rows[j].selected = True
    Next 'j
  Endif
  Wait 0.2
  MovingItems = False
  
End

Public Sub PasteSelectedRows(Optional TargetRowOverride As Integer = -1)
  
  Dim i As Integer
  Dim TheRow As String = ""
  Dim TargetRow As Integer
  Dim TotalRows As Integer = ClipboardRows.count - 1
  Dim IsFile, IsURI, IsDirectory As Boolean
  Dim droppedfiles As String[]
  Dim DroppedFile As String
  
  If TargetRowOverride <> -1 Then
    TargetRow = TargetRowOverride
  Else
    TargetRow = Playlistgrid.row + 1
  Endif

  For i = 0 To (ClipboardRows.count - 1)
    If targetrow = -1 Then targetrow = PlayListGrid.Rows.count

    MyPlaylist.SearchTable.Add(ClipboardRows[totalrows - i], targetrow + i)
    MyPlaylist.PTable.Add(ClipboardRows[i], targetrow + i)
    PlayListGrid.Rows.Insert(targetrow + i)
    playlistgrid.Rows[targetrow + i].text = ClipboardRows[totalrows - i]
  Next 'i
  ClipboardRows.clear
  playlistgrid.row = targetrow
  playlistgrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  
End

Public Function CopySelectedRows()
  'prepare the dragging, fill draggingrows
  
  Dim i As Integer = PlayListGrid.Rows.count - 1
  
  ClipboardRows.clear
  While i >= 0 'for every selected rows in playlistgrid
    If PlayListGrid.Rows[i].selected Then
      ClipboardRows.Add(MyPlaylist.SearchTable[i]) 'copy the row from searchtable
    Endif
    i = i - 1
  Wend
  
End

Public Sub CutSelectedRows()
  
  CopySelectedRows()
  playlistgrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  MyPlaylist.DeleteSelected(Playlistgrid, True)

End

Public Sub MenuCopyRows_Click()
  
  CopySelectedRows()
  
End

Public Sub MenuCut_Click()
  
  CutSelectedRows()
  
End

Public Sub MenuPlaylistDelete_Click()
  
  MyPlaylist.DeleteSelected(Playlistgrid, True)
  If GeneralOptions.HighlightCHK.value Then
    Try DeHighLightVisible(playlistgrid)
  Endif
  
End

Public Sub MenuLibraryDeleteSelected_Click()
  
  MyLibrary.DeleteSelected(Librarygrid, True)
  'TRY LibraryGrid_Select()
  If GeneralOptions.HighlightCHK.value Then
    Try DeHighLightVisible(librarygrid)
  Endif
  
End

Public Sub MenuPaste_Click()
  
  PasteSelectedRows()
  
End

Public Sub MenuClearLibrary_Click()
  
  If Not (MyQuestion.ask(("Are you sure you want to clear your library?"), ("Don't clear my library"), ("Clear my library")) = 1) Then
    MyLibrary.clear(LibraryGrid)
    LibraryGrid_Select()
    UpdateSearchResults(mylibrary, librarygrid, True, Searchfield.text)
  Endif
  
End

Public Sub MenuPlaylistDeleteAll_Click()
  If Not (Message.delete(("Are you sure you want to clear the Playlist?"), ("Don't clear the playlist"), ("Clear the playlist")) = 1) Then
    MyPlaylist.clear(Playlistgrid)
    PlaylistGrid_Select()
    UpdateSearchResults(myplaylist, playlistgrid, True, SearchfieldPLS.text)
  Endif
End

'/---Playlist Cut/copy/paste/delete-------------------------------

Public Sub PlaylistGrid_Drop()
  
  Dim droppedfile, ext As String
  Dim droppedfiles As String[] = Split(Drag.data, "\n")
  Dim IsFile, IsDirectory, IsUri, IsPlayList As Boolean
  
  MyPlaylist.SyncSortedTable()  '<-necessary for MyPlaylist.isdupe() function
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      ISFile = False
      IsDirectory = False
      IsUri = False
      Try ISFile = (Stat(droppedfile, True).type = gb.file)
      Try IsDirectory = (Stat(droppedfile, True).type = gb.Directory)
      ext = Upper(File.Ext(Droppedfile))
      Try IsPlaylist = ((ext = "M3U") Or (ext = "PLS") Or (ext = "XPL"))
      IsUri = (droppedfile Like "*://*")
      If IsPlayList Then
        MyPlaylist.LoadFile(droppedfile, PlayListGrid, True)
      Else If IsFile Then
        MyPlaylist.AddFile(Playlistgrid, DroppedFile, False, False)
      Else If IsURI Then
        MyPlaylist.AddFile(Playlistgrid, Droppedfile, GeneralOptions.SlowTagsCHK.value, True)
      Else If IsDirectory 'we won't add directories to playlist
      Endif
    Endif
  Next
  UpdateSearchResults(myplaylist, playlistgrid, True, SearchfieldPLS.text)
  ScrollLeft()
  
End

Public Function DefaultLibraryIcon(fullpath As String) As Picture
  
  If Global.IsAudioFile(fullpath) Then
    Return picture["filetypeaudio.png"]
  Else If Global.IsVideoFile(fullpath) Then
    Return picture["filetypevideo.png"]
  Else If Global.IsDvbURI(fullpath) Then
    Return picture["filetypedvb.png"]
  Else If Youtube.IsYoutubeLink(fullpath) Then
    Return picture["youtubeicon.png"]
  Else If Global.IsNetworkURI(fullpath) Then
    Return picture["filetypeuri.png"]
  Else
    Return picture["filetypeunknown.png"]
  Endif
  
End

Public Sub Gridviews_Data(MyGrid As GridView, MyLibrary As Playlistclass, Row As Integer, Column As Integer)
  
  Dim fullpath As String
  Dim artist, album As String
  Dim rowheight As Integer
  
  If Not fmain.FullyLoaded Then Return
  If Not fmain.visible Then Return
  
  'draw an icon (or a cover) on the first column depending on the file extension
  If column = 0 Then
    Try fullpath = Mylibrary.CellValue(MyGrid, Row, Myplaylist.Columnindex["Full Path"])
    If (GeneralOptions.ShowCoversInListChk.value) And (mygrid.name <> "DVBTGrid") Then
      RowHeight = MyGrid.Rows[row].h - global.rowpadding
      artist = MyGrid[row, MyLibrary.ColumnIndex["Artist"]].text
      album = MyGrid[row, MyLibrary.ColumnIndex["Album"]].text
      Try MyGrid.Data.Picture = covermanager.coverpicture(CoverManager.coverfile(artist, album), fullpath, rowheight)
    Else
      MyGrid.Data.Picture = DefaultLibraryIcon(fullpath)
    Endif
  Endif
  
  If (row Mod 2) = 0 Then
    MyGrid.data.background = MyGrid.Background
  Else
    MyGrid.data.background = Global.Alternatecolor
  Endif
  MyGrid.data.text = MyLibrary.CellValue(MyGrid, row, column)
  
End

Public Sub LibraryGrid_Data(Row As Integer, Column As Integer)
  
  Gridviews_Data(LibraryGrid, mylibrary, Row, Column)

End

Public Sub PlaylistGrid_Data(Row As Integer, Column As Integer)
  
  Gridviews_Data(PlayListGrid, myplaylist, Row, Column)
  
End

Public Sub DVBTGRID_Data(Row As Integer, Column As Integer)
  
  Gridviews_Data(DVBTGrid, MyDVBTList, Row, Column)
  
End

Public Sub MenuManageProfiles_Click()
  
  ProfileManager.show
  
End

Public Sub CopySelectedToClipboard(MyLibrary As Playlistclass, MyGrid As Gridview)
  
  Dim i As Integer = MyGrid.Rows.count - 1
  Dim MyClipboard As String = ""
  Dim URI As String = ""
  
  While i >= 0 'for every selected rows in playlistgrid
    If MyGrid.Rows[i].selected Then
      URI = MyLibrary.GetValue(MyLibrary.SearchTable[i], "Full Path")
      If Not (URI Like "*://*") Then URI = "file://" & URI
      URI = URI & "\r\n"
      MyClipboard = MyClipboard & URI
    Endif
    i = i - 1
  Wend
  Clipboard.copy(MyClipboard, "text/uri-list")
  
End

Public Sub MenuPlsCopyToClipboard_Click()
  
  CopySelectedToClipboard(MyPlaylist, Playlistgrid)
  
End

Public Sub MenuLibCopyToClipboard_Click()
  
  CopySelectedToClipboard(MyLibrary, Librarygrid)
  
End

Public Sub ShowVolBtn2_Click()
  
  ButtonOpen_Click
  
End

Public Sub SwitchSubBtn_Click()
  
  If Streamssubtitlesmenu.enabled Then
    Streamssubtitlesmenu.Popup
  Else
    mplayer.Send("sub_select")
  Endif
  
End

Public Sub SwitchAudioBTN_Click()
  
  If Streamsaudiomenu.enabled Then
    Streamsaudiomenu.Popup
  Else
    mplayer.Send("Switch_Audio")
  Endif
  
End

Public Sub Form_Leave()
  
  MouseOnFmain = False
  
End

Public Sub Form_Enter()
  
  MouseOnFmain = True
  
End

Public Sub Statusbar1_DblClick()
  'Cycle through possible Timeformats:
  
  TimeFormat = TimeFormat + 1
  If Timeformat = 4 Then TimeFormat = 0
  
End

Public Sub FullScreenBtn_Click()
  
  If Not Tageditmode Then 
    FullScreenSwitch()
  Endif
  
End

Public Sub SlideTimer_Timer()
  'Hide and show bottom vbox smoothly
  
  Dim MaxHeigth As Integer = controlframe.h + Statusbar1.h
  
  If Not (BottomVbox.visible) Then BottomVbox.H = 0
  If DoslideUp Then
    If BottomVbox.H < MaxHeigth Then
      If (Not BottomVbox.visible) Then BottomVbox.visible = True
      If BottomVbox.h + 8 < MaxHeigth Then
        BottomVbox.h = BottomVbox.h + 8
      Else
        BottomVbox.h = MaxHeigth
      Endif
    Else
      SlideTimer.stop
    Endif
    
  Else If BottomVbox.H >= 8 Then
    BottomVbox.h = BottomVbox.h - 8
  Else
    SlideTimer.stop
    BottomVbox.Visible = False
  Endif
  
End

Public Sub MenuConfigureGeneralVideo_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.MenuLoadDefault_Click()
  GeneralOptions.AlreadyLoaded = True
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Video"), GeneralOptions.TabStrip1)
  GeneralOptions.show
  
End

Public Sub MenuConfigureGeneralAudio_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.MenuLoadDefault_Click()
  GeneralOptions.AlreadyLoaded = True
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName("Audio", GeneralOptions.TabStrip1)
  GeneralOptions.show
  
End

Public Sub MenuPlaylistZapSelected_Click()
  
  If (PlaylistGrid.row >= 0) Then
    If Not (MyQuestion.ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 1) Then
      
      MyPlaylist.EraseSelected(PlaylistGrid)
      MyPlaylist.DeleteSelected(Playlistgrid, True)
      Try playlistgrid.Current.EnsureVisible()
      If GeneralOptions.HighlightCHK.value Then
        Try DeHighLightVisible(playlistgrid)
      Endif
    Endif
  Endif
  
End

Public Sub MenuLibraryZapSelected_Click()
  
  If (LibraryGrid.row >= 0) Then
    If Not (MyQuestion.Ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 1) Then
      MyLibrary.EraseSelected(Librarygrid)
      MyLibrary.DeleteSelected(Librarygrid, True)
      Try LibraryGrid.Current.EnsureVisible()
      If GeneralOptions.HighlightCHK.value Then
        Try DeHighLightVisible(librarygrid)
      Endif
    Endif
  Endif
  
End

Public Sub MenuCodecs_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  AudioVideoCodecs.show
  
End

Public Sub Mysocket_Connection(RemoteHostIP As String)
  'just accept on localhost.
  
  host = Mysocket.Accept()
  
End

Public Sub socket_Read()
  
  Dim command As String = ""
  
  Line Input #Last, command
  Debug "command= " & command
  Mysocket.close
  ExecuteRemote(command)
  Mysocket.Listen(1)
  
End

Public Sub ExecuteRemote(command As String)
  Dim parameter As String
  Dim i As Integer
  parameter = Mid(command, InStr(command, " ") + 1)
  Debug "command= " & command
  Debug "parameter= " & parameter
  If command Like "append *" Then
    parameter = NoQuotes(parameter)
    Debug "URI= " & parameter
    MyPlaylist.AddFile(playlistgrid, parameter, MyPlaylist.ISURI(parameter), MyPlaylist.ISURI(parameter))
    MyPlaylist.AutoSizeColumns(playlistgrid)
    
  Else If command Like "play *" Then
    parameter = NoQuotes(parameter)
    Debug "URI= " & parameter
    ButtonStop_Click()
    fmain.raise
    fmain.Minimized = False
    Play(False, parameter)
  Endif
End

Public Function NoQuotes(quoted As String) As String
  ' '/home/user/song.mp3' ->/home/user/song.mp3
  
  Dim out As String
  
  If Left(quoted) = "'" And Right(quoted) = "'" Then
    out = Mid(quoted, 2, Len(quoted) - 2)
    Return out
  Else
    Return quoted
  Endif
  
End

Public Function Requote(toquote As String) As String
  ' 'ciao' -> 'ciao'
  ' "ciao" -> "ciao"
  ' ciao -> 'ciao'
  ' 'ciao -> ''ciao'
  ' 'ciao" -> ''ciao"'
  
  Dim out As String
  
  If Left(toquote) = "'" And Right(toquote) = "'" Then
    Return out
  Endif
  If Left(toquote) = "\"" And Right(toquote) = "\"" Then
    Return out
  Endif
  Return "'" & toquote & "'"
  
End

Public Sub MenuShowLog_Click()
  
  LogWindow.show
  
End

Public VolumeFocused As Boolean = False


Public Sub VideoAreaGroup_Enter()
  
  If mplayer.ProcessRunningOvr() Then fmain.VideoBox.setfocus
  If Lower(mplayer.Media_FullPath_Playing) Like "dvdnav*" Then
    timerdvd.enabled = True
  Else
    timerdvd.enabled = False
  Endif
  Fakesplit_Leave()
  
End

Public Sub VideoAreaGroup_GotFocus()
  
  VideoAreaGroup_Enter()
  
End

Public Sub VideoAreaGroup_Leave()
  
  timerdvd.enabled = False
  
End

Public Sub ShowVideoEq_Click()
  
  VideoEqualizer.visible = Not (VideoEqualizer.visible)
  
End

Public Sub ShowAudioEq_Click()
  
  AFiltersCfg.ShowFilterConfiguration("equalizer")
  AFiltersCfg.visible = Not AFiltersCfg.Visible
  
End

Public Sub MenuHomepage_Click()
  
  Desktop.Open("http://xt7player.homelinux.org/xt7forum")

End

Public Sub MenuToolBarLocked_Click()
  
  MenuToolBarLocked.checked = Not MenuToolBarLocked.checked
  SetFlexSpaceVisibility(Not MenuToolBarLocked.checked)
  
End

Public Sub MenuDvdDrive_Click()
  
  Me.mouse = mouse.wait
  dvd_device = GeneralOptions.DvdDeviceText.text
  Play(False, "dvd://")
  Me.mouse = mouse.default
  
End

Public Sub MenuDvdFolder_Click()
  
  If Dialog.SelectDirectory() Then Return
  dvd_device = DConv(Dialog.Path)
  Play(False, "dvd://")
  
End

Public Sub MenuDvdFile_Click()
  
  Dialog.filter = ["*.iso;*.ISO;*.Iso", ("iso files"), "*", ("All files")]
  If Dialog.OpenFile() Then Return
  dvd_device = DConv(Dialog.Path)
  Play(False, "dvd://")
  
End

Public Sub ButtonTag_Click()
  
  Dim tl As TagLib
  'Dim audiotag As New TagLib
  Dim MyGrid As GridView
  Dim Table As Playlistclass
  Dim row As Integer = 0
  Dim Filename, Album, Artist, Title, MyYear, Genre, Track, Comment As String
  Dim ts As String = Chr(8) ' use it as a marker to disable tag writing
  Dim Err As Boolean = False
  Librarygrid.enabled = False
  PlaylistGrid.enabled = False
  Last.enabled = False
  Fmain.mouse = mouse.Wait
  
  If TabSelectedLibrary() Then
    MyGrid = Librarygrid
    Table = MyLibrary
  Else If TabSelectedPlaylist() Then
    MyGrid = PlaylistGrid
    Table = MyPlaylist
  Endif
  
  'Tag the selected items
  For row = 0 To MyGrid.Rows.count - 1
    tl = New Taglib
    Filename = Table.GetValue(Table.SearchTable[row], "Full Path")
    filename = String$(1, filename) 'force a cast from string to string (?!)
    If MyGrid.Rows[row].selected Then
      If tl.Init(filename) Then 
        If AlbumCHK.value Then Err = (Err Or Not (tl.SetAlbum(tagbox1.text)))
        If ArtistCHK.value Then Err = (Err Or Not (tl.SetArtist(tagbox2.text)))
        If TitleCHK.value Then Err = (Err And Not (tl.SetTitle(tagbox3.text)))
        If GenreCHK.value Then Err = (Err And Not (tl.SetGenre(tagbox5.text)))
        If CommentCHK.value Then Err = (Err And Not (tl.SetComment(tagbox7.text)))
        If TrackCHK.value Then 
          If (Trim(tagbox6.text) <> "") Then Err = (Err And Not (tl.SetTrack(Trim(tagbox6.text))))
        Endif
        If YearCHK.value Then 
          If (Trim(tagbox4.text) <> "") Then Err = (Err And Not (tl.SetYear(Trim(tagbox4.text))))
        Endif
        If Not (err) Then
          tl.Save()
            Else
          Try tl.tlFree()
          Librarygrid.enabled = True 
          PlaylistGrid.enabled = True
          Last.enabled = True
          Fmain.mouse = mouse.default
          Return 
        Endif
        Mylibrary.UpdateTableAndGridTags(Librarygrid, Filename, tl.Album, tl.Artist, tl.Title, tl.MyYear, tl.Genre, tl.Track, tl.Comment)
        MyPlaylist.UpdateTableAndGridTags(Playlistgrid, Filename, tl.Album, tl.Artist, tl.Title, tl.MyYear, tl.Genre, tl.Track, tl.Comment)
      Endif
    Endif
  Next 'r
  If TabSelectedLibrary() Then
     Librarygrid.refresh
      Else If TabSelectedPlaylist() Then
     PlaylistGrid.refresh
  Endif
  Last.enabled = True
  Librarygrid.enabled = True
  PlaylistGrid.enabled = True  
  SearchField_Click()
  MyLibrary.AutoSizeColumns(Librarygrid)
  MyPlaylist.AutoSizeColumns(PlayListGrid)
  Fmain.mouse = mouse.default
  Wait 0.001
End

Public Sub EditTagModeSwitch1_Click()
  
  If Not fmain.FullScreen Then
    
    EditTagModeSwitch1.Checked = Not EditTagModeSwitch1.Checked
    TagEditMode = EditTagModeSwitch1.Checked
    If TagEditMode Then
      ShowAudioPanel(False)
      HBox4.background = Color.lighter(Color.Lighter((Hbox4.Parent.background)))
      ' [GB2:FCOL] HBox4.foreground = Color.black
      HBox4.Foreground = Color.black
      Rightsidepanel.background = rightsidepanel.Parent.Background
      BottomVbox.Reparent(zzzfake)
      tagpanel.Reparent(Rightsidepanel)
      BottomVbox.Reparent(rightsidepanel)
      tagpanel.visible = True
      
      OuterBox.visible = False
    Else
      Rightsidepanel.background = Color.Black
      tagpanel.visible = False
      
      OuterBox.visible = True
      If mplayer.ProcessRunningOvr() And mplayer.Media_AudioOnly() And GeneralOptions.CoverCHK2.value Then
        FillPropertiesGrid()
        CoverRefresh()
        ShowAudioPanel(True)
      Else
        ShowAudioPanel(False)
      Endif
    Endif
  Endif
  
End

Public Sub Clearer_Click()
  
  Try Last.NEXT.text = " "
  
End

Public Sub Button2_Click()
  
  If TabSelectedPlaylist() Then
    PlayListGrid_Select()
  Else If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Endif
  
End

Public Sub TagsCHK_Click()
  
  Last.next.next.enabled = Last.value
  
End

Public Sub TagsBox_GotFocus()
  
  Last.SELECTAll
  
End

Public Sub TagsBox_Activate()
  
  ButtonTag_Click()
  If AdvanceCHK.value Then
    If TabSelectedLibrary() Then
      MyLibrary.SelectNext(LibraryGrid, False)
    Else If TabSelectedPlaylist() Then
      MyPlayList.SelectNext(PlayListGrid, False)
    Endif
  Endif
  Last.setfocus
  
End

Public Sub MenuSavePls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    Dialog.Path = .StartFolder & "/"
    PrevFilter = Dialog.filter
    Prevtitle = Dialog.title
    Dialog.Title = "Export a playlist"
    Dialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If Dialog.SaveFile() Then Return
  Dialog.filter = PrevFilter
  Dialog.title = PrevTitle
  Try MyPlaylist.SaveAs(Dialog.Path)
  If Error Then Message.error(("There was an error while saving the playlist"), ("Ok"))
  
End

Public Sub MenuLoadPls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    Dialog.Path = .StartFolder
    PrevFilter = Dialog.filter
    Prevtitle = Dialog.title
    Dialog.Title = "Load a playlist"
    Dialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If Dialog.OpenFile() Then Return
  Dialog.filter = PrevFilter
  Dialog.title = PrevTitle
  MyPlaylist.LoadFile(Dialog.path, PlayListGrid)
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub MenuAppendPls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    Dialog.Path = .StartFolder
    PrevFilter = Dialog.filter
    Prevtitle = Dialog.title
    Dialog.Title = "Load a playlist"
    Dialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If Dialog.OpenFile() Then Return
  Dialog.filter = PrevFilter
  Dialog.title = PrevTitle
  MyPlaylist.LoadFile(Dialog.path, PlayListGrid, True)
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub SetACover(Album As String, Artist As String, filepath As String)
  
  Dim timeout As Integer = 15 ' how much to wait for the other fetch to finish
  Dim tmpmessage As String
  Dim JustFileCover As Boolean = False 'are we going to set a cover for just this file?
  Dim tl As New Taglib
  
  If CoverManager.fetching Then
    CoverManager.HitCancel = True
    Repeat
      Wait 0.1
      timeout = timeout - 1
    Until (CoverManager.fetching = False) Or (timeout = 0)
  Endif
  
  If Upper(filepath) Like "*.FLAC" Then
    If (Trim(Artist) = "") And (Trim(Album) = "") Then
      tl.init(filepath)
      Artist = tl.Artist
      Album = tl.Album
      tl.free()
    Endif
  Endif
  
  If (Trim(Artist) = "") And (Trim(Album) = "") Then
    JustFileCover = True
    tmpmessage = ("\nso you are going to set a cover for this particular file/stream")
    Message.Info(("Artist Or Album tag information are required to set a cover") & tmpmessage, ("Ok"))
  Endif
  CoverManager.cachebar.value = 0
  If CoverManager.fetching Then
    Message.Info(("Another cover search is in progress, please wait for it to finish!"), "Ok")
    Return
  Endif
  If (CoverManager.ArtistText.text & CoverManager.AlbumText.text) <> Trim(Artist) & Trim(Album) Then
    Try CoverManager.CoverList.Clear
    Try CoverManager.CachePicture.Picture = picture.Load("null.png")
    Try CoverManager.CoverList.Refresh
    Try CoverManager.CachePicture.refresh
    CoverManager.ArtistText.text = Trim(Artist)
    CoverManager.AlbumText.text = Trim(Album)
    CoverManager.TextBox1.text = CoverManager.ArtistText.text & "," & CoverManager.AlbumText.text
    CoverManager.CachePicture.picture = AudioForm.CoverBox.Picture
    CoverManager.CachePicture.refresh
    CoverManager.Show()
    Wait 0.1
    If (Not Exist(CoverManager.Coverfile(CoverManager.ArtistText.text, CoverManager.AlbumText.text))) And Not JustFileCover Then
      CoverManager.textbox1_Click() 'start a fetch
    Endif
  Endif
  CoverManager.JustFileCover = JustFileCover
  CoverManager.MediaFileFullPath = filepath
  CoverManager.Show
  
End

Public Sub CoverBox_DblClick()
  
  Dim timeout As Integer = 15 ' how much to wait for the other fetch to finish
  Dim tmpmessage As String
  Dim JustFileCover As Boolean = False 'are we going to set a cover for just this file?
  Dim tl As New TagLib
  
  If CoverManager.fetching Then
    CoverManager.HitCancel = True
    Repeat
      Wait 0.1
      timeout = timeout - 1
    Until (CoverManager.fetching = False) Or (timeout = 0)
  Endif
  
  If Upper(mplayer.Media_FullPath) Like "*.FLAC" Then
    If (Trim(mplayer.Media_Artist) = "") And (Trim(mplayer.Media_Album) = "") Then
      tl.init(mplayer.Media_FullPath)
      mplayer.Media_Artist = tl.Artist
      mplayer.Media_Album = tl.Album
      tl.tlFree()
    Endif
  Endif
  
  If (Trim(mplayer.Media_Artist) = "") And (Trim(mplayer.Media_Album) = "") Then
    JustFileCover = True
    tmpmessage = ("\nso you are going to set a cover for this particular file/stream")
    Message.Info(("Artist Or Album tag information are required to set a cover") & tmpmessage, ("Ok"))
  Endif
  CoverManager.progressbar1.value = 0
  If CoverManager.fetching Then
    Message.Info(("Another cover search is in progress, please wait for it to finish!"), "Ok")
    Return
  Endif
  If mplayer.ProcessRunningOvr() Then
    If mplayer.Media_AudioOnly() Then
      If (CoverManager.ArtistText.text & CoverManager.AlbumText.text) <> Trim(mplayer.Media_Artist) & Trim(mplayer.Media_Album) Then
        Try CoverManager.CoverList.Clear
        Try CoverManager.FlexSpace.Picture = picture.Load("null.png")
        Try CoverManager.CoverList.Refresh
        Try CoverManager.FlexSpace.refresh
        CoverManager.ArtistText.text = Trim(mplayer.Media_Artist)
        CoverManager.AlbumText.text = Trim(mplayer.Media_Album)
        CoverManager.TextBox1.text = CoverManager.ArtistText.text & "," & CoverManager.AlbumText.text
        CoverManager.picturebox1.picture = AudioForm.CoverBox.Picture
        CoverManager.picturebox1.refresh
        CoverManager.Show()
        Wait 0.1
        If (Not Exist(CoverManager.Coverfile(CoverManager.ArtistText.text, CoverManager.AlbumText.text))) And Not JustFileCover Then
          CoverManager.textbox1_Click() 'start a fetch
        Endif
      Endif
      CoverManager.JustFileCover = JustFileCover
      CoverManager.MediaFileFullPath = mplayer.Media_FullPath
      CoverManager.Show
    Endif
  Endif
  
End

Public Sub CloseTagEdBtn_Click()
  
  EditTagModeSwitch1_Click()
  
End

Public Sub DynaGuiToolbar_Menu()
  
  MenuConfigure.Popup()
  
End

Public Sub CompizHackTimer_Timer()
  
  'why compiz does not update itself?
  Fmain.x = fmain.screenx
  Fmain.y = fmain.screeny
  
End

Public Sub ShutOff_Click()
  
  ShutOFF.Checked = True
  ShutMEDIA.Checked = False
  ShutPLS.Checked = False
  Shutdown = "FALSE"
  Statusbar1.foreground = &F0F0F0&
  
End

Public Sub ShutMEDIA_Click()
  
  ShutOFF.Checked = False
  ShutMEDIA.Checked = True
  ShutPLS.Checked = False
  Shutdown = "MEDIA"
  Statusbar1.foreground = &FF5555&
  
End

Public Sub ShutPLS_Click()
  
  If ShufflePls.value Then
    Message.Warning(("Please, disable random playing first!"))
  Else
    If TogglePls.value = False Then TogglePls.value = True
    ShutOFF.Checked = False
    ShutMEDIA.Checked = False
    ShutPLS.Checked = True
    Shutdown = "PLS"
    Statusbar1.foreground = &FF8888&
  Endif
  
End

Public Sub Shutcfg_Click()
  
  GeneralOptions.Show()
  GeneralOptions.OptionsList["Misc"].selected = True
  
End

Public Sub AutoresizeAudioForm()
  
  Dim oggetto As Object
  Dim MaxLabel_12__16 As Integer = 0
  Dim MaxLabel_18__21 As Integer = 0
  Dim upperboxW As Integer = 0
  Dim lowerboxW As Integer = 0
  Dim labelheight As Integer
  
  For Each oggetto In audioform.VBox2.children
    If oggetto Is Label Then
      If oggetto.Font.TextWidth(oggetto.text) > MaxLabel_12__16 Then MaxLabel_12__16 = oggetto.Font.TextWidth(oggetto.text)
      
      'PRINT "oggetto.text = " & oggetto.Font.TextWidth(oggetto.text) & " text= " & " " & oggetto.text 
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox4.children
    If oggetto Is Label Then
      If oggetto.Font.TextWidth(oggetto.text) > MaxLabel_18__21 Then MaxLabel_18__21 = oggetto.Font.TextWidth(oggetto.text)
    Endif
  Next 'oggetto

  upperboxW = 300 + vbox1.w + MaxLabel_12__16 ' +32 '++Relevant correction
  lowerboxW = audioform.VBox3.w + MaxLabel_18__21 '+32 '++Relevant correction
  audioform.vbox5.w = Max(upperboxW, lowerboxW) + 32
  hbox2.w = upperboxW + 16
  hbox1.w = lowerboxW + 16
  audioform.VBox4.w = MaxLabel_18__21 + 32 '+ 32 '++Relevant correction
  audioform.VBox2.w = MaxLabel_12__16 + 32 '+ 32 '++Relevant correction
  
  
  labelheight = Label2.Font.TextHeight("IJ") + (Label2.Font.TextHeight("IJ") Div 2)
  
  For Each oggetto In audioform.VBox1.children
    If oggetto Is Label Then
     oggetto.h = labelheight
     oggetto.w = oggetto.Font.TextWidth(oggetto.text)
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox3.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox2.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
      'oggetto.w = 2000
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox4.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
      'oggetto.w = 2000
    Endif
  Next 'oggetto
  
End


Public Sub TrayIcon1_MouseDown()
  
  If mouse.left Then
    fmain.visible = Not fmain.visible
  Endif
  
End

Public Sub TrayIcon1_Menu()
  
  OverlaytrayTip.hide
  MenuMain.popup
  
End

Public Sub TrayIcon1_MouseWheel()
  
  If mouse.delta > 0 Then
    SaveVolumeSlider.value = SaveVolumeSlider.value + 1
  Else
    SaveVolumeSlider.value = SaveVolumeSlider.value - 1
  Endif
  
End

Public Sub TrayIcon1_Enter()
  
  If mplayer.ProcessRunningOvr() Then
    OverlaytrayTip.Redraw("..:Xt7-Player::.", Last.screenx - (TrayIcon1.w), Last.screeny - (OverlayTrayTip.h))
    OverlaytrayTip.show
  Endif
  
End


Public Function ObjectByName(Objectname As String) As Object
  
  Dim obj As Object
  
  For Each obj In Me.Controls
    If Upper(obj.name) = Upper(Objectname) Then
      Debug "found" & objectname
      Return obj
    Else
      Print Upper(objectname) & " differ from " & Upper(obj.name)
    Endif
  Next
  Return Null
  
End

Public Sub FlashCHK_Click()
  
  If FlashCHK.value = True Then
    timerflash.start
    Flashgrid.enabled = True
  Else
    timerflash.stop
    FlashGrid.enabled = False
    FlashCHK2.value = False
  Endif
  
End

Public Sub TimerFlash_Timer()
  
  Try MyFlash.UpdateGrid()
  
End

Public Sub FlashGrid_DblClick()
  
  Dim SelectedPath As String
  
  Try SelectedPath = Last[Last.row, 1].text
  If (Not Error ) Then
    If MouseInsideGrid(Last) Then
      Try Play(False, SelectedPath)
    Endif
  Endif
  
End

Public Sub FlashGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    FlashGrid_DblClick()
  Endif
  
End

Public Sub FlashGrid_Menu()
  
  FlashMenuStopRecording.enabled = False
  Try FlashMenuStopRecording.enabled = MyFlash.IsRecording(Flashgrid[Flashgrid.row, 1].text)
  FlashMenuRecordas.enabled = Flashgrid.row >= 0
  FlashMenuDelete.enabled = Flashgrid.row >= 0
  MenuFlash.Popup
  
End

Public Sub FlashMenuRecordAs_Click()
  
  Dialog.Title = ("Choose a destination file")
  If Dialog.SaveFile() Then Return ' User pressed Cancel -
  MyFlash.Record(Flashgrid[Flashgrid.row, 1].text, Dialog.path)
  
End

Public Sub FlashMenuStopRecording_Click()
  
  MyFlash.StopRecord(Flashgrid[Flashgrid.row, 1].text)
  
End

Public Sub FlashMenuDelete_Click()
  
  MyFlash.delete(Flashgrid[Flashgrid.row, 1].text)
  
End

Public Sub FlashCHK2_Click()
  
  If FlashCHK2.value = True Then
    FlashCHK.value = True
    FlashCHK_Click()
  Endif
  
End

Public Sub MyFlash_NewVideo(lastvideopath As String) 'when a new flash video is found, this event is raised

  Dim Question As String = ("New Flash(tm) video detected: \n") & lastvideopath & ("\n  Would you like to play it now in Xt7-Player?")
  Dim AnotherQuestion As New MyQuestion
  
  If FlashCHK2.value = True Then
    If MyQuestion.Ask(Question, ("Play now"), ("Don't Play"), FlashCHK2.text, FlashCHK2) = 1 Then
      Fmain.Play(False, lastvideopath)
      Fmain.Show
    Endif
  Endif
  
End

Public Sub LeftSideTabs_Menu()
  
  UpdateMenuTabVisibility()

  MenuTabs.popup
End


Private TabsonLeftMenu As Menu

Public Sub UpdateMenuTabVisibility()
  'enable/disable menu voices
  
  Dim i, j As Integer
  Dim profile As String
  Dim submenu, submenu2, pmenu As Menu '(hide/show,go to tab)
  Dim HideShowTabsMenu As Menu '(visibility)
  Dim GoToTabMenu As Menu '(Go to tab)
  Dim WasInvisible As Boolean
  Dim tmpmenu As Menu
  
  MenuTabs.Children.Clear
  TabsonleftMenu = New Menu(Menutabs) As "tabsonleftmenu"
  TabsonLeftMenu.text = ("Use vertical tabs")
  TabsonleftMenu.Picture = picture["icon:/16/previous"]
  TabsonleftMenu.checked = GeneralOptions.TabsOnLeftCHK.value
  HideShowTabsMenu = New Menu(menutabs)
  HideShowTabsMenu.name = "HideShowTabsMenu"
  HideShowTabsMenu.Text = "Hide/Show tabs"
  HideShowTabsMenu.Picture = picture["icon:/16/watch"]
  
  For i = 0 To Leftsidetabs.count - 1
    WasInvisible = Not (Leftsidetabs[i].visible) 'we need the caption of the tab which is lost if it is invisible,
    Leftsidetabs[i].visible = True

    If Not (TabSelectedDVDAt(i) Or TabSelectedCDDAAt(i)) Then
      submenu2 = New Menu(menutabs) As "menutabs"
      SubMenu = New Menu(HideShowTabsMenu) As "HideShowTabMenu"
      Submenu.name = Leftsidetabs[i].text
      Submenu.text = ("Show") & " " & Leftsidetabs[i].text
      Submenu2.text = Leftsidetabs[i].text
      Submenu2.name = Leftsidetabs[i].text
      Submenu2.picture = Leftsidetabs[i].Picture
      Submenu.picture = Leftsidetabs[i].Picture
      If WasInvisible Then Leftsidetabs[i].Visible = False
      SubMenu.checked = Leftsidetabs[i].Visible
      submenu2.enabled = Leftsidetabs[i].Visible
    Endif
    If WasInvisible Then Leftsidetabs[i].Visible = False
    If IsProfileTab(i) Then 
      ' pmenu = New Menu(submenu2)
      ' pmenu.text = "prova"
      For j = 0 To ProfilesListBox.count - 1
          pmenu = New Menu(submenu2) As "menuprofileselect"
          pmenu.text = ProfilesListBox[j].Text
          pmenu.tag = ProfilesListBox[j].Text
          pmenu.Checked = (global.CurrentProfile = pmenu.tag)
          If (Not pmenu.checked) Then pmenu.picture = picture["icon:/16/properties"]
      Next
    Endif
    
  Next 'i
  
End


Public Function IsProfileTab(i As Integer) As Boolean
  Dim theobject As Object
  For Each theobject In Leftsidetabs[i].Children
    If theobject Is Label Then
      If theobject.tag = "profiles" Then Return True
    Endif
  Next 'theobject
  Return False
End


Public Sub menutabs_click()

  Dim i As Integer
  Dim ClickedtabID As Integer

  ClickedtabID = Global.TabIndexByName(Last.name, Leftsidetabs)
  Leftsidetabs.Refresh
  If (ClickedTabId <> -1) Then Leftsidetabs.index = ClickedtabID
  
End

Public Sub menuprofileselect_Click()
  Global.CurrentProfile = Last.tag
  ReLoadCurrentProfile()
  UpdateProfilesTabList()
End


Private Sub TabOrientation()
  
  Dim tmplayout As Integer[] = hsplit1.layout
  
  If GeneralOptions.TabsOnLeftCHK.value Then 
    Leftsidetabs.Orientation = 1
  Else
    Leftsidetabs.Orientation = 19
  Endif
  
  If fmain.fullyloaded Then  'force an update
    tmplayout[1] = tmplayout[1] - 1
    tmplayout[0] = tmplayout[0] + 1
    hsplit1.Layout = tmplayout
  Endif
  
End

Public Sub tabsonleftmenu_Click()
  
  GeneralOptions.TabsOnLeftCHK.value = Not GeneralOptions.TabsOnLeftCHK.value
  TabOrientation()
  
End

Public Sub HideShowTabMenu_click()
  
  Dim i As Integer
  Dim WasInvisible As Boolean
  Dim ClickedtabID As Integer
  
  Last.checked = Not Last.checked
  For i = 0 To Leftsidetabs.count - 1
    WasInvisible = Not (Leftsidetabs[i].visible) 'we need the caption of the tab which is lost if it is invisible,
    Leftsidetabs[i].visible = True                'so make it temporally visible, and remember
    If Leftsidetabs[i].text = Last.name Then
      Leftsidetabs[i].Visible = Last.checked
    Else
      If WasInvisible Then Leftsidetabs[i].Visible = False
    Endif
  Next 'i
  'Focus the clicked Tab
  ClickedtabID = Global.TabIndexByName(Last.name, Leftsidetabs)
  Leftsidetabs.Refresh
  If (ClickedTabId <> -1) Then Leftsidetabs.index = ClickedtabID
  
End

Public Function IsTabVisible(tabname As String) As Boolean
  
  Dim i As Integer
  
  For i = 0 To Leftsidetabs.count - 1
    Print tabname
    If Leftsidetabs[i].text = tabname Then
      If Leftsidetabs[i].Visible Then Return True
    Endif
  Next 'i
  Return False
  
End



Public Sub UpdateProfilesTabList()
  
  Dim profilename As String
  Dim i As Integer
  
  ProfilesListBox.clear
  For Each profilename In Dir(global.confpath & "/", "*.profile")
    If Stat(global.confpath & "/" & profilename, True).type = gb.Directory Then
      ProfilesListBox.Add(Split(profilename, ".")[0])
    Endif
  Next
  ProfilesListBox.sorted = True
  For i = 0 To ProfilesListBox.count - 1
    If ProfilesListBox[i].text = Global.currentprofile Then ProfilesListBox[i].selected = True
  Next 'i
  CurrentProfileLabel.text = ("Current profile: ") & " " & Global.currentprofile
  
End

Public Sub ProfileDeleteBTN_Click()

  Dim profilename As String
  Try ProfileName As String = ProfilesListBox.Current.text & ".profile"
  If Not Error Then
    If ProfileName <> "Factory_Defaults.profile" Then
      If ProfileName = Global.currentprofile & ".profile" Then
        Message.Error(("You can't delete the current profile!"), "Understood")
        Return
      Endif
      If MyQuestion.Ask(("Are you sure you want to delete ") & ProfilesListbox.Current.Text & "?", ("Yes, Delete"), ("Don't delete")) = 1 Then
        Try RDelete(global.confpath & "/" & ProfileName)
        Try UpdateProfilestablist()
        Try ProfileManager.UpdateProfilelist()
      Endif
    Else
      Message.Error(("This is a read-only profile"))
    Endif
  Endif
  
End

Public Sub RDelete(directory As String)
  
  Dim subfile As String
  
  For Each subfile In RDir(directory)
    Try Kill directory & "/" & subfile
    Try Rmdir directory & "/" & subfile
  Next
  For Each subfile In RDir(directory)
    Try Kill directory & "/" & subfile
    Try Rmdir directory & "/" & subfile
  Next
  Try Rmdir directory
  
End

Public Sub ProfilesListBox_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    ProfilesListBox_DblClick()
  Endif
  
End

Public Sub ProfilesListBox_DblClick()
  
  ProfileLoadBTN_Click()
  
End

Public Sub ReLoadCurrentProfile()
  'DIM TheError AS Boolean = FALSE
  
  Try Global.ReallyLoadAllSettings() 'current profile is the default
  Try GeneralOptions.LoadWatchDir(global.confpath & "/" & global.CurrentProfile)
  Try GeneralOptions.LoadExcludeDir(global.confpath & "/" & global.CurrentProfile)
  Try HotKeys.LoadHotKeys(global.confpath & "/" & global.CurrentProfile)
  
  Try ComboHistory.LoadHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Searchfielddvb, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Fmain.UrlBox, global.confpath & "/" & global.CurrentProfile)
  FMain.SetStyle_early()
  FMain.SetStyle_later()
  UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub ProfileLoadBTN_Click()
  Dim i As Integer
  Try Global.CurrentProfile = ProfilesListBox.Current.text
  If Error Then
    For i = 0 To ProfilesListBox.count - 1
      If ProfilesListBox[i].selected Then 
        Global.CurrentProfile = ProfilesListBox[i].text
        Break
      Endif
    Next
  Endif
  ReLoadCurrentProfile()
  UpdateProfilesTabList()
End





Public Sub ProfileRenameBTN_Click()
  
  Dim Source, Destination, DestinationAnswer As String
  
  If ProfilesListbox.Current.Text <> "Factory_Defaults" Then
    DestinationAnswer = Replace(Trim(MyAskName.Ask(("Enter the new profile name"))), ".", "_")
    If Trim(DestinationAnswer) <> "" Then
      Source = global.confpath & "/" & ProfilesListbox.Current.Text & ".profile"
      Destination = global.confpath & "/" & DestinationAnswer & ".profile"
      Move Source To Destination
      If Not Error Then
        If ProfilesListbox.Current.Text = Global.currentProfile Then Global.currentProfile = DestinationAnswer
      Endif
    Endif
    Try UpdateProfilestablist()
  Else
    Message.Error(("This is a read-only profile"))
  Endif
  
End

Public Sub ProfileSaveBTN2_Click()
  
  If ProfilesListbox.Current.Text <> "Factory_Defaults" Then
    If MyQuestion.Ask(("You are going to overwrite the selected profile\nwith the current settings."), ("I know, proceed"), ("Cancel")) = 1 Then
      ReallySaveAllSettings(Replace(ProfilesListbox.Current.Text, ".", "_"))
    Endif
  Else
    Message.Error(("This is a read-only profile"))
  Endif
  
End

Public Sub ProfileSaveBTN_Click()
  
  Dim NewProfileName As String
  
  NewProfileName = MakeNewProfile()
  If NewProfileName <> "" Then
    ReallySaveAllSettings(NewProfileName)
  Endif
  
End

Public Sub ProfileMakeNewBTN_Click()
  
  Dim NewProfileName, Source, Destination As String
  
  NewProfileName = MakeNewProfile()
  If NewProfileName <> "" Then
    Source = global.confpath & "/" & "Factory_Defaults.profile"
    Destination = global.confpath & "/" & NewProfileName & ".profile"
    Try Shell "cp -a " & Source & "/* " & Destination Wait
  Endif
  
End

Public Function MakeNewProfile() As String
  
  Dim DestinationAnswer As String = ""
  
  DestinationAnswer = Trim(MyAskName.Ask(("Enter a name for the new profile:")))
  If Trim(DestinationAnswer) <> "" Then
    DestinationAnswer = Replace(DestinationAnswer, ".profile", "")
    DestinationAnswer = Replace(DestinationAnswer, " ", "_")
    DestinationAnswer = Replace(DestinationAnswer, ".", "_")
    If Trim(DestinationAnswer) <> "" Then
      Try Mkdir global.confpath & "/" & (Replace(DestinationAnswer, ".", "_")) & ".profile"
      If Not Error Then
        UpdateProfilesTabList()
        Return DestinationAnswer
      Else
        Return ""
      Endif
    Endif
  Endif
  
End

Public Sub PropertiesGrid_Menu()
  
End

Public Sub ProfilesListBox_Menu()
  
End

Public Sub ToolPanel1_Click()
  
End

Public Sub Button3_Click()
  
  Dim HotKeyConfigured As Boolean = True
  Dim tmpstr As String
  Dim Rewind As Boolean = True
  'HotKeysCheck First  
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[73, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[74, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[75, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[76, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[77, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[78, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[79, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[80, 0].text) <> "")
  
  If Not HotKeyConfigured Then
    MyQuestion.Ask(("No hotkeys defined for dvd navigation mode\nPlease configure dvdnav hotkeys first."), "Ok", "")
    Return
  Endif
  

   OneSecTimer.start
  mplayer.do_restart("dvdnav://", mplayer.CurrentOptions & " -nocache ", Not rewind)
  fmain.VideoBox.setfocus
 
  
End

Public Sub TimerDVD_Timer()

  Try mplayer.Send("set_mouse_pos " & (mouse.screenx - VideoBox.screenx) & " " & (mouse.screeny - VideoBox.screeny))
  
End

Public Sub ButtonGetGenres_Click()
  
  Leftsidepanel.mouse = mouse.wait
  Try MyRadio.GetGenres(GenresTree)
  Leftsidepanel.mouse = mouse.normal
  
End

Public Sub GenresTree_Click()
  
  Dim IsChild As Boolean = False
  
  IsChild = Not (GenresTree.moveparent())
  GenresTree.MoveCurrent
  If IsChild Then
    mplayer.Media_FullPath = GenresTree.Current.key
  Endif
  
End

Public Sub GenresTree_Activate()
  
  Dim IsChild As Boolean = False
  Dim genre As String
  
  GenresTree.MoveCurrent
  IsChild = Not (GenresTree.moveparent())
  If IsChild Then
    TogglePls.value = False
    Play(False, GenresTree.Current.key,,, GenresTree.Current.text)
  Else
    Last.mouse = mouse.wait
    Genre = Split(GenresTree.Current.Text, MyRadio.ts)[0]
    MyRadio.GetStationsFromGenre(Genre, GenresTree)
    If (GenresTree.Current.Children > 0) Then GenresTree.Current.Expanded = True
    Last.mouse = mouse.normal
  Endif
  
End

Public Sub TextBox1_KeyPress()
  
  If (KEY.code = Key.return Or KEY.code = Key.enter) Then startshoutSearch()
  
End

Public Sub startshoutSearch()
  
  Leftsidepanel.mouse = mouse.wait
  NOSAVEHBox10.mouse = mouse.wait
  TextBox1.enabled = False
  If MyRadio.GetStationsFromSearch(TextBox1.text, ShutResultGrid) = 0 Then
    Message.Error(("Error reading from shoutcast server"))
  Endif
  NOSAVEVBox2.visible = True
  NOSAVEVBox3.visible = False
  Highlight_shout_results()
  Leftsidepanel.mouse = mouse.normal
  NOSAVEHBox10.mouse = mouse.normal
  TextBox1.enabled = True
   ShutResultGrid.Rows.h = ShutResultGrid.Font.TextHeight("^_") + global.rowpadding
 ' ShutResultGrid.Rows.h = (ShutResultGrid.Font.Height * 1.4)
End

Public Sub ShutResultGrid_DblClick()
  
  Dim SelectedPath As String
  
  Try SelectedPath = Last[Last.row, 3].text
  If Error Then Return
  If MouseInsideGrid(Last) Then
    Play(False, SelectedPath,,, Last[Last.row, 0].text)
  Endif
  
End

Public Sub ShutResultGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    ShutResultGrid_DblClick()
  Endif
  
End

Public Sub CloseTagEdBtn2_Click()
  
  NOSAVEVBox2.visible = False
  NOSAVEVBox3.visible = True
  If fullyloaded Then
    If TabSelectedShoutcast() Then ShoutCast_Select()
  Endif
  
End

Public Sub ShoutCastGridAddToLibrary_Click()
  
  Dim r As Integer
  Dim AnERROR As Boolean = False
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  For r = 0 To ShutResultGrid.Rows.count - 1
    If ShutResultGrid.Rows[r].Selected Then
      Try MyLibrary.AddFile(LibraryGrid, ShutResultGrid[r, 3].text, QuickMode, True, ShutResultGrid[r, 0].text)
      If Error Then AnERROR = True
    Endif
  Next 'r
  If AnError Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub ShoutCastGridaddtoplaylist_Click()
  
  Dim r As Integer
  Dim AnERROR As Boolean = False
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  For r = 0 To ShutResultGrid.Rows.count - 1
    If ShutResultGrid.Rows[r].Selected Then
      Try MyPlaylist.AddFile(PlaylistGrid, ShutResultGrid[r, 3].text, QuickMode, True, ShutResultGrid[r, 0].text)
      If Error Then AnERROR = True
    Endif
  Next 'r
  If AnError Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  
End

Public Sub FilterTextBox_Change()
  
  Highlight_shout_results()
  
End



Public Sub Highlight_shout_results()
  
  Dim r, c, c1 As Integer
  Dim savedcolor As Integer ' = ShutResultGrid.background
  
  If Len(FilterTextBox.text) >= 3 Or Trim(FilterTextBox.text) = "" Then
    MyRadio.Alternatecolor(ShutResultGrid)
    For r = 0 To ShutResultGrid.rows.count - 1
      savedcolor = ShutResultGrid[r, 0].background
      For c = 0 To ShutResultGrid.columns.count - 2
        If (ShutResultGrid[r, c].text Like "*" & Trim(FilterTextBox.text) & "*") And (Trim(FilterTextBox.text) <> "") Then
          For c1 = 0 To ShutResultGrid.columns.count - 1
            ShutResultGrid[r, c1].background = color.gradient(ShutResultGrid.Background, Color.red)
          Next 'c1
          Break
        Else
          For c1 = 0 To ShutResultGrid.columns.count - 1
            ShutResultGrid[r, c1].background = savedcolor
          Next 'c1
        Endif
      Next 'c
    Next 'r
  Endif
  
End

Public Sub ShoutCast_Select()

  If NOSAVEVBox3.visible And GenresTree.count = 0 Then 
    MyRadio.FillCachedGenres(GenresTree)
  Endif
  
End

Public Sub Youtube_Select()
  
  If youtubetree.count = 0 Then Youtube.init_tree(youtubetree)
  
End

Public Sub TextBox1_Click()
  
  If Trim(TextBox1.text) <> "" Then startshoutSearch()
  
End

Public Sub ShutResultGrid_Select()
  
  Try mplayer.Media_FullPath = ShutResultGrid[ShutResultGrid.row, 3].text
  
End

Public Sub ShutResultGrid_Menu()
  
  Dim tmptext As String
  
  Try tmptext = ShutResultGrid.Current.text
  If Error Then Return
  Shoutcastgridpopup.Popup
  
End

Public Sub GenresTree_Select()
  
  Try mplayer.Media_FullPath = GenresTree.Current.key
  
End

Public Sub GenresTree_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    GenresTree_Select()
    GenresTree_Activate()
  Endif
  
End

Public Sub GenresTree_Menu()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  GenresTree.MoveCurrent
  IsChild = Not (GenresTree.moveparent())
  If IsChild Then ShoutcastTreepopup.Popup
  
End

Public Sub ShoutCastTreeAddToLibrary_Click()
  
  Dim r As Integer
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyLibrary.AddFile(LibraryGrid, GenresTree.Current.key, QuickMode, True, GenresTree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub ShoutCastTreeaddtoplaylist_Click()
  
  Dim r As Integer
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyPlaylist.AddFile(PlaylistGrid, GenresTree.Current.key, QuickMode, True, GenresTree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  
End

Public Sub CDDANext()
  
  If cddagrid.row = (cddagrid.Rows.count - 1) Then
    Try cddagrid.row = 0
    Global.IsNextSelected = False
  Else
    Try cddagrid.row = cddagrid.row + 1
    Global.IsNextSelected = True
  Endif
  Try mplayer.Media_FullPath = CDDAGrid[CDDAGrid.row, 0].text
  
End

Public Sub CDDAPrev()
  
  If cddagrid.row = 0 Then
    Try cddagrid.row = (cddagrid.Rows.count - 1)
  Else
    Try cddagrid.row = cddagrid.row - 1
  Endif
  Try mplayer.Media_FullPath = CDDAGrid[CDDAGrid.row, 0].text
  
End

Public Function PopupCddaError() As Boolean
  
  If MyQuestion.Ask(("Cannot access a valid cd audio or Cd device"), "Configure it", "Never mind") = 1 Then
    GeneralOptions.Show
    GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Audio CD"), GeneralOptions.TabStrip1)
  Endif
  
End

Public Sub MenuCDDA_Click()
  
  Dim track As Integer = 0
  Dim numtracks, length As String = 0
  'controllare se il dispositivo esiste ed è accessibile, altrimenti mostra messaggio d'errore
  'ed esci.
  If (Exist(GeneralOptions.CDDADeviceText.text)) Then
    If Stat(GeneralOptions.CDDADeviceText.text).Type = gb.Directory Then
      PopupCddaError()
      SetCDDATabVisibility(False)
      Return
    Endif
  Endif
  If (Not (Exist(GeneralOptions.CDDADeviceText.text))) Or (Trim(GeneralOptions.CDDADeviceText.text) = "") Then
    PopupCddaError()
    SetCDDATabVisibility(False)
    Return
  Endif
  fmain.mouse = mouse.wait
  CDDAGrid.clear
  CDDAGrid.Rows.count = 1
  CDDAGrid.columns.count = 1
  cddagrid[0, 0].text = ("Please, wait while getting disc information")
  cddagrid.Columns[0].width = -1
  SetCddaTabVisibility(True)
  'play media
  Play(False, "cdda://1")
  'get cd informations
  numtracks = mplayer.FindTagValue("ID_CDDA_TRACKS")
  If numtracks <> "" Then
    CDDAGrid.Header = GridView.Horizontal
    CDDAGrid.Rows.count = 0
    CDDAGrid.columns.count = 2
    CDDAGrid.Columns[0].text = ("Track")
    CDDAGrid.Columns[1].text = ("Length")
    CDDAGrid.Clear
    For track = 1 To numtracks
      Length = "00:" & Left(mplayer.FindTagValue("ID_CDDA_TRACK_" & track & "_MSF"), 5)
      CDDAGrid.Rows.count = CDDAGrid.Rows.count + 1
      CDDAGrid[CDDAGrid.Rows.count - 1, 0].text = ("cdda://") & track
      CDDAGrid[CDDAGrid.Rows.count - 1, 1].text = Length
    Next 'track
    cddagrid.Columns[0].width = -1
    cddagrid.Columns[1].width = -1
  Else
    cddagrid[0, 0].text = ("Error, failed to get disc information")
    PopupCddaError()
    SetCDDATabVisibility(False)
    If fmain.TogglePls.value = True Then fmain.TogglePls.value = False
  Endif
  
  Try cddagrid.row = 0
  fmain.mouse = mouse.normal
  
End

Public Sub CDDAGrid_Select()
  
End

Public Sub CDDAGrid_DblClick()
  
  Try mplayer.Media_FullPath = CDDAGrid[CDDAGrid.row, 0].text
  Play(False, mplayer.Media_FullPath)
  
End

Public Sub CDDAGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    CDDAGrid_DblClick()
  Endif
  
End

Public Sub PodcastTree_Menu()
  
  Podcastmenu.popup
  
End

Public Sub Button1_Click()
  
  PodCastMenuNew_Click()
  
End

Public Sub PodcastTree_Activate()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  PodcastTree.MoveCurrent
  IsChild = Not (PodcastTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(PodcastTree.current.key) Then
      Try fmain.Play(False, PodcastTree.current.key)
    Endif
  Else
    If (PodcastTree.Current.Children = 0) Then
      'TRY mypodcast.Refresh(PodcastTree.Current.key, PodcastTree)
      mypodcast.Refresh(PodcastTree.Current.key, PodcastTree)
      If Error Then
        Message.Error(("Error refreshing the feed"))
        Last.mouse = mouse.default
      Endif
      If (PodcastTree.Current.Children > 0) Then PodcastTree.Current.Expanded = True
    Endif
  Endif
  
End

Public Sub Button4_Click()
  
  mypodcast.Refreshall(PodcastTree)
  
End

Public Sub PodcastTree_KeyPress()
  
  If (key.code = key.delete) And key.shift Then
    Try podcasttree.current.delete
  Endif
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    PodcastTree_Activate()
  Endif
  
End

Public Sub PodcastTree_Drop()
  
  Dim droppedfiles As String[]
  Dim DroppedFile, ext As String
  
  droppedfiles = Split(Drag.data, "\n")
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      If global.IsNetworkURI(droppedfile) Then Try mypodcast.Add(droppedfile, PodCastTree)
    Endif
  Next
  
End

Public Sub PodCastMenuNew_Click()
  
  Dim NewUrl As String = ""
  
  NewUrl = MyAskName.Ask(("Enter a new podcast url"))
  If Trim(NewUrl) <> "" Then
    Try mypodcast.add(NewUrl, PodcastTree)
    If Error Then
      Message.Error(("Error adding new feed"))
      PodcastTree.mouse = mouse.Default
    Endif
  Endif
  
End

Public Sub PodcastMenuRefresh_Click()
  
  Dim IsChild As Boolean = False
  
  podcasttree.MoveCurrent()
  IsChild = Not (podcasttree.moveparent())
  podcasttree.MoveBack
  If Not IsChild Then
    mypodcast.Refresh(PodcastTree.Current.key, PodCastTree)
  Endif
  
End

Public Sub PodCastMenuDelete_Click()
  
  Dim IsChild As Boolean = False
  
  podcasttree.MoveCurrent()
  IsChild = Not (podcasttree.moveparent())
  podcasttree.MoveBack
  If Not IsChild Then
    Try podcasttree.Current.delete
  Else
    MyQuestion.Ask(("Cannot delete child items!"), "Ok", "")
  Endif
  
End

Public Sub WalkTreePrint()
  'just an example to print all tree items...
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then
      Print podcasttree.Item.key
      podcasttree.MoveChild()
    Endif
    Print podcasttree.Item.key
  Until podcasttree.MoveBelow()
  
End

Public Sub PodCastMenuDownload_Click()
  
  Dim CurrentUrl, CurrentText As String
  
  Try CurrentUrl = podcasttree.Current.Key
  If Error Then
    Message.Error(("Error: Cannot get current item"), ("Damn!"))
    Return
  Endif
  CurrentText = podcasttree.Current.text & "." & file.Ext(CurrentUrl)
  StreamDownload(CurrentUrl, CurrentText)
  
End

Public Sub PodCastMenuAddLibrary_Click()
  
  Dim childitem As Boolean = False
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then podcasttree.MoveChild()
    If podcasttree.Item.selected Then
      If Not (podcasttree.Item.text Like "[*]*") Then
        MyLibrary.AddFile(librarygrid, podcasttree.Item.key, True, True, podcasttree.Item.text)
      Endif
    Endif
  Until podcasttree.MoveBelow()
  
End

Public Sub PodCastMenuAddPlaylist_Click()
  
  Dim childitem As Boolean = False
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then podcasttree.MoveChild()
    If podcasttree.Item.selected Then
      If Not (podcasttree.Item.text Like "[*]*") Then
        MyPlaylist.AddFile(playlistgrid, podcasttree.Item.key, True, True, podcasttree.Item.text)
      Endif
    Endif
  Until podcasttree.MoveBelow()
  
End

Public Sub LibraryGrid_Enter()
  
  If GeneralOptions.HighlightCHK.value Then libtimer.start
  
End

Public Sub PlaylistGrid_Enter()
  
  If GeneralOptions.HighlightCHK.value Then plstimer.start
  
End

Public Sub LibraryGrid_Leave()
  
  libtimer.stop
  
End

Public Sub PlaylistGrid_Leave()
  
  plstimer.stop
  
End

Public Sub DeHighLightVisible(mygrid As Gridview)
  
  Dim firstr, lastr, r, previousH As Integer
  
  FirstR = 0 'hack: for some reason mygrid.rowat doesn't work here, so suppose we've at most 100 visible rows.
  LastR = 100 ' hack
  If firstr = -1 Then firstr = 0
  For r = firstr To lastr
    Try DeHighlightRow(r, mygrid)
    If Error Then Return
  Next 'r
  
End

Private PrevHigRow As Integer = -1
Private highlighting As Boolean = False

Public Sub LibAndPlsHighlighter(Mygrid As Gridview)
  
  Dim mousey As Integer
  Dim CurHigRow As Integer
  
  If highlighting Then Return
  mousey = mouse.screeny - Mygrid.screeny
  CurHigRow = Mygrid.RowAt(mousey)
  If CurHigRow <> PrevHigRow Then
    highlighting = True
    If (PrevHigRow >= 0) And (Mygrid.row <> PrevHigRow) Then Try DeHighlightRow(PrevHigRow, Mygrid)
    If (CurHigRow >= 0) Then HighlightRow(CurHigRow, Mygrid, global.Highlightmore)
    highlighting = False
  Endif
  If (CurHigRow >= 0) Then
    'make the current row the previous one for next run:
    PrevHigRow = CurHigRow
  Endif
  
End

Public Sub libtimer_Timer()
  
  LibAndPlsHighlighter(LibraryGrid)
  
End

Public Sub plstimer_Timer()
  
  LibAndPlsHighlighter(PlaylistGrid)
  
End

Private DontHighlightHack As Boolean = False

Private Sub HighlightRow(hrow As Integer, mygrid As Gridview, increment As Integer, Optional showcover As Boolean = False)
  
  Dim CurBackColor As Integer
  Dim RowHeight, tmpheight As Integer
  Dim i As Integer
  Dim tmptext As String
  Dim myimgfile As String
  Dim artist, album As String
  'DIM CoverOver AS Integer = 32
  Dim CoverPadding As Integer = 6
  Dim fullpath As String
  
  If DontHighlightHack Then
    DontHighlightHack = False
    Return
  Endif
  If GeneralOptions.ShowCoversInListChk.value Then showcover = True
  
  If (mygrid[hrow, 0].font.size <> mygrid.font.size) And (Not showcover) Then Return 'dont highlight multiple times
  
  CurBackColor = mygrid[hrow, 0].BackGround
  'make text rich to apply font properties (gambas bug/undocumented)
  If mygrid[hrow, 0].text <> "" Then
    mygrid[hrow, 0].RichText = mygrid[hrow, 0].text
  Endif
  
  mygrid[hrow, 0].font.size = mygrid.font.size + increment
  tmpheight = mygrid.font.TextHeight("^_") + (global.rowpadding * 2)

  If showcover Then
    If tmpheight < global.coverHeight Then
      mygrid.Rows[hrow].h = global.coverHeight
    Else
      mygrid.Rows[hrow].h = tmpheight + 5
    Endif

  Else
    mygrid.Rows[hrow].h = tmpheight
  Endif
  
  mygrid[hrow, 0].BackGround = CurBackColor
  If Not (mygrid[hrow, 0].font.bold) Then mygrid[hrow, 0].font.bold = True

  mygrid[hrow, 0].RichText = Null
  fullpath = MyGrid[hrow, MyLibrary.ColumnIndex["Full Path"]].text
  If showcover Then
    artist = mygrid[hrow, MyLibrary.ColumnIndex["Artist"]].text '''
    album = mygrid[hrow, MyLibrary.ColumnIndex["Album"]].text '''
    RowHeight = mygrid.Rows[hrow].h - CoverPadding
    myimgfile = CoverManager.Coverfile(artist, album)
    Try MyGrid[hrow, 0].Picture = covermanager.coverpicture(myimgfile, fullpath, RowHeight)
  Else
    fullpath = MyGrid[hrow, MyLibrary.ColumnIndex["Full Path"]].text
    MyGrid[hrow, 0].Picture = DefaultLibraryIcon(fullpath)
  Endif
  '*sometimes cell text is lost (can't understand why), so restore it
  If Lower(mygrid.name) = "librarygrid" Then
    MyGrid.data.text = mylibrary.CellValue(MyGrid, hrow, 0)
  Else
    If Lower(mygrid.name) = "playlistgrid" Then
      MyGrid.data.text = myplaylist.CellValue(MyGrid, hrow, 0)
    Endif
  Endif
  
End

Private Sub DeHighlightRow(hrow As Integer, mygrid As Gridview)
  
  Dim fullpath, rowheight, artist, album As String
  
  If ((hrow Mod 2) <> 0) Then mygrid[hrow, 0].BackGround = global.Alternatecolor
  mygrid[hrow, 0].font = mygrid.Font '<<--
  mygrid.Rows[hrow].h = mygrid.Font.TextHeight("^_") + global.rowpadding '<<--
  fullpath = MyGrid[hrow, MyLibrary.ColumnIndex["Full Path"]].text
  
  If GeneralOptions.ShowCoversInListChk.value Then
    RowHeight = mygrid.Rows[hrow].h
    artist = mygrid[hrow, MyLibrary.ColumnIndex["Artist"]].text
    album = mygrid[hrow, MyLibrary.ColumnIndex["Album"]].text
    Try MyGrid[hrow, 0].Picture = covermanager.coverpicture(CoverManager.coverfile(artist, album), fullpath, RowHeight - global.rowpadding)
  Else
    MyGrid[hrow, 0].Picture = DefaultLibraryIcon(fullpath)
  Endif
  
  '*sometimes cell text is lost (can't understand why), so restore it
  If Lower(mygrid.name) = "librarygrid" Then
    MyGrid.data.text = mylibrary.CellValue(MyGrid, hrow, 0)
  Else
    If Lower(mygrid.name) = "playlistgrid" Then
      MyGrid.data.text = myplaylist.CellValue(MyGrid, hrow, 0)
    Endif
  Endif
  
End

Public Sub ChengeToggleColor(Tbutton As Object)
  
  If Tbutton.value Then
    Tbutton.BackGround = Color.Blend(Color.Blend((Tbutton.BackGround), Color.red), Tbutton.BackGround)
  Else
    Tbutton.BackGround = Tbutton.Parent.Background
  Endif
  
End

Public Sub ShufflePls_Click()
  
  If ShutPLS.Checked And ShufflePls.value Then
    Message.Warning(("Please, disable playlist shutdown option first!"))
    ShufflePls.value = False
  Else
    If ShufflePls.value Then TogglePls.value = True
  Endif

End



Public Sub PlayListGrid_Scroll()
  'we use this to avoid the timer to highlight rows
  '(which is a cpu heavy operation)
  
  DontHighlightHack = True
  
End

Public Sub LibraryGrid_Scroll()
  'we use this to avoid the timer to highlight rows
  '(which is a cpu heavy operation)
  
  DontHighlightHack = True
  
End

Public Sub MenuLibrarySetCover_click()
  
  Dim artist, album, filepath As String
  
  With librarygrid
    Artist = librarygrid[.row, MyLibrary.ColumnIndex["Artist"]].text
    Album = librarygrid[.row, MyLibrary.ColumnIndex["Album"]].text
    filepath = librarygrid[.row, MyLibrary.ColumnIndex["Full Path"]].text
  End With
  SetACover(Artist, Album, filepath)
  
End

Public ForcedAspectRT As String = "default"

Public Sub AspectDefaultmenu_Click()
  
  mplayer.Send("switch_ratio 2.35")
  ForcedAspectRT = "2.35"
  CorrectAreaAspect()
  
End

Public Sub Aspect1menu_Click()
  
  mplayer.Send("switch_ratio 1.7778")
  ForcedAspectRT = "1.7778"
  CorrectAreaAspect()
  
End

Public Sub Aspect10menu_Click()
  
  mplayer.Send("switch_ratio 1.6")
  ForcedAspectRT = "1.6"
  CorrectAreaAspect()
  
End

Public Sub Aspect11menu_Click()
  
  mplayer.Send("switch_ratio 1")
  ForcedAspectRT = "1"
  CorrectAreaAspect()
  
End

Public Sub Aspect2menu_Click()
  
  mplayer.Send("switch_ratio 1.3333")
  ForcedAspectRT = "1.3333"
  CorrectAreaAspect()
  
End

Public Sub AspectOtherMenu_Click()
  
  Dim ExAr As String
  
  ExAr = mplayer.FindTagValue("ID_VIDEO_ASPECT")
  ChooseAspect.show
  Repeat
    Wait 0.1
  Until ChooseAspect.visible = False
  If ChooseAspect.choice <> "-1" Then
    mplayer.Send("switch_ratio " & ChooseAspect.choice)
    ForcedAspectRT = ChooseAspect.choice
  Else
    ForcedAspectRT = ExAr
    mplayer.Send("switch_ratio " & ExAR)
  Endif
  CorrectAreaAspect()
  
End

Public Sub ButtonUp_Click()
  
  If String.Right(FileView1.dir, 1) = "/" Then FileView1.dir = String.Left(FileView1.dir, Len(FileView1.dir) - 1)
  FileView1.dir = File.dir(FileView1.dir)
  urlbox.text = Replace(FileView1.dir, "//", "/")
  
End

Public Sub ButtonRefresh_Click()
  
  FileView1.Reload
  
End

Public Sub buttonlistview_Click()
  
  FileView1.ShowDetailed = True
  
End

Public Sub ButtonIconview_Click()
  
  FileView1.ShowDetailed = False
  
End

Public Sub ButtonHidden_Click()
  
  FileView1.ShowHidden = Not FileView1.ShowHidden
  
End

Public Sub ActivateFile(fullpathitem As String)
  
  If IsDir(fullpathitem) Then
    FileView1.dir = fullpathitem
    urlbox.text = Replace(FileView1.dir, "//", "/")
    If String.Right(urlbox.text, 1) = "/" Then urlbox.text = String.Left(urlbox.text, Len(urlbox.text) - 1)
  Else
    ComboHistory.AddHistory(urlbox, FileView1.dir)
    Play(False, fullpathitem)
  Endif
  
End

Public Sub FileView1_Activate()
  
  Dim fullpathitem As String = Replace(FileView1.dir & "/" & FileView1.Current, "//", "/")
  
  ActivateFile(fullpathitem)
  
End

Public Sub Urlbox_KeyPress()
  
  If (key.code = key.enter) Or (key.code = key.Return) Then
    If Urlbox.text <> FileView1.dir Then
      FileView1.dir = Urlbox.text
    Endif
  Endif
  
End

Public Sub FileView1_Icon(Path As String)
  
  If IsDir(path) Then
    FileView1.icon = Picture["folder16.png"]
  Else
    FileView1.icon = DefaultLibraryIcon(path)
  Endif
  
End

Public Sub ButtonHome_Click()
  
  FileView1.dir = User.Home
  urlbox.text = User.Home
  
End

Public Sub menubrowseaddtolibrary_Click()
  
  Dim nulllistbox As New ListBox(zzzfake)
  Dim selecteditem As String
  Dim StatType As Integer
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  StatType = Stat(selecteditem, True).type
  If StatType = gb.file Then
    mylibrary.AddFile(librarygrid, SelectedItem, False, False)
    UpdateSearchResults(mylibrary, librarygrid, Searchfield.text)
  Else If StatType = gb.Directory Then
    If MyQuestion.Ask(("Are you sure you want to\nrecursively add this directory?"), "Add", "Cancel") = 1 Then
      librarygrid.enabled = False
      Fileview1.enabled = False
      mylibrary.AddDir(librarygrid, selecteditem, nulllistbox)
      Fileview1.enabled = True
      librarygrid.enabled = True
      UpdateSearchResults(mylibrary, librarygrid, Searchfield.text)
    Endif
  Endif
  
End

Public Sub menubrowseaddtoplaylist_Click()
  
  Dim nulllistbox As New ListBox(zzzfake)
  Dim selecteditem As String
  Dim StatType As Integer
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  StatType = Stat(selecteditem, True).type
  If StatType = gb.file Then
    myplaylist.AddFile(playlistgrid, SelectedItem, False, False)
    UpdateSearchResults(myplaylist, playlistgrid, SearchfieldPLS.text)
  Else If StatType = gb.Directory Then
    If MyQuestion.Ask(("Are you sure you want to\nrecursively add this directory?"), "Add", "Cancel") = 1 Then
      playlistgrid.enabled = False
      Fileview1.enabled = False
      myplaylist.AddDir(playlistgrid, selecteditem, nulllistbox)
      Fileview1.enabled = True
      playlistgrid.enabled = True
      UpdateSearchResults(myplaylist, playlistgrid, SearchfieldPLS.text)
    Endif
  Endif
  
End

Public Sub FileView1_Menu()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  MenuAddToHistory.Enabled = IsDir(selecteditem)
  MenuBrowseDelete.Enabled = Not (IsDir(selecteditem))
  Menubrowse.popup
  
End

Public Sub MenuBrowseOpenContaining_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If IsDir(selecteditem) Then
    desktop.open(Selecteditem)
  Else
    desktop.open(FileView1.dir)
  Endif
  
End

Public Sub UrlBox_Click()
  
  If Trim(Urlbox.text) = "" Then Urlbox.text = "/"
  FileView1.dir = Urlbox.text
  
End

Public Sub MenuAddToHistory_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If IsDir(selecteditem) Then ComboHistory.AddHistory(urlbox, selecteditem)
  
End

Public Sub MenuBrowseDelete_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If Not (IsDir(selecteditem)) Then
    If Not (MyQuestion.ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 1) Then
      Try Kill selecteditem
      If Not Error Then
        FileView1.Reload
        myplaylist.DeleteFromPath(selecteditem)
        mylibrary.DeleteFromPath(selecteditem)
      Else
        Message.Error(("There was an error while trying to delete the item"), ("Ok"))
      Endif
    Endif
  Endif
  
End

Public Function YoutubeParseOpts() As String
  
  Dim out As String
  
  out = out & "&orderby=" & ComboBoxOrderBy.text
  out = out & "&time=" & Comboboxtime.text
  If Trim(TextBoxUploader.text) <> "" Then out = out & "&author=" & Trim(TextBoxUploader.text)
  Return out
  
End

Public Sub youtubeTree_Activate()
  
  Dim IsChild As Boolean = False
  Dim RealYTVideoUrl As String = ""
  'if the item has no parent then refresh it, else play it
  fmain.mouse = mouse.wait
  youtubeTree.MoveCurrent
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then 
    youtubeappendmenu_Click()
    Return
  Endif
  
  
  IsChild = Not (youtubeTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(youtubeTree.current.key) Then
      Try RealYTVideoUrl = Youtube.realvideourl(youtubeTree.current.key, GeneralOptions.Youtubeformat.text)
      If Error Then
        Message.error(("Unable to get the real stream url"))
        fmain.mouse = mouse.Default
        Return
      Endif
      needytcookie = True
      fmain.Play(False, RealYTVideoUrl, False)
      youtubetitle = youtubetree.Current.Text
    Endif
  Else
    If (youtubeTree.Current.Children = 0) Then
      If youtubetree.Current.Key = "custom_search_results" Then
        Youtube.CollapseAll(youtubetree)
        YouSearchfield_Activate()
      Else If youtubetree.Current.Key = "related" Then
        Message.info("Please, right click on a video and select 'Get related videos'", "Ok")
      Else
        If Trim(ComboBoxRegion.text) = "" Then ComboBoxRegion.Index = 0 'ComboBoxRegion.text = "Any:"
        
        Youtube.CollapseAll(youtubetree)
        Youtube.GetFeed(youtubeTree.Current.key, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value)
      Endif
      If (youtubeTree.Current.Children > 0) Then youtubeTree.Current.Expanded = True
    Endif
  Endif
  fmain.mouse = mouse.normal
  
End

Public Sub youtubetree_Select()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  youtubeTree.MoveCurrent
  IsChild = Not (youtubeTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(youtubeTree.current.key) Then
      fillyoutubeinfo(youtubeTree.current.key)
    Endif
  Endif
  Try mplayer.Media_FullPath = youtubeTree.Current.key
  Try YouVideoInfo.w = scrollviewyt.w - 64
  
End

Public Sub YouSearchfield_Activate(Optional myappend As Boolean = False)
  
  Dim searchstring As String
  If Not (fmain.fullyloaded) Then Return
  fmain.mouse = mouse.wait
  youtubetree.mouse = mouse.wait
  ComboHistory.AddHistory(yousearchfield, yousearchfield.text)
  searchstring = Replace(yousearchfield.text, " ", "+")
  youtubetree.MoveTo("custom_search_results")
  youtubetree.Item.text = Split(youtubetree.Item.text, ":", "", True)[0] & ": " & yousearchfield.text
  Youtube.CollapseAll(youtubetree)
  Youtube.FeedSearch(searchstring, "custom_search_results", youtubeTree, spinboxmaxresults.value, (desktop.h Div 12), YoutubeParseOpts(), myappend)
  fmain.mouse = mouse.normal
  youtubetree.mouse = mouse.normal
  
End

Public Sub fillyoutubeinfo(url As String)
  
  Dim title, category, seconds, description, published, updated, author, authorlink As String
  Dim outtext As String = ""
  Dim ytsite As String = "http://www.youtube.com/watch?v="
  
  ytsite = ytsite & Youtube.getvideoid(url)
  Try title = Youtube.feedsinfo[url & ".title"]
  Try category = Youtube.feedsinfo[url & ".categorylabel"]
  Try seconds = mplayer.FormatTime(Youtube.feedsinfo[url & ".yt:durationseconds"])
  Try description = Youtube.feedsinfo[url & ".media:description"]
  Try published = Youtube.feedsinfo[url & ".published"]
  Try updated = Youtube.feedsinfo[url & ".updated"]
  authorlink = Youtube.feedsinfo[url & ".author"]
  author = file.Name(authorlink)
  YouVideoInfo.w = scrollviewyt.w - 64
  outtext = outtext & "<font color='white'>"
  outtext = outtext & "<b>Title:</b> " & title & "<br>"
  outtext = outtext & "<b>Link:</b> "
  outtext = outtext & "<font color='#8888FF'>"
  outtext = outtext & "<u>" & ytsite & "</u><br>"
  outtext = outtext & "</font>"
  outtext = outtext & "<b>Category:</b> " & category & "<br>"
  outtext = outtext & "<b>Author:</b> " & author & "<br>"
  outtext = outtext & "<b>Published:</b> " & published & "<br>"
  outtext = outtext & "<b>Updated:</b> " & updated & "<br>"
  outtext = outtext & "<b>Duration:</b> " & seconds & "<br>"
  outtext = outtext & "<b>Description:</b><br> " & description & "<br>"
  outtext = outtext & "</font>"
  outtext = Replace(outtext, "\n", "<br>")
  YouVideoInfo.tag = url
  YouVideoInfo.text = outtext
  YouVideoInfo.visible = True
  blinktimer.start
  
End

Private blinknum As Integer = 0

Public Sub blinktimer_Timer()
  
  If blinknum < 4 Then
    If Not scrollviewyt.visible Then
      If buttondetail.background = Color.default Then
        buttondetail.background = Color.red
        blinknum = blinknum + 1
      Else
        buttondetail.Background = Color.default
      Endif
    Endif
  Else
    buttondetail.Background = Color.default
    blinktimer.stop
  Endif
  
End

Public Sub SpinBoxmaxresults_KeyPress()
  
  If ((key.code = key.enter) Or (key.code = key.return)) Then YouSearchfield_Activate()
  
End

Public Sub YouVideoInfo_MouseDown()
  
  Dim ytsite As String = "http://www.youtube.com/watch?v="
  
  ytsite = ytsite & Youtube.getvideoid(YouVideoInfo.tag)
  If MyQuestion.Ask(("Would you like to go to the video homepage?"), ("Yes, Go to Youtube"), ("No, thanks")) = 1 Then
    'Shell "xdg-open '" & ytsite & "'"
    desktop.Open(ytsite)
  Endif
  
End

Public Sub YouVideoInfo_Enter()
  
  Last.mouse = mouse.Pointing
  
End

Public Sub youtubetree_Menu()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  youtubetree.MoveCurrent
  
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then Return
  
  IsChild = Not (youtubetree.moveparent())
  'IF IsChild THEN youtubetreepopup.Popup
  YtRefresh.enabled = Not (ischild) And (Not (youtubetree.Current.key = "related"))
  YoutubeTreeTreeGetRelatedMenu.Enabled = ischild
  YoutubetreeTreeaddtoLibrary.enabled = ischild
  YoutubetreeTreeaddtoplaylist.enabled = ischild
  youtubetreeDownload.Enabled = ischild
  'youtubeappendmenu.enabled = (Not ischild) And (youtubetree.Current.children > 0)
  youtubetreepopup.Popup
  
End

Public Sub youtubeappendmenu_Click()
  
  Dim IsChild As Boolean = False
  Dim relatedlink As String
  Dim relatedtotext As String
  Dim tmpkey As String

  youtubetree.MoveCurrent

  If youtubetree.Current.Key Like "__MORERESULTS__*" Then 
    tmpkey = youtubetree.Current.Key
    youtubetree.MoveParent()
    If Error Then Return
      Try youtubetree.Item.selected = True
  Endif
   Debug youtubetree.Current.key

  Try youtubetree.Remove(tmpkey)
  If Not ischild Then
    fmain.mouse = mouse.wait
    youtubetree.mouse = mouse.wait
    If youtubetree.Current.Key = "custom_search_results" Then
      YouSearchfield_Activate(True)
    Else If youtubetree.Current.Key = "related" Then 'go to child item to see what related items we need
      Try youtubetree.MoveChild
      If Not Error Then
        relatedlink = youtubetree.Item.key
        relatedtotext = youtubetree.Current.text
        youtubetree.moveparent 'then go back to the 'upstream'
        Youtube.CollapseAll(youtubetree)
        Youtube.GetRelated(relatedlink, youtubetree, relatedtotext, SpinBoxmaxresults.text, (Desktop.h Div 12),, True)
      Endif
    Else
      Youtube.GetFeed(youtubeTree.Current.key, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value, True)
    Endif
    fmain.mouse = mouse.default
    youtubetree.mouse = mouse.default
  Endif
End

Public Sub YoutubeTreeTreeGetRelatedMenu_click(Optional myappend As Boolean = False)
  
  Dim IsChild As Boolean = False
  Dim relatedtotext As String
  
  youtubetree.MoveCurrent
  IsChild = Not (youtubetree.moveparent())
  If ischild Then
    fmain.mouse = mouse.wait
    youtubetree.mouse = mouse.wait
    Youtube.CollapseAll(youtubetree)
    relatedtotext = youtubetree.Current.text
    Youtube.GetRelated(youtubetree.Current.key, youtubetree, relatedtotext, SpinBoxmaxresults.text, (Desktop.h Div 12), myappend)
    fmain.mouse = mouse.default
    youtubetree.mouse = mouse.default
  Endif
  
End

Public Sub YoutubetreeTreeaddtoLibrary_Click()
  
  Dim r As Integer
  Dim QuickMode As Boolean
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyLibrary.AddFile(librarygrid, youtubeTree.current.key, QuickMode, True, youtubetree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub YoutubetreeTreeaddtoPlaylist_Click()
  Dim r As Integer
  Dim QuickMode As Boolean

  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyPlaylist.AddFile(PlaylistGrid, youtubeTree.current.key, QuickMode, True, youtubetree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
End

Public Sub youtubetreeDownload_Click()
  
  Dim CurrentUrl, CurrentText As String
  Dim RealYTVideoUrl As String
  
  Try CurrentUrl = youtubetree.Current.Key
  If Error Then
    Message.Error(("Error: Cannot get current item"))
    Return
  Endif
  CurrentText = youtubetree.Current.text
  Try RealYTVideoUrl = Youtube.realvideourl(CurrentUrl, GeneralOptions.Youtubeformat.Text)
  If Error Then
    Message.error(("Unable to get the real stream url"))
    Return
  Endif
  StreamDownload(RealYTVideoUrl, CurrentText & ".flv")
  
End

Public StreamDownloadDir As String = ""

Public Sub StreamDownload(url As String, Optional suggestname As String = "")
  
  Dim dest, commandline, destdir, destfile As String
  
  If Trim(StreamDownloadDir) = "" Then StreamDownloadDir = User.Home
  suggestname = Replace(suggestname, ":", ".")
  suggestname = Replace(suggestname, "/", "_")
  suggestname = Replace(suggestname, "\"", " ")
  suggestname = Replace(suggestname, "'", " ")
  Dialog.Path = StreamDownloadDir & "/" & suggestname
  If Dialog.SaveFile() Then Return
  StreamDownloadDir = file.dir(Dialog.Path)
  If Trim(GeneralOptions.DownloaderCombobox.text) = "" Then GeneralOptions.DownloaderCombobox.text = "xterm -e wget %url -O %dest"
  destdir = Requote(file.Dir(Dialog.path))
  destfile = Requote(file.name(Dialog.path))
  dest = Requote(dest)
  url = Requote(url)
  
  commandline = Replace(GeneralOptions.DownloaderCombobox.text, "%url", url)
  commandline = Replace(commandline, "%destdir", destdir)
  commandline = Replace(commandline, "%destfile", destfile)
  
  If url Like "*youtube*" Then
    If commandline Like "*wget *" Then commandline = commandline & " --load-cookies " & Youtube.Cookiesfile
    If commandline Like "*aria2c *" Then commandline = commandline & " --load-cookies=" & Youtube.Cookiesfile
  Endif
  
  Debug commandline
  Shell commandline
  
End

Public Sub YtRefresh_Click()
  
  fmain.mouse = mouse.wait
  youtubetree.mouse = mouse.wait
  If youtubetree.Current.Key = "custom_search_results" Then
    YouSearchfield_Activate()
  Else
    Youtube.GetFeed(youtubeTree.Current.key, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value)
  Endif
  fmain.mouse = mouse.default
  youtubetree.mouse = mouse.default
  
End

Public Sub buttonopts_MouseDown()
  
  sidepanelYTSearchoptions.visible = Not sidepanelYTSearchoptions.visible
  
End

Public Sub buttondetail_Click()
  
  scrollviewyt.visible = Not scrollviewyt.visible
  
End

Public Sub youtubetree_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    youtubetree_Activate()
  Endif
  
End

Public Sub TextBoxUploader_KeyPress()
  
  If ((key.code = key.enter) Or (key.code = key.return)) Then YouSearchfield_Activate()
  
End

Public Sub buttonstartytsearch_Click()
  
  YouSearchfield_Activate()
  
End

Public Sub Form_DblClick()
  
End

Public Sub GetYoutubeSubs(VideoId As String)

  Dim Subdir As String = settings.defaultdir & "/" & Global.Appname & "/" & ".substmp/"
  Dim subtitle, subfile, track, langcode, trackname As String
  Dim id As Integer = 0

  Try Mkdir Subdir
  For Each track In Youtube.AvailableSubs(VideoId)
    langcode = Split(track, ":", "", False, False)[0]
    trackname = Split(track, ":", "", False, False)[1]

    SubFile = Subdir & id & " - " & Trackname & "_" & LangCode & ".srt"
    file.Save(SubFile, Youtube.GetSub(VideoId, LangCode, trackname))
    mplayer.SubtitleAdd(SubFile)
    id = id + 1
  Next 'LangCode
  FillStreamsMenu()

End

Public Sub MenuShowDVBT_Click()
  
  DVBTuner.show
  
End

Public Sub ScanBtn_Click()
  If (Not global.initearlyformsdone) Then global.DelayLoadStates_Timer
  DVBTuner.show
End

Public fakesplit As New Panel(zzzfake) As "Fakesplit"

Public Sub Fakesplit_Enter()
  
  Last.mouse = mouse.SplitH
  
End

Public Sub Fakesplit_Leave()
  
  Last.mouse = mouse.default
  fakesplit.hide
  
End

Public Sub Fakesplit_MouseMove()
  
  Dim delta As Integer
  
  delta = fakesplit.screenx - fakesplit.x 
  fakesplit.x = mouse.screenx - delta
  
End

Public Sub FakeSplitRefresh()
  
  Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
  Dim tmplayout As Integer[] = hsplit1.layout
  
  tmplayout[1] = (hsplit1.w - fakesplit.x - splitterw)
  tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
  hsplit1.Layout = tmplayout
  Hsplit1_MyRefresh()
  
End

Public Sub Fakesplit_MouseUp()
  
  FakeSplitRefresh()
  
End

Public Sub HSplit1_MouseMove()
  If (fakesplit.parent.name <> Me.name) Then fakesplit.Reparent(fmain)
  Object.Attach(fakesplit, fmain, "fakesplit")
  fakesplit.Background = color.selectedbackground
  fakesplit.x = hsplit1.Layout[0]
  fakesplit.border = border.none
  fakesplit.x = hsplit1.Layout[0]
  fakesplit.Ignore = True
  fakesplit.x = hsplit1.Layout[0]
  fakesplit.w = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
  fakesplit.y = hsplit1.screeny - fmain.screeny - fmain.font.TextHeight("JIq") - desktop.scale
  fakesplit.h = hsplit1.h
  fakesplit.raise
  fakesplit.visible = True
  fakesplit.SetFocus()
End

Public Sub Fakesplit_DblClick()
  
  Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
  Dim tmplayout As Integer[] = hsplit1.layout
  
  If hsplit1.Layout[0] > 20 Then
    tmplayout[1] = (hsplit1.w - splitterw)
    tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
  Else
    tmplayout[0] = (fmain.w Div 3)
    tmplayout[1] = hsplit1.w - tmplayout[0] - splitterw
  Endif
  hsplit1.Layout = tmplayout
  Hsplit1_MyRefresh()
  fakesplit.lower
  fakesplit.visible = False
  Object.Detach(fakesplit)
  
End

Public Sub SearchFieldDVB_Activate()
  
  playselecteddvb()
  ComboHistory.AddHistory(SearchFieldDVB, SearchFieldDVB.text)
  
End

Public Sub SearchFieldDVB_Click()
  
  UpdateSearchResults(MyDVBTList, DVBTGrid, fmain.FullyLoaded, Searchfielddvb.text)
  
End

Public Sub SearchFieldDVB_KeyRelease()

  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  UpdateSearchResults(MyDVBTList, DVBTGrid, fmain.FullyLoaded, Searchfielddvb.text)
  Searchfielddvb.SetFocus()
  
End


Public Sub LeftSidePanel_Enter()
  
  Fakesplit_Leave()
  
End

Public Sub rightSidePanel_Enter()
  
  Fakesplit_Leave()
  
End

Public Sub MenuBug_Click()
    If MyQuestion.Ask("Thank you,\nyou will be taken to the \nbug reporting web page.", "Submit the bug", "Not now") = 1 Then
      Desktop.Open("http://xt7-player.sourceforge.net/xt7forum/newmsg.php?mode=post&f=3")
    Endif

End


Public Sub FileView1_Select()
  mplayer.Media_FullPath = FileView1.dir & "/" & FileView1.Current
End

Public Sub HBox2_Arrange()
If fmain.fullyloaded Then
 hbox20.enabled = (TabSelectedLibrary() Or TabSelectedPlaylist())
Endif
End


Public Sub PanScan_Click()
  MyQuestion.Ask(("Roll Your mouse wheel over the button\nto change panscan or Setup some hotkeys."), "Ok", "")
End

Public Sub PanScan_MouseWheel()
  If mplayer.ProcessRunningOvr() Then
    If Not (mplayer.Media_AudioOnly()) Then
      If mouse.Delta > 0 Then 
          PanScanCorrect(+0.05)
            Else
          PanScanCorrect(-0.05)
      Endif
    Endif
  Endif
End
