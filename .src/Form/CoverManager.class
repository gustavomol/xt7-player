' Gambas class file

Public Fetching As Boolean = False
Public HitCancel As Boolean = False

Public JustFileCover As Boolean = False
Public MediaFileFullPath As String

Public Sub TextBox1_Click()
  Dim PreRequest As String = ""
  Dim Keyword As String
  Dim MYURL As String
  Dim buffer, Tempfile, myline, ImageUrl, Iwidth, IHeigth As String
  Dim Splitted, ImagesURL As New String[]
  Dim Myimage As New Image
  Dim i As Integer = 0

  Progressbar1.value = 0
  'Progressbar1.visible = TRUE
  Progressbar1.h = 24

  HitCancel = False
  Fetching = True
  textbox1.enabled = False
  Me.mouse = Mouse.wait
  ButtonLoad.enabled = False
  Coverlist.Clear
  Coverlist.refresh
  
  Wait 0.01
  'Since August, 15, 2009, amazon requires signed requests.
  'I did request signing via an external php page

  Keyword = Chr(34) & Replace(TextBox1.text, " ", "%20") & Chr(34)
  Keyword = Replace(keyword, ",", "%20")
  Keyword = Replace(keyword, ";", "%20")
  Keyword = Replace(keyword, "-", "%20")
  PreRequest = "http://xt7-player.sourceforge.net/xt7forum/hmac.php?keywords=" & Keyword
  Print PreRequest
  HttpClient1.url = PreRequest
  HttpClient1.Async = False
  HttpClient1.timeout = 10
  HttpClient1.get
  If HttpClient1.status < 0 Then
    Debug "Error: Covermanager: Button1_Click() HTTP ERROR Doing Prerequest to signing proxy"
    Return
  Endif
  If Lof(HttpClient1) Then Read #HttpClient1, buffer, Lof(HttpClient1)
  'Print buffer

'   'MyURL = "http://webservices.amazon.com/onca/xml?Service=AWSECommerceService&AWSAccessKeyId=045ZGZ60B4A7NQEJRMR2&Operation=ItemSearch&SearchIndex=Music&Keywords=" & Keyword & "&ItemPage=1&ResponseGroup=ItemAttributes,Small,Images"
  MyURL = buffer
  HttpClient1.url = MYURL
  HttpClient1.Async = False
  HttpClient1.timeout = 60
  HttpClient1.get
  If HttpClient1.status < 0 Then
    Debug "Covermanager: HTTP ERROR while contacting Amazon"
    Return
  Endif
  
  If Lof(HttpClient1) Then Read #HttpClient1, buffer, Lof(HttpClient1)
  Splitted = Split(buffer, "<", "", True)
  Debug "CoverManaer: Button1_Click(): Check dupes"
  For Each myline In Splitted
    If (myline Like "*http://*") And (myline Like "*.jpg") Then
      ImageUrl = Split(myline, ">")[1]
      If ImagesURL.Find(ImageUrl) < 0 Then ImagesURL.Add(ImageUrl)
    Endif
    Wait 0.001
  Next 'myline
  Try Shell "rm -R " & global.confpath & "/covertmp/* >/dev/null 2>&1" Wait
  Try Shell "mkdir -p " & global.confpath & "/covertmp/ >/dev/null 2>&1" Wait
  'PRINT buffer
  Debug "CoverManaer: Button1_Click(): Start downloading covers Now"
  For Each ImageUrl In ImagesURL
    If (Imageurl Like "http://*") And (Not HitCancel) Then
      HttpClient1.url = ImageUrl
      HttpClient1.get
      Wait 0.01
      If HttpClient1.status >= 0 Then
        tempfile = global.confpath & "/covertmp/temp" & Rnd(0, 999999) & ".jpg"
        If Lof(HttpClient1) Then Read #HttpClient1, buffer, Lof(HttpClient1)
        File.Save(tempfile, buffer)
        MyImage = image.Load(tempfile)
        IWidth = Myimage.W
        IHeigth = MyImage.h
        MyImage = MyImage.Stretch(32, 32)
        Try Coverlist.Add(tempfile, IWidth & "x" & IHeigth, MyImage.Picture)
      Endif
      Wait 0.01
      i = i + 1
      Progressbar1.value = i / ImagesURL.count
    Endif
  Next 'ImageUrl
  If HitCancel Then Me.close
  'Progressbar1.visible = FALSE
  textbox1.enabled = True
  Me.mouse = Mouse.default
  If ImagesURL.count = 0 Then Message.Error(("No covers found for:") & "\n" & TextBox1.text & "\n" & ("Try to use less strict terms, remove symbols and so on..."), ("Ok"))
  ButtonLoad.enabled = True
  Fetching = False
End

Public Sub CoverList_Select()
  Dim blackpicture As New Picture
  Picturebox1.picture = Picture.Load(Coverlist.Current.key)
  Picturebox1.refresh
End

Public Sub TextBox1_Activate()
 textbox1_click()
End

Public Sub Form_Open()
  'ME.center
  Global.Center(Fmain, Me)
End

Public CoverCacheList As New ListView(zzzfake)

Public Sub RemoveCoverCache(coverfile As String)
  Dim cachefile As String = coverfile & "_thumbcache" 'ricava il nome dei file cache
  Dim catcherror As Boolean
  Shell "rm '" & cachefile & "'" & "*.*" 'rimuovilo dal disco
  'cercalo in memoria e rimuovilo:
  CoverCacheList.Movefirst
  Repeat
    If CoverCacheList.Item.key Like cachefile & "*" Then
      Debug "invalidating memory cache: " & CoverCacheList.Item.key
      CoverCacheList.Item.delete
      Try CoverCacheList.MoveFirst ' ci si muove all'inizio, perchè dopo la cancellazione
                                    ' l'item corrente non è più valido, quindi non ha un successivo
      If Error Then Return
    Endif
  Until CoverCacheList.MoveBelow()
  FMain.RefreshVisibleCovers(FMain.librarygrid)
  FMain.RefreshVisibleCovers(FMain.playlistgrid)
End


Public Function coverpicture(coverfile As String, uripath As String, width As Integer, Optional ByRef found As Boolean) As Picture
Dim cachefile As String = coverfile & "_thumbcache" & width & "." & File.ext(coverfile)
Dim tmpimage As Image
Dim FileExists As Boolean = False

found = True

'IF 1 = 2 THEN

If Exist(coverfile) Then
  'DEBUG "coverfile exists"
  Try Return CoverCacheList[cachefile].Picture 'Se esiste l 'immagine in memoria dai l 'immagine in memoria ed esci
  If Error Then 'Se non esiste l 'immagine in memoria, allora
    If Exist(cachefile) Then  'Se esiste una cache su disco allora
      CoverCacheList.Add(cachefile, "", picture.Load(cachefile)) 'mettila IN memoria
      Return CoverCacheList[cachefile].Picture 'ritornala
        Else 'Altrimenti(non esiste cache su disco)
      If Exist(coverfile) 'se esiste la cover su disco, ma non la cache
        tmpimage = image.Load(coverfile).Stretch(width, width) 'caricala
        tmpimage.Save(cachefile) 'salvala come cache
        CoverCacheList.Add(cachefile, "", tmpimage.picture) 'mettila IN memoria
        Return CoverCacheList[cachefile].Picture 'ritornala
      Endif
    Endif
  Endif
     Else ' IF NOT Exist(coverfile) THEN 'se la cover non esiste, ricava un nuovo coverfile:
  If global.IsNetworkURI(uripath) Then
    coverfile = "webradio.png"
      Else If global.IsVideoFile(uripath) Then
        coverfile = "videocover.png"
      Else 'non è una uri di rete, non è una radio e non c'è alcuna copertina già salvata:
      found = False
      coverfile = "emptycover.png"
  Endif
  cachefile = coverfile & "_thumbcache" & width & "." & File.ext(coverfile)
  Try Return CoverCacheList[cachefile].Picture 'prova a restituire l'immagine dalla memoria
  If Error Then 'se non la trovi in memoria,
    'DEBUG "not found in memory!"
    tmpimage = image.Load(coverfile).stretch(width, width) 'caricala
  Endif
  CoverCacheList.Add(cachefile, "", tmpimage.Picture) 'mettila IN memoria
  Return CoverCacheList[cachefile].Picture 'e restituiscila
Endif
End

Public Function newcoverpicture(coverfile As String, uripath As String, width As Integer) As Picture
  Return LookForJpg(uripath)
End

Public Sub MakeCoverDirs()
   Try Shell "mkdir -p " & global.confpath & "/covers/ >/dev/null 2>&1" Wait
End

Public Function IsUncovered(fullpath As String) As Boolean
  Return Exist(global.confpath & "/covers/uncovered/" & file.Name(fullpath))
End


Public Sub MarkUncovered(fullpath As String)
  Dim newfilename As String
  Dim tmppic As Picture
  If Not Exist(global.confpath & "/covers/uncovered") Then Return
  file.Save(global.confpath & "/covers/uncovered/" & file.Name(fullpath), "") 
End

Public Sub UnMarkUncovered(fullpath As String)
  Dim newfilename As String
  Dim tmppic As Picture
  If Exist(global.confpath & "/covers/uncovered") Then Try Kill (global.confpath & "/covers/uncovered/" & file.Name(fullpath)) 
End


Public Sub readahead(ByRef mystream As File, bytes As Long)
  Dim tmp As String
  Dim pseek As Long
  pseek = Seek(mystream)
  Read #mystream, bytes
  Seek #mystream, pseek
End


Public Sub LookForJpg(filename As String, Optional saveto As String = "", Optional ByRef fileerror As Boolean = False) As Boolean
  Dim mystream As File
  Dim b As Byte
  Dim myjpg As String
  Dim m1 As String = "image/"
  'Dim m1 As String = "JFIF"
  Dim m2 As String
  Dim j11, j12, j21, j22 As Byte
  Dim c As Byte
  Dim i As Integer
  Dim cb As Long
  Dim jpgstart, jpgend As Long
  Dim hasimage As Boolean = False
  Dim isvalid As Boolean = False
  'Dim tmpfile As String = "/dev/shm/tmp.jpg"
  Dim tmpfile As String = Temp & ".jpg"
  Dim tmppic As Picture
  'Debug " to save to " & saveto
  ' Return
  If IsUncovered(filename) Then Return False
  
  'Debug "Looking for embedded jpg in " & filename
  'jfif start:
  j11 = 255 '(0xff)
  j12 = 216 '(0xd8)
  'jfifend:
  j21 = 255 '(0xff)
  j22 = 217 '(0xd9)

  myjpg = ""
  Try mystream = Open filename For Input
  If Error Then 
    fileerror = True
    'Return Null
    Return False
  Endif

  Try readahead(ByRef mystream, 1024)
  For cb = 0 To 1024 ' 16384 'scan up to 16k, 1k seems to be enough
    b = Read #mystream As Byte

    For i = 1 To Len(m1) 
      c = Asc(m1, i) 'i,m,a,g,e,/
      If b <> c Then 
        m2 = ""
        Break
          Else
        m2 &= Mid(m1, i, 1) 
        'Debug m2
      Endif
      If m2 = m1 Then 
        hasimage = True
        Break
          Else
        b = Read #mystream As Byte
      Endif
      Wait
    Next
    If hasimage Then Break
  Next
  jpgstart = -1

  Try readahead(ByRef mystream, 2048)
  If hasimage Then 'find start jpg
    For cb = 0 To 2048 'look into the next 2K
      b = Read #mystream As Byte
      If b = j11 Then
        b = Read #mystream As Byte
        If b = j12 Then
          jpgstart = Seek(mystream) - 2
          Break
        Endif
      Endif
      Wait
    Next 'cb
      Else
    MarkUncovered(filename)
    'Return Null
    Return False
  Endif
  
  jpgend = -1
  If jpgstart < 0 Then
    Debug filename & " has  image/ mimetype but no jpg inside"
    MarkUncovered(filename)
    'Return
    Return False
  Endif

  'se il file jpg non è valido, reitera questo finchè non è valido
  While Not isvalid
    Try readahead(ByRef mystream, 4096)
    While Not Eof(mystream) 'find end jpg
      b = Read #mystream As Byte
      If b = j21 Then
        b = Read #mystream As Byte
        If b = j22 Then
          jpgend = Seek(mystream)
          Break
        Endif
      Endif
      Wait
    Wend

    If jpgend > 0 Then
      Debug "Found a potential jpeg of " & (jpgend - jpgstart) & " bytes for " & filename
      If (jpgend - jpgstart) > 307200 '307200 Then
        Debug "jpg is >300KB, probably corrupted, skipping"
        MarkUncovered(filename)
        'Return Null
        Return False
      Endif
    Endif

    Seek #mystream, jpgstart

    myjpg = Read #mystream, (jpgend - jpgstart) 
    file.Save(tmpfile, myjpg)
    Try tmppic = picture.Load(tmpfile)
    If Not Error Then 
      isvalid = True
      Seek #mystream, jpgstart
    Endif
    If Eof(mystream) Then
      MarkUncovered(filename)
      'Return Null
      Return False
    Endif
    Wait
  Wend

  Close mystream
  If isvalid 
    If saveto <> "" Then Try Copy tmpfile To saveto
    'Return tmppic
    Return True
      Else
    MarkUncovered(filename)
    'Return Null
    Return False
  Endif
End


Public Sub PictureBox1_DblClick()
  Dim newfilename As String
  Dim currentfilename As String
  CoverManager.close
  'stop any previous search
  HitCancel = True
  'set new cover
  newfilename = Coverfile(ArtistText.text, AlbumText.text)
  
  Try currentfilename = Coverlist.Current.key
  If Not Error Then
    Try Kill newfilename
    Try Copy currentfilename To ((newfilename))
  Endif
  Try RemoveCoverCache(newfilename)
  FMain.CoverRefresh()

  Wait 0.05
  Try currentfilename = Coverlist.Current.key
  If Not Error Then
    Try Kill newfilename
    Try Copy currentfilename To ((newfilename))
  Endif
  Try RemoveCoverCache(newfilename)
  FMain.CoverRefresh()
End

Public Function EmbeddedToCoverCache(artist As String, album As String, fullpath As String) As Boolean
  Dim newfilename As String
  Dim tmppic As Picture
  newfilename = Coverfile(Artist, Album, fullpath)
  Try LookForJpg(fullpath, newfilename)
  Return Exist(newfilename) 
End




Public Sub CoverList_DblClick()
  PictureBox1_DblClick()
End

Public Sub ButtonAccept_Click()
  PictureBox1_DblClick()
End

Public Sub ButtonCancel_Click()
  HitCancel = True
  Me.close
End

Public Sub ButtonUnset_Click()
  Dim newfilename As String
  newfilename = (Coverfile(ArtistText.text, AlbumText.text))
  'newfilename = SConv(global.confpath& "/covers/" & global.fixfilename(Upper(ArtistText.text)) & "^^^" & global.fixfilename(Upper(AlbumText.text) & ".jpg"))
  Try Kill newfilename
  Try RemoveCoverCache(newfilename)
  Picturebox1.picture = Picture.Load("emptycover.png")
  Picturebox1.refresh
  FMain.CoverRefresh()
End

Public Function Coverfile(artist As String, album As String, Optional fullpath As String = "") As String
  'return the cover file basing on album and artist information OR filename
  If fullpath = "" Then fullpath = MediaFileFullPath
  If (Trim(artist) = "" And Trim(album) = "") Then 'use filename instead
    Return global.confpath & "/covers/" & global.fixfilename(fullpath) & ".jpg"
      Else
    Return global.confpath & "/covers/" & global.fixfilename(Upper(Trim(Artist))) & "^^^" & global.fixfilename(Upper(Trim(Album)) & ".jpg")
  Endif
End




Public Sub ButtonLoad_Click()
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  Dim newfilename As String
  Dim currentfilename As String
  Coverlist.clear
  With Global
    Dialog.Path = .StartFolder
    PrevFilter = Dialog.filter
    Prevtitle = Dialog.title
    Dialog.Title = ("Load a Jpg cover image")
    Dialog.filter = ["*.jpg", "jpg files"]
  End With
  If Dialog.OpenFile() Then Return
  Dialog.filter = PrevFilter
  Dialog.title = PrevTitle
  
  Try Shell "mkdir -p " & global.confpath & "/covers/ >/dev/null 2>&1" Wait
  'newfilename = SConv(global.confpath& "/covers/" & Upper(ArtistText.text) & "^^^" & Upper(AlbumText.text) & ".jpg")
  newfilename = (Coverfile(ArtistText.text, AlbumText.text))
  currentfilename = (Dialog.Path)
  Try Kill newfilename
  Try Copy currentfilename To newfilename
  'TRY SHELL "cp " & currentfilename & " " & global.fixfilename(newfilename) & " >/dev/null" WAIT
  Try Picturebox1.picture = Picture.Load(newfilename)
  If Error Then
    Message.Error(("Error while loading the picture"), "Ok")
  Endif
  Picturebox1.refresh
  FMain.CoverRefresh()
  Try RemoveCoverCache(newfilename)
End

Public Sub Form_KeyPress()
  If Key.code = Key.escape Then ButtonCancel_Click()
End

Public Sub Form_Close()
  ButtonCancel_Click()
End

Public Sub SetACover(fullpath As String, artist As String, album As String, Optional forcesearch As Boolean = False)
  
  Dim timeout As Integer = 15 ' how much to wait for the other fetch to finish
  Dim tmpmessage As String
  Dim JustFileCover As Boolean = False 'are we going to set a cover for just this file?
  Dim tl As New TagLib
  
  If CoverManager.fetching Then
    CoverManager.HitCancel = True
    Repeat
      Wait 0.1
      timeout = timeout - 1
    Until (CoverManager.fetching = False) Or (timeout = 0)
  Endif
  
  If Upper(FullPath) Like "*.FLAC" Then
    If (Trim(Artist) = "") And (Trim(Album) = "") Then
      tl.init(FullPath)
      Artist = tl.Artist
      Album = tl.Album
      tl.tlFree()
    Endif
  Endif
  
  If (Trim(Artist) = "") And (Trim(Album) = "") Then
    JustFileCover = True
    tmpmessage = ("\nso you are going to set a cover for this particular file/stream")
    Message.Info(("Artist Or Album tag information are required to set a cover") & tmpmessage, ("Ok"))
  Endif
  progressbar1.value = 0
  If fetching Then
    Message.Info(("Another cover search is in progress, please wait for it to finish!"), "Ok")
    Return
  Endif

    If global.IsAudioFile(fullpath) Then
      If (ArtistText.text & AlbumText.text) <> Trim(Artist) & Trim(Album) Then
        Try CoverList.Clear
        'Try FlexSpace.Picture = picture.Load("null.png")
        Try CoverList.Refresh
        'Try FlexSpace.refresh
        ArtistText.text = Trim(Artist)
        AlbumText.text = Trim(Album)
        TextBox1.text = ArtistText.text & " " & AlbumText.text
        'picturebox1.picture = AudioForm.CoverBox.Picture
        Try Picturebox1.picture = picture.Load(coverfile(artist, album, fullpath))
        picturebox1.refresh
        Me.show
        Wait 0.1
        If ((Not Exist(Coverfile(ArtistText.text, AlbumText.text))) And Not JustFileCover) Or forcesearch Then
          textbox1_Click() 'start a fetch
        Endif
      Endif
      JustFileCover = JustFileCover
      MediaFileFullPath = FullPath
      Me.show
    Endif
End
