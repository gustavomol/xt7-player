' Gambas class file

Public Grid As Gridview
Public Recordings As New Collection
Private CatchedFlashes As New String[]
Private RecordProcess As Process
Private RecordingPids As New Collection


Public Function Record(InFile As String, OutFile As String) As Boolean
  Recordings.Add(outfile, infile)
  RecordProcess = Shell "tail -n +0 -f " & infile & " > " & Outfile
  RecordingPids.Add(RecordProcess.Handle, infile)
  Return True
End


Public Sub delete(FileName As String)
  'IF Message.Warning(("You are going to delete this file from disk, are you sure?"), ("Delete"), ("Don't delete")) = 1 THEN 
  If MyQuestion.ask(("You are going to delete this file from disk, are you sure?"), ("Delete"), ("Don't delete")) = 1 Then
    Try StopRecord(Filename)
    Try Kill filename
  Endif
End


Public Sub whiteall()
  Dim i As Integer
  For i = 0 To Grid.Rows.count - 1
    ' [GB2:BCOL] Grid[i, 2].background = Grid.background
    Grid[i, 2].background = Grid.Background
  Next 'i
End


Public Function StopAllRecordings() As Boolean
  Dim pid As String
  For Each pid In RecordingPids
    Shell "kill -HUP " & pid Wait
  Next 'pid
  whiteall()
End


Public Function StopRecord(InFile As String) As Boolean
  Recordings.Remove(Infile)
  Shell "kill -HUP " & RecordingPids[infile] Wait
  whiteall()
  Return True
End


Public Function Init() As Boolean
  Grid.rows.Count = 0
  Grid.Columns.count = 3
  Grid.Columns[0].Title = ("File Size")
  Grid.Columns[1].Title = ("File name")
  Grid.Columns[2].Title = ("Output File")
  Grid.column = 0
  Return True
End


Public Function IsRecording(infile As String) As Boolean
  If Recordings[infile] <> "" Then
    Return True
      Else
    Return False
  Endif
End

Public Function getflashes() As String[]
  Dim findout, cmdline As String
  Dim findouts As New String[]
  'find all file descriptors with reference to something like /tmp/Flash*
  Shell "find /proc/*/fd/ -lname '/tmp/Flash*'" To findout
  
  'for each of them, make sure that it is not an mplayer process (ie: our process)
  For Each findout In Split(findout, "\n", "", True)
    Shell "cat " & File.Dir(File.Dir(findout)) & "/cmdline" To cmdline
    If Not (cmdline Like "*mplayer*") Then
      If Not (cmdline Like "*tail*") Then 'ail is used by our recorder...
        findouts.Add(findout)
      Endif
    Endif
  Next 'findout
  Return findouts
End


Public Function UpdateGrid() As Boolean
  Dim FlashFile As String
  Dim LastSelected, c, r As Integer
  Dim i As Integer
  Dim newflashvideo, recordingfile As String = ""
  'DIM CatchedFlashesNew AS NEW String[]
  LastSelected = Grid.row
  Grid.rows.Count = 0
  Grid.Columns.count = 3
  ' Grid.Columns[0].Title = ("File Size")
  ' Grid.Columns[1].Title = ("File name")
  ' Grid.Columns[2].Title = ("Output File")
  Grid.column = 0
  'FOR EACH FlashFile IN Dir("/tmp", "Flash*", gb.file)
  For Each FlashFile In getflashes()
    'Check if it is anything new
    If CatchedFlashes.count > 0 Then
      If CatchedFlashes.find(FlashFile) < 0 Then
        CatchedFlashes.Add(FlashFile)
        newflashvideo = FlashFile
      Endif
        Else 'catched flashes is zero count but we're enumerating some flash videos, means we have new flash!
          newflashvideo = FlashFile
    Endif

    Try Grid.Rows.count = Grid.Rows.count + 1
    Try Grid[Grid.Rows.count - 1, 1].text = (FlashFile)
    Try recordingfile = Recordings[FlashFile]
    Try Grid[Grid.Rows.count - 1, 2].text = recordingfile
    Try Grid[Grid.Rows.count - 1, 0].text = ((Stat(recordingfile).size) Div 1024) & "KB"

    If Grid[Grid.Rows.count - 1, 2].text <> "" Then
      'IF Stat(("/tmp/" & FlashFile)).size > Stat(Grid[Grid.Rows.count - 1, 2].text).size THEN
      If ((Stat(FlashFile).size) Div 1024) & "KB" <> Replace(Grid[Grid.Rows.count - 1, 2].text & "KB", "*", "") Then
        'Grid[Grid.Rows.count - 1, 2].background = color.gradient(Color.red, Grid.background)
        Grid[Grid.Rows.count - 1, 0].text = Grid[Grid.Rows.count - 1, 0].text & "*"
          Else
        'Grid[Grid.Rows.count - 1, 2].background = Grid.background
      Endif
        '   ELSE
        ' Grid[Grid.Rows.count - 1, 2].background = Grid.background
    Endif
  Next 'FlashFile
  Grid.rows[Grid.row].selected = False
  Grid.row = LastSelected
  Grid.rows[Grid.row].selected = True

  'At the end, CatchedFlashes and libraryGrid Has to be in sync:
  CatchedFlashes.clear
  For i = 0 To Grid.Rows.count - 1
    CatchedFlashes.Add(Grid[i, 1].text)
  Next 'i
  If newflashvideo <> "" Then Raise NewVideo(newflashvideo)

  If Grid.Rows.count > 0 Then
    For r = 0 To Grid.Rows.Max
      For c = 0 To Grid.Columns.Max
        Try Grid[r, c].Background = GeneralOptions.backcolorChooseBTN1.Background
        Try Grid[r, c].Foreground = GeneralOptions.ColorChooseBTN1.Background
      Next
    Next
  Endif

  Return True
End

Event NewVideo(LastVideoPath As String)
