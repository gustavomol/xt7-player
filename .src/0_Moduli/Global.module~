' Gambas module file

'Copyright (C) 2007, 2008 Antonio Orefice
' Gambas module file


Public UncommonVideoFilters As String 
Public Videofilter As String
Public videofiltername As String 
Public UncommonAudiofilters As String
Public Audiofilter As String
Public audiofiltername As String
Public Slowmedia As String 
Public NonTaggableMedia As String
Public NetworkURI As String 
'Please terminate ALLFILTERS with ";"!
Public ALLFilters As String 
Public quotes As String 
Public aboutmessage As String 
Public Alternatecolor As Integer 
Public FromChains As Boolean 
Public GuiPercent As Integer 
Public CheckingSize As Boolean
Public LSyncing As Boolean 
Public LSyncingMessage As String 
Public AppName As String 
Public ConfPath As String 
Public CustomBindKeys As String 
Public XbindkeysBIN As String 
Public SocketFile As String 
Public rowpadding As Integer 
Public Highlightmore As Integer 
Public coverHeight As Integer 
Public initearlyformsdone As Boolean 
Public initlatelyformsdone As Boolean
Public RequiredVersion As String 
Public FirstTimeSettignsLoaded As Boolean 
Public formaperto As Boolean 
Public IsNextSelected As Boolean 
Public TranslateMeFirst As String 
'Translation is needed if the control string is untranslated and we don't use english as default language
Public TranslationNeeded As Boolean 
Public Pre As String 
Public StartFolder As String 
Public ScreenshotFolder As String 
Public CurrentProfile As String 
Public Historyfile As String
Public FormW As Integer 
Public FormH As Integer 
Public FormX As Integer 
Public FormY As Integer 
Private SettingsFileName As String 
Public DelayLoadStates As Timer 
Public MaxHistory As Integer 'how many played files to remember

Public NOsoftvolmessagefile As String

Public Sub init()
  UncommonVideoFilters = "Flash*;*.ts;*.m2v;*.m4v;*.mpeg;*.flv;*.gvi;*.iso;*.fli;*.flv;*.mpg;*.mpv;*.vob;*.viv;*.swf;*.rm;*.rmvb;*.dv;*.3gp;*.qt;*.divx;*.asx;*.ogm;*.ogv;*.oga;*.m4v;*.speex;*.spx;*.wavpack;*.wv;*.trueaudio;*.tta"
  Videofilter = "*.avi;*.mpg;*.mp4;*.mov;*.mkv;*.asf;*.ogm;*.ogv;*.wmv;"
  videofiltername = ("Common Video Files")
  UncommonAudiofilters = "*.wma;*.ram;*.ac3;*.wav;*.aiff;*.aiffc;*.aac;*.8svx;*.pls;*.dts;"
  Audiofilter = "*.mp3;*.ogg;*.aac;*.flac;*.mpc;*.ac3;"
  audiofiltername = ("Common Audio Files")
  Slowmedia = "cddb:// cdda:// mms:// http:// http_proxy:// rtp:// rtsp:// ftp:// udp:// smb:// "  'we'll get tag information on user prefs
  NonTaggableMedia = "tv:// radio:// cdda:// cddb:// mf:// pvr:// dvb:// unsv:// sdp:// mpst:// tivo://"
  NetworkURI = " mms:// http:// http_proxy:// rtp:// rtsp:// ftp:// udp:// "
  'Please terminate ALLFILTERS with ";"!
  'ALLFilters  '= Videofilter & ";" & AudioFilter & ";" & UncommonVideoFilters & ";" & UncommonAudiofilters
  quotes = "\""       'double quotes in strings
  aboutmessage = ("Xt7-Player version ") & Application.version & (" by Antonio Orefice.\nxt7player@gmail.com\n\nThanks to Benoît Minisini for Gambas.") & "\n\n" & "I92guboj - Spanish translation \n" & "Wackenroader - Brazilian Portuguese translation \n" & "Shimingzhou - simplified Chinese translation\n" & "Jacky Bamière - French translation\n" & "SymbianFlo - Testing and 'spiritual' support\n" & "NickiNicki - Bug reports\n" & "\n"
  Alternatecolor = &EEEEFF&
  FromChains = False 'will track if chains form has opened another window
  GuiPercent = 0
  CheckingSize = False
  LSyncing = False 'is true when library is syncing.
  LSyncingMessage = ("Syncing Library, please wait...")
  AppName = "Xt7-Player"
  ConfPath = Settings.DefaultDir & "/" & Appname
  CustomBindKeys = "Xt7BindKeys"
  XbindkeysBIN = global.confpath & "/" & CustomBindKeys
  SocketFile = global.confpath & "/.localsocket"
  rowpadding = 8 'space around every row in library and playlist
  Highlightmore = 1 'highlighted item font size addition
  coverHeight = (Desktop.H Div 17)
  initearlyformsdone = False
  initlatelyformsdone = False
  RequiredVersion = "2.99.5"
  FirstTimeSettignsLoaded = False
  formaperto = False
  IsNextSelected = True 'indica se abbiamo finito la playlist.
  TranslateMeFirst = ("Translate me first")  'act as a control string if the project is translated
  'Translation is needed if the control string is untranslated and we don't use english as default language
  TranslationNeeded = ((TranslateMeFirst = "Translate me first") And Not (System.Language Like "en_*"))
  Pre = "* "
  StartFolder = User.home  'fixme: allow to choose
  ScreenshotFolder = settings.defaultdir & "/" & Appname & "/" & ".xt7-screenshots/"
  HistoryFile = settings.defaultdir & "/" & Appname & "/" & ".history.txt"
  CurrentProfile = ""
  FormW = 400      'As gambas does not update form dimesions on fullscreen switch
  FormH = 300      'we have TO DO it manually
  FormX = 0
  FormY = 0
  SettingsFileName = "default"
  NOsoftvolmessagefile = global.confpath & "/.Nodisplaysoftvolmessage"
  MaxHistory = 15
  DelayLoadStates = New Timer As "DelayLoadStates"
End


Public Function Center(F1 As Form, F2 As Form)
  'Center F2 in F1
  F2.x = F1.screenx + (f1.w / 2) - (F2.w / 2)
  F2.y = F1.screeny + (f1.h / 2) - (F2.h / 2)
End

Public Sub CenterObj(parent As Object, child As Object)
  'Center O2 in O1,
  'O2 is child of O1

  child.x = (parent.x + (parent.w / 2) - (child.w / 2))
  child.y = (parent.y + (parent.h / 2) - (child.h / 2))
End

Public Function fixfilename(filename As String) As String
  'make a filename more bash friendly...
  Dim out As String
  out = Replace(filename, "/", "_")
  out = Replace(out, "&", "_")
  out = Replace(out, "*", "_")
  out = Replace(out, "?", "_")
  out = Replace(out, Chr(92), "_") 'backslash \
  out = Replace(out, "@", "_")
  out = Replace(out, "(", "_")
  out = Replace(out, ")", "_")
  out = Replace(out, "[", "_")
  out = Replace(out, "]", "_")
  Return out
End


Public Function UriPrefix(Uri As String) As String

  If uri Like "*://*" Then
    'find ":" and return 2 characters more
    Return Left(URI, InStr(URI, ":") + 2)
      Else
    Return ""
  Endif
End



Public Function IsNontaggableMedia(URI As String) As Boolean
  If (InStr(NonTaggableMedia, Lower(UriPrefix(URI))) > 0) Then
    Return True
      Else
    Return False
  Endif
End


Public Function IsNetworkURI(URI As String) As Boolean
  If (InStr(NetworkURI, Lower(UriPrefix(URI))) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Sub AddUserExtensions(exts As String)
  Dim curext As String
  Dim returnexts As String = ""
  ALLFilters = Videofilter & ";" & AudioFilter & ";" & UncommonVideoFilters & ";" & UncommonAudiofilters
  For Each curext In Split(exts, ",", "", True)
    If Trim(curext) <> "" Then returnexts = returnexts & "*." & Trim(curext) & ";"
  Next 'curext
  If Trim(returnexts) <> "" Then
    ALLFilters = ALLFilters & returnexts
  Endif
  Debug allfilters
End



Public Function IsMediaFile(filename As String) As Boolean
'will return true if filename extension is in audiofilter or videofilter OR if the file begins with Flash*
  Dim fileExt As String = "." & File.Ext(filename)
  If (File.BaseName(filename) Like "Flash*") Then Return True
  If (fileext = ".") Then Return False
  If (InStr(Upper(ALLFilters), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function IsAudioFile(filename As String) As Boolean
'will return true if filename extension is in audiofilter or videofilter
  Dim fileExt As String = "." & File.Ext(filename)
  Dim FilterList As String = UncommonAudiofilters & ";" & Audiofilter
  If fileext = "." Then Return False
  If (InStr(Upper(FilterList), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function IsVideoFile(filename As String) As Boolean
'will return true if filename extension is in audiofilter or videofilter
  Dim fileExt As String = "." & File.Ext(filename)
  Dim FilterList As String = UncommonVideofilters & ";" & Videofilter
  If fileext = "." Then Return False
  If (InStr(Upper(FilterList), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function IsDVBuri(filename As String) As Boolean
'will return true if filename like dvb//
 Return Lower(filename) Like "dvb://*"
End

Private Function ConfPath_read() As String
  Return Settings.defaultdir & "/" & Appname
End


Public Function NoFileSuffix(Myfilename As String) As String
  If Myfilename Like "file://*" Then
    Return Mid(MyfileName, 8)
      Else
    Return Myfilename
  Endif
End

Public Sub CheckResolution(TheForm As Form)
'will resize the form if it is too big
  Dim NewWidth As Integer = TheForm.w
  Dim NewHeight As Integer = TheForm.h
  Dim TooBig As Boolean = False
  If Not (TheForm.Maximized Or CheckingSize) Then
    CheckingSize = True
    'WAIT 0.2
    If (Desktop.w - TheForm.w) < ((Desktop.w Div 100) * GuiPercent) Then
      NewWidth = (Desktop.w Div 100) * (100 - GuiPercent)
      TooBig = True
    Endif
    If (Desktop.h - TheForm.h) < ((Desktop.h Div 100) * GuiPercent) Then
      NewHeight = (Desktop.h Div 100) * (100 - GuiPercent)
      TooBig = True
    Endif
    If TooBig Then TheForm.Resize(NewWidth, NewHeight)
    CheckingSize = False
  Endif
End

Public Function GetTotalFiles(dragdata As String, FromDesktop As Boolean) As Integer
'will descend in the dragdata and count the files
  ' DIM droppedfiles, subdir AS String[]
  ' DIM DroppedFile, subfile AS String
  ' DIM total AS Integer = 0
  ' DIM subtotal AS Integer = 0
  ' DIM IsFile, IsURI, IsDirectory AS Boolean
  ' ' 
  ' droppedfiles = Split(dragdata, "\n")
  ' FOR EACH DroppedFile IN Droppedfiles   
  '   IF Trim(DroppedFile) <> "" THEN
  '     IF FromDesktop THEN 
  '       droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
  '         ELSE 
  '       droppedfile = Global.NoFileSuffix(Global.FormatDrag(droppedfile))
  '     ENDIF
  '     
  '     ISFile = FALSE
  '     IsDirectory = FALSE
  '     IsUri = FALSE
  '     TRY ISFile = (Stat(droppedfile).type = gb.file)
  '     TRY IsDirectory = (Stat(droppedfile, TRUE).type = gb.Directory)
  '     IsUri = (droppedfile LIKE "*://*")
  '     IF (ISFile OR IsUri) THEN 
  '       total = total + 1  
  '       ELSE IF IsDirectory THEN
  '         subdir = Dir(droppedfile)
  '         FOR EACH subfile IN subdir
  '           total = total + GetTotalFiles(droppedfile & "/" & subfile, FALSE)
  '         NEXT
  '     ENDIF
  '   ENDIF 
  ' NEXT

  Dim droppedfiles As String[]
  Dim DroppedFile As String
  Dim total As Integer = 0
  Dim subtotal As String = 0
  droppedfiles = Split(dragdata, "\n", "", True)
  For Each DroppedFile In Droppedfiles
    If FromDesktop Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
        Else
      droppedfile = Global.NoFileSuffix(Global.FormatDrag(droppedfile))
    Endif
    'PRINT "DEBUG: Global: GetTotalFiles(): ls -laRL " & DroppedFile & " |wc -l"
    Shell "sync" Wait
    ' [GB2:QUOT] Shell "ls -LR1 " & Quote.Shell(DroppedFile) & " |grep \\. |grep -v \\/ |sort -u |wc -l" Wait To subtotal
    Shell "ls -LR1 " & Shell$(DroppedFile) & " |grep \\. |grep -v \\/ |sort -u |wc -l" Wait To subtotal
    total = total + CInt(Trim(subtotal))
  Next
  Return total
End

Public Sub SaveAllSettings(ProfileName As String, Optional WithLibraryAndPls As Boolean = True, Optional cachedopts As String = "")
  Dim MySettings As New SettingsClass
  Dim cachefile As File
  If cachedopts <> "" Then
    cachefile = Open Global.confpath & "/" & ProfileName & ".profile.cache" For Write Create
      Print #cachefile, cachedopts
    Close cachefile
    'PRINT "Debug: SaveAllSettings(): cachedopts= " & cachedopts
    'SHELL "echo " & cachedopts & " > " & Global.confpath & "/" & ProfileName & ".profile.cache"
  Endif
  MySettings.Save(Fmain, Global.confpath & "/" & ProfileName)
  MySettings.Save(Chains, Global.confpath & "/" & ProfileName)
  MySettings.Save(XConfigureAudioDriver, Global.confpath & "/" & ProfileName)
  MySettings.Save(XConfigureVideoDriver, Global.confpath & "/" & ProfileName)
  MySettings.Save(VFiltersCfg, Global.confpath & "/" & ProfileName)
  MySettings.Save(AFiltersCfg, Global.confpath & "/" & ProfileName)
  MySettings.Save(SubAndOsd, Global.confpath & "/" & ProfileName)
  MySettings.Save(GeneralOptions, Global.confpath & "/" & ProfileName)
  MySettings.Save(SearchFields, Global.confpath & "/" & ProfileName)
  MySettings.Save(AudioVideoCodecs, Global.ConfPath & "/" & ProfileName)
  MySettings.Save(VideoEqualizer, Global.ConfPath & "/" & ProfileName)
  HotKeys.SaveHotKeys(Global.confpath & "/" & ProfileName)
  ComboHistory.AddHistory(FMain.Searchfield, FMain.Searchfield.text)
  ComboHistory.AddHistory(FMain.SearchfieldPLS, FMain.SearchfieldPLS.text)
  ComboHistory.AddHistory(FMain.Searchfielddvb, FMain.Searchfielddvb.text)
  ComboHistory.AddHistory(FMain.youSearchfield, FMain.youSearchfield.text)
  ComboHistory.SaveHistory(Fmain.Searchfield, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.SearchfieldPLS, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.Searchfielddvb, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.Urlbox, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.youSearchfield, Global.confpath & "/" & ProfileName)
  GeneralOptions.SaveWatchDir(Global.confpath & "/" & ProfileName)
  GeneralOptions.SaveExcludeDir(Global.confpath & "/" & ProfileName)
  If WithLibraryAndPls Then
    'playlist and library are profile indipendent
    Fmain.MyLibrary.Save(Fmain.LibraryGrid, Global.confpath)
    Fmain.MyPlaylist.Save(Fmain.PlayListGrid, Global.confpath)
    Fmain.MyDVBTList.Save(Fmain.dvbtgrid, Global.confpath)
  Endif
  'Settings.Write(Fmain)
  fmain.mypodcast.SavePods(global.ConfPath & "/mypods.txt", fmain.PodcastTree)
End


Public Sub LoadEarlySettings(ProfileName As String)
  Dim MySettings As New SettingsClass
  'DIM MyForms AS NEW Object[]
  'DIM TheForm AS Object
  Dim WasVisible As Boolean = False
  Dim out As String
  
  'changed name from Xt7-Player to xt7-player, config transition needed:
  Shell "mv -f " & Settings.DefaultDir & "/Xt7-Player.conf " & Settings.DefaultDir & "/xt7-player.conf >/dev/null 2>&1" Wait To out
  MySettings.Load(Fmain, Global.confpath & "/" & ProfileName)
  MySettings.Load(GeneralOptions, Global.confpath & "/" & ProfileName) '<--- rallenta l'avvio
  MySettings.Load(Searchfields, Global.confpath & "/" & ProfileName)
 SettingsFileName = ProfileName
  MySettings.Load(VideoEqualizer, Global.confpath & "/" & SettingsFileName)
End



Public Sub LoadAllSettings(ProfileName As String)
  Dim MySettings As New SettingsClass
  'DIM MyForms AS NEW Object[]
  'DIM TheForm AS Object
  Dim WasVisible As Boolean = False
  Dim out As String
  'changed name from Xt7-Player to xt7-player, config transition needed:
    Shell "mv -f " & Settings.DefaultDir & "/Xt7-Player.conf " & Settings.DefaultDir & "/xt7-player.conf >/dev/null 2>&1" Wait To out

  MySettings.Load(Fmain, Global.confpath & "/" & ProfileName)
  MySettings.Load(GeneralOptions, Global.confpath & "/" & ProfileName)
  
  SettingsFileName = ProfileName
  DelayLoadStates_Timer()
  AddUserExtensions(GeneralOptions.KnownExtensions.text)
  MySettings.Load(VideoEqualizer, Global.confpath & "/" & SettingsFileName)
End




Public Sub DelayLoadStates_Timer()
  Dim MySettings As New SettingsClass
  Dim MyForms As New Object[]
  Dim TheForm As Object
  Dim WasVisible As Boolean = False
  
  Debug "Start at: " & Time
  'IF NOT FMain.visible THEN 
  Try fmain.mouse = Mouse.wait
  If Not (fmain.visible Or Fmain.Closing) Then
    Debug "Waiting..."
    Return
  Endif
  DelayLoadStates.Stop
  'IF (NOT fmain.fullyloaded) THEN 
  If (Not global.initearlyformsdone) Then
    'WAIT 0.5
    fmain.InitEarlyForms()
  Endif
  
  MyForms.Add(Chains)
  MyForms.Add(XConfigureAudioDriver)
  MyForms.Add(XConfigureVideoDriver)
  MyForms.Add(SubAndOsd)
  MyForms.Add(GeneralOptions)  'viene caricato in allinit_pre, perchè è necessario anche qui? sembra che non carichi le relative impostazioni...
  'searchfields is an early form... MyForms.Add(SearchFields) 
  MyForms.Add(AudioVideoCodecs)
  MyForms.Add(VideoEqualizer)
  MyForms.Add(VFiltersCfg)
  MyForms.Add(AFiltersCfg)
  For Each TheForm In MyForms
    WasVisible = TheForm.visible
    TheForm.hide
    'Try MySettings.Load(TheForm, Global.confpath & "/" & SettingsFileName)
    MySettings.Load(TheForm, Global.confpath & "/" & SettingsFileName)
    TheForm.visible = WasVisible
  Next
  FirstTimeSettignsLoaded = True
  initlatelyformsdone = True
  Try fmain.mouse = Mouse.default
  Debug "Ends at: " & Time

End


Public Function FormatDrag(mystring As String) As String
'will replace %00..%FF occurrences in a string with ascii characters
'it is useful for dragged text in url/like format
  Dim Hcode As String
  Dim Char As String
  Dim i As Integer = 1
  Dim ReturnString As String
  
  ReturnString = MyString
  While i <= Len(ReturnString) - 2 'LAST two characters are useless
    If Mid(ReturnString, i, 1) = "%" Then
      Hcode = Mid(ReturnString, i + 1, 2)
      Try char = Chr(Val("&H" & Hcode & "&")) 'fixme, why "TRY" is needed on kubuntu/kde4.1?
      
      If IsAscii(char) Then
        ReturnString = Replace(ReturnString, "%" & Hcode, char)
      Endif
    Endif
    i = i + 1
  Wend
  
  'we have a problem with gnome here, it adds "\r" at the end of filename
  If Trim(returnstring) <> "" Then
    If Right(returnstring, 1) = "\r" Then
      returnstring = Left(returnstring, Len(returnstring) - 1)
      ''Replace(returnstring, "\r", "")
    Endif
  Endif
  Return ReturnString
End




'/ SaveLoad All -----------------------





' VfiltersCfg, AFiltersCfg and GeneralOptions related functions --------------------------------------

Public Sub FilterListFromTab(TheTabStrip As Tabstrip, FilterList As Listbox)
  'find the current tab caption in the filter list
  Dim i As Integer = 0
  Dim UpperTabCaption As String
  UpperTabCaption = Upper(Replace(TheTabStrip.text, "&", ""))
    For i = 0 To FilterList.count - 1
      If (Upper(FilterList.List[i]) = UpperTabCaption) Or (Upper(FilterList.List[i]) = pre & UpperTabCaption) Then
        FilterList.index = i
        FilterList.Refresh
        Break
      Endif
    Next 'i
End

Private Sub Resize(AComboBox As Combobox)
'will resize combobox width according to it's contents
  Dim Astring As String
  Dim i, TmpWidth, TheMax As Integer = 0
  For i = 0 To AcomboBox.count - 1
    ' [GB2:FNTW] TmpWidth = AcomboBox.Font.TextWidth(AComboBox[i].Text)
    TmpWidth = AcomboBox.Font.TextWidth(AComboBox[i].Text)
    If TmpWidth > TheMax Then TheMax = TmpWidth
  Next 'i
  AComboBox.w = TheMax + 32
  
End

Public Function RemoveShortcut(Tmpstring As String) As String
  '&AText -> Atext
  Return Replace(TmpString, "&", "")
End


Public Function TabIndexByName(TabName As String, TheTabStrip As Tabstrip) As Integer
Dim i As Integer
Dim UPTabName As String
Dim theobject As Object
      UPTABName = Upper(TabName)
      If UPTABNAME = "MYEXPAND" Then UPTABName = "EXPAND" 'gb3 workaround
      ' IF TheTabstrip.Parent.name = "GENERALOPTIONSFRAME" THEN
      '   FOR i = 0 TO GeneralOptions.UntranslatedTabNames.Count - 1
      '     IF UPTABName = GeneralOptions.UntranslatedTabNames[i] THEN RETURN i
      '   NEXT 'i      
      '     ELSE
        For i = 0 To TheTabStrip.count - 1
          If (UPTABName = Upper(RemoveShortCut(TheTabStrip[i].text))) Or (UPTABName = pre & Upper(RemoveShortCut(TheTabStrip[i].text))) Then Return i
          For Each theobject In TheTabStrip[i].Children
            If theobject Is Scrollview Then
              If (Upper(theobject.tag) = upTabName) Then Return i
                Else
              If theobject Is Label And theobject.name Like "NOPARSETAB*" Then
                'debug theobject.tag
                If (Upper(theobject.tag) = upTabName) Then Return i
              Endif
            Endif
          Next 'theobject
        Next 'i
      'ENDIF   
      
      'try to find the tab in a different way too:
      'TabIndexByName scrollview
      'for each theobject in TheTabStrip.
      
      'return -1 if no tab is found
      Return -1
End


Public Sub DrawGui(TheParameters As Variant[], TabCaption As String, TheTabstrip As Tabstrip, Switchable As Boolean, Optional TheTooltip As String = "")
  
  ' TabstripS
  '     Tabstrip
  '         MyScrollview
  '                   AnHbox
  '                       [if switchable => Checkbox, else Label] - Object - CommentLabel
  '                   AnHbox
  '                       [if switchable => Checkbox, else Label] - Object - CommentLabel
  '                   ...
  '                   ...  
  '                   AnHbox
  '                       [if switchable => Checkbox, else Label] - Object - CommentLabel  
  '
  
  Dim MyScrollView As Object
  Dim AnHBOX As Object
  Dim AComboBox As Combobox
  Dim ACheckBox As CheckBox
  Dim ATextBox As Textbox
  Dim ATextLabel As TextLabel
  Dim ALabel, AComment As Label
  Dim i As Integer
  Dim f As Float
  Dim ASpinBox As SpinBox
  Dim AFloatSpinBox As FloatSpinBox
  Dim CurrentParams As String[]
  Dim MyVslider As VSlider
  Dim MyReq As StringFileReqClass
  Dim ResetDefault As Myresetbutton
  
  'Find the destination Tab
  Try TheTabstrip.index = TabIndexByName(TabCaption, TheTabStrip)
  'Find the Scrollview 
  For Each MyScrollview In TheTabstrip.Children
    If MyScrollview Is Scrollview Then Break
  Next


  For Each CurrentParams In TheParameters
    If Not (CurrentParams[0] = "VSLIDER") Then
     'Make a subcontainer, child of the scrollview
      AnHbox = New HBox(myscrollview) As "dynaobj"

      
      AnHbox.name = CurrentParams[CurrentParams.count - 2] & ".HBox"
      AnHBOX.Height = 28
      AnHBOX.Spacing = 8
      If TheTooltip <> "" Then AnHbox.Tooltip = TheTooltip
        Else
      MyScrollView.Arrangement = Arrange.LeftRight 'With Vslider we must arrange horizontally
      MyScrollView.spacing = 2
      AnHbox = New VBox(myscrollview) As "dynaobj"
      AnHbox.name = CurrentParams[CurrentParams.count - 2] & ".HBox"

      ' [GB2:FNTW] AnHBOX.Width = FMain.Font.TextWidth("31.25")
      AnHBOX.Width = FMain.Font.TextWidth("31.25")
      AnHBOX.Height = 200
      AnHBOX.Spacing = 8
    Endif

    'Let's Draw The Label
    If Not ((CurrentParams[0] = "SWITCH") Or (CurrentParams[0] = "SUBLABEL")) Then
      If (Not Switchable) Then
        ALabel = New Label(AnHBox) As "dynaobj"
        ALabel.name = CurrentParams[CurrentParams.count - 2] & ".Label"
        ALabel.text = CurrentParams[1]
        ALabel.AutoResize = True
        ALabel.font = TheTabStrip.font
        ALabel.Foreground = Color.TextForeground
          Else
        ACheckbox = New Checkbox(AnHBox) As "dynaobj"
        ACheckbox.Name = CurrentParams[CurrentParams.Count - 2] & ".CheckBox"
        ACheckbox.text = CurrentParams[1]
        ' [GB2:FNTW] ACheckBox.width = Acheckbox.Font.TextWidth(Acheckbox.Text) + 32
        ACheckBox.width = Acheckbox.Font.TextWidth(Acheckbox.Text) + 32
      Endif
    Endif

    
    'Next, we'll parse the Parameter DataType 
    'Syntax for TheParameters is:["FREE", caption, default, Textbox name, comment]
    If CurrentParams[0] = "FREE" Then 'Let's Draw a TextBox
      'AnHBOX.padding = 3
      ATextBox = New TextBox(AnHBox) As "dynaobj"
      ATextBox.name = CurrentParams[CurrentParams.count - 2] & ".TextBox"
      ATextBox.text = CurrentParams[2]
      ATextBox.expand = True
      ATextBox.refresh

    'Syntax for TheParameters is:["SUBLABEL", caption(SubFilterName), TextLabel name ,comment]
    Else If CurrentParams[0] = "SUBLABEL" Then 'Let's Draw a Textlabel
      'AnHBOX.padding = 3
      Atextlabel = New TextLabel(AnHBOX) As "dynaobj"
      ATextLabel.Alignment = Align.left
      AtextLabel.name = CurrentParams[CurrentParams.count - 2] & ".textlabel"
      ATextLabel.text = CurrentParams[1]
      'ATextLabel.tag = CurrentParams[2]
      ' [GB2:FNTW] ATextLabel.w = Atextlabel.Font.TextWidth(CurrentParams[1])
      ATextLabel.w = Atextlabel.Font.TextWidth(CurrentParams[1])
      AtextLabel.refresh

    
    Else If CurrentParams[0] = "CHOOSE" Then       'Let's Draw a ComboBox
    'Syntax for TheParameters is: ["CHOOSE", Caption, Choice1,...., ChoiceN, CheckBoxName,Comment]
      AComboBox = New ComboBox(AnHBox) As "dynaobj"
      AComboBox.refresh
      AComboBox.name = CurrentParams[CurrentParams.count - 2] & ".ComboBox"
      'Fill ComboBox items:
     
      For i = 2 To CurrentParams.count - 3
        AComboBox.Add(CurrentParams[i])
        'Resize(AcomboBox)
      Next 'i
      AComboBox.text = CurrentParams[2]
      AComboBox.expand = True

'AllParams.Add(["VSLIDER", "31", "-12", "0", "12", "Equalizer1", ""])
'                    0       1     2     3    4        5          6


    Else If CurrentParams[0] = "VSLIDER" Then 'Let's Draw a SpinBox
      'Syntax for TheParameters is: ["VSLIDER", Caption, Min, Default , Max, VsliderName,Comment]
      
      ' ResetDefault = NEW myresetButton(AnHBOX)
      ' ResetDefault.name = CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
      ' ResetDefault.tag = CurrentParams[3]

      MyVslider = New VSlider(AnHBox) As "dynaobj"
      MyVslider.Arrangement = Arrange.Vertical
      MyVslider.Name = CurrentParams[CurrentParams.Count - 2] & ".Vslider"
      
      i = CurrentParams[2]
      MyVslider.MinValue = i
      i = CurrentParams[4]
      MyVslider.MaxValue = i
      i = CurrentParams[3]
      MyVslider.Value = i
      MyVslider.Sstep = 1
      MyVslider.PageStep = 1
      MyVslider.expand = True
      AnHBOX.spacing = 0

    Else If CurrentParams[0] = "RANGE" Then 'Let's Draw a SpinBox
      'Syntax for TheParameters is: ["RANGE", Caption, Min, Default , Max, SpinBoxName,Comment]
  
      
      ASpinBox = New SpinBox(AnHBox) As "dynaobj"
      ASpinBox.Name = CurrentParams[CurrentParams.Count - 2] & ".SpinBox"
      i = CurrentParams[2]
      ASpinBox.MinValue = i
      i = CurrentParams[4]
      ASpinBox.MaxValue = i
      i = CurrentParams[3]
      ASpinBox.Value = i
      ASpinBox.expand = True
  
      ResetDefault = New MyresetButton(AnHBOX) As "dynaobj"
      ResetDefault.name = "NOPARSE" & CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
      ResetDefault.tag = CurrentParams[3]
    
    Else If CurrentParams[0] = "SWITCH" Then 'Let's Draw a checkbox
      'Syntax for TheParameters is: ["SWITCH", Caption, ENABLED|DISABLED, SpinBoxName,Comment]
      Acheckbox = New CheckBox(AnHbox) As "dynaobj"
      Acheckbox.name = CurrentParams[CurrentParams.Count - 2] & ".CheckBox"
      Acheckbox.text = CurrentParams[1]
      ' [GB2:FNTW] ACheckBox.width = Acheckbox.Font.TextWidth(Acheckbox.Text) + 32
      ACheckBox.width = Acheckbox.Font.TextWidth(Acheckbox.Text) + 32
      If CurrentParams[2] = "ENABLED" Then
        ACheckBox.value = True
          Else
        ACheckBox.value = False
      Endif
      
      
    Else If CurrentParams[0] = "FILEREQ" Then 'Let's Draw a StringFileReq
      'Syntax for TheParameters is:["FILEREQ", Caption, "FILE"|"DIR", FileReq Name ,comment]

      MyReq = New StringFileReqClass(AnHbox) As "dynaobj"
      MyReq.name = CurrentParams[CurrentParams.Count - 2] & ".StringFileReqClass"
      MyReq.FileMode = (CurrentParams[2] = "FILE")
      'hack: write default path here in case of -dvd-device
      If CurrentParams[1] Like "*DVD*" Then MyReq.value = "/dev/dvd"
            
            
    Else If CurrentParams[0] = "RANGEFLOAT" Then 'Let's Draw a FloatSpinBox
        'Syntax for TheParameters is: ["RANGE", Caption, Min, Default , Max, SpinBoxName,Comment]

     
        
        AFloatSpinBox = New FloatSpinBox(AnHBox) As ".AFloatSpinBox"
        AFloatSpinBox.DecimalSeparator = "."
        AFloatSpinBox.Name = CurrentParams[CurrentParams.Count - 2] & ".FloatSpinBox"
        f = CurrentParams[2]
        AFloatSpinBox.MinValue = f
        f = CurrentParams[4]
        AFloatSpinBox.MaxValue = f
        f = CurrentParams[3]
        AFloatSpinBox.value = f
        AFloatSpinBox.expand = True
        ' AFloatSpinBox.Width = 300
        ' AFloatSpinBox.Background = Color.red

   ResetDefault = New MyresetButton(AnHBOX) As "dynaobj"
        ResetDefault.name = "NOPARSE" & CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
        ResetDefault.tag = CurrentParams[3]


    Endif
    
    'Write the comment
    If CurrentParams[CurrentParams.Count - 1] <> "" Then
        AComment = New Label(AnHBox) As "dynaobj"
        AComment.name = CurrentParams[CurrentParams.count - 2] & ".CommentLabel"
        'PRINT AComment.name 'debug
        'AComment.text = "(" & TheParameters[TheParameters.Count - 1] & ")"
        AComment.text = CurrentParams[CurrentParams.Count - 1]
        AComment.AutoResize = True
        AComment.font = TheTabStrip.font
        AComment.font.italic = True
        AComment.Foreground = Color.Lighter(Color.TextForeground)
    Endif
      
  Next
End

'/ VfiltersCfg and AFiltersCfg related functions --------------------------------------


Public Function MouseInside(Obj As Object) As Boolean

  If (Mouse.screenX >= Obj.screenx) And (Mouse.screenX < Obj.screenx + Obj.width) And (Mouse.screeny >= Obj.screeny) And (Mouse.screeny < Obj.screeny + Obj.height) Then
    Return True
      Else
    Return False
  Endif
End



Public Function OneOf(one As String, two As String) As String
  If one <> "" Then
    Return one
      Else
    Return two
  Endif
End


Public Sub dynaobj_change()
  'dynamically objects are all on goup "dynapobj"
  'that way i can manage their changes
  'unvalidate cachedoptions and notify users that it needs to apply new settings
  Dim goon As Boolean = False
  If (Last Is Checkbox) Or (Last Is Spinbox) Or (Last Is Floatspinbox) Or (Last Is Textbox) Then
    goon = True
  Endif
  If (Last Is Label) Or (Last Is Slider) Or (Last Is Combobox) Then
    goon = True
  Endif
  If Not goon Then Return
  NotifyChanges(Last)
End

Public Sub dynaobj_click()
  Dim goon As Boolean = False
  If (Last Is Checkbox) Or (Last Is Combobox) Then
    goon = True
  Endif
  If Not goon Then Return
  NotifyChanges(Last)
End


Public Sub NotifyChanges(obj As Object)
  Dim myform As Object
  'Object.SetProperty(Object.
  myform = Last
  Repeat
  If Not (myform Is Form) Then Try myform = myform.parent
  Until (myform Is Form)
  If fmain.fullyloaded Then
    If myform.visible Then
      RedApplyBtnColor()
      Debug "Cached Options unvalidated"
      fmain.cachedopts = ""
    Endif
  Endif

End

Public Sub NotifyApplyNeeds()
  RedApplyBtnColor()
  If fmain.cachedopts <> "" Then
    Debug "Cached Options unvalidated"
    fmain.cachedopts = ""
  Endif
End


Public Sub ResetApplyBtnColor()
  Try AFiltersCfg.ApplyBTN.Background = color.Default
  Try AudioVideoCodecs.ApplyBTN.Background = color.Default
  Try Chains.ApplyBTN.Background = color.Default
  Try GeneralOptions.ApplyBTN.Background = color.Default
  Try VFiltersCfg.ApplyBTN.Background = color.Default
  Try XConfigureAudioDriver.ApplyBTN.Background = color.Default
  Try XConfigureVideoDriver.ApplyBTN.Background = color.Default  
  Try SubAndOsd.ApplyBTN.Background = color.default
End



Public Sub RedApplyBtnColor()
  Try AFiltersCfg.ApplyBTN.Background = color.red
  Try AudioVideoCodecs.ApplyBTN.Background = color.red
  Try Chains.ApplyBTN.Background = color.red
  Try GeneralOptions.ApplyBTN.Background = color.red
  Try VFiltersCfg.ApplyBTN.Background = color.red
  Try XConfigureAudioDriver.ApplyBTN.Background = color.red
  Try XConfigureVideoDriver.ApplyBTN.Background = color.red
  Try SubAndOsd.ApplyBTN.Background = color.red
End
